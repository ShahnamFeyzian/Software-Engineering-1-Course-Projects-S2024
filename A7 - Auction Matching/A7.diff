diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..b850376
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "TinyME-Base"]
+	path = TinyME-Base
+	url = https://github.com/SE1-ECE-UT/TinyME.git
diff --git a/A7 - Auction Matching/Description/SE1S03-A7-Description.pdf b/A7 - Auction Matching/Description/SE1S03-A7-Description.pdf
new file mode 100644
index 0000000..273eb8c
--- /dev/null
+++ b/A7 - Auction Matching/Description/SE1S03-A7-Description.pdf	
@@ -0,0 +1,167 @@
+‫دانشکده مهندسی برق و کامپیوتر‬
+
+‫مهندسی نر ‌مافزار ‪۱‬‬
+
+‫مدرس‪ :‬رامتین خسروی‬
+‫بهار ‪۱۴۰۳‬‬
+
+                               ‫تکلیف هفت‬
+
+                               ‫پیاده‌سازی حراج‬
+
+‫برای تطابق سفار ‌ شهای ورودی حالت‌های مختلفی مطرح هستند‪ .‬یکی از این حال ‌تها تطابق پیوسته‬
+‫(‪ )Continuous‬است که در حال حاضر پیاده‌سازی شده است‪ .‬در این تکلیف‪ ،‬هدف پیاده‌سازی نوع دیگری از‬
+
+                           ‫تطابق به نام تطابق بر مبنای حراج یا تطابق حراج (‪ )Auction‬به صورت خلاصه است‪.‬‬
+
+                                                  ‫هسته معاملات حراج‬
+
+‫در این تطابق هدف آن است که هر معامله‌گر دیدی نسبت به نظر سایر معامل ‌هگران و میزان عرضه‪/‬تقاضای‬
+‫بازار داشته باشد‪ .‬در نتیجه در تطابق حراج در هنگام ورود سفارش پس از انجام اعتبار سنجی‌های لازمه‪،‬‬
+‫سفارش مستقیما به صف سفارش‌ها منتقل م ‌یشود‪ .‬توجه شود که در هنگام ورود سفارش در صف مقابل‬
+‫می‌تواند سفارش‌هایی وجود داشته که با این سفارش قابل معامله هستند ولی هیچگونه بررسی برای ایجاد‬
+‫معامله انجام نمی‌شود و سفارش‌ها به صورت مستقیم به صف سفار ‌ شها منتقل می‌شوند‪ .‬در تطابق حراج‬
+‫پس از ورود سفارش یک قیمت به نام قیمت بازگشایی (که الگوریتم آن در ادامه توضیح داده شده است)‬
+‫اعلام می‌شود و معامله‌گر بر اساس این اطلاعات بازخوردی مربوط به میزان عرضه‪/‬تقاضای بازار بدست‬
+
+                                                                                                                   ‫م ‌یآورد‪.‬‬
+
+                                                                                      ‫بازگشایی‬
+
+‫هر تطابق حراج با یک عملیات بازگشایی به اتمام می‌رسد‪ .‬در عملیات بازگشایی مجموعه سفار ‌ شهایی که با‬
+‫قیمت بازگشایی قابلیت معامله دارند (سفارش‌هایی که قیمت بازگشایی برابر یا بهتر از قیمت آ ‌نها است)‬
+‫انتخاب م ‌یشوند و به ترتیب صف معامله می‌شوند‪ .‬این فرآیند تا زمانی ادامه پیدا م ‌یکند در یکی از دو سمت‬
+‫خرید و یا فروش سفار ‌ شهای منتخب به اتمام برسند‪ .‬سفارش‌هایی که در این فرآیند انتخاب شد ‌هاند ولی‬
+‫معامله نشده‌اند به ترتیب به صف بازگردانده می‌شوند‪ .‬قیمت تمامی معاملاتی که در این عملیات تولید‬
+‫می‌شوند برابر با قیمت بازگشایی است‪ .‬توجه به این نکته لازم است که برای برخی یا همه سفار ‌ شهای خرید‪،‬‬
+‫قیمت معامله با قیمت استفاده شده در محاسبه ارزش سفارش تفاوت دارد‪ .‬در نتیجه برای این سفار ‌ شها‬
+
+                     ‫باید به میزان اختلاف ارزش معامله و ارزش سفارش به اعتبار کارگزاری مربوطه اضافه شود‪.‬‬
+
+                                                                    ‫محاسبه قیمت بازگشایی‬
+
+‫هدف در محاسبه قیمت بازگشایی‪ ،‬تعیین قیمتی است که در صورتی که بازگشایی با این قیمت صورت گیرد‌‪،‬‬
+‫بیشترین حجم معامله تولید شود‪ .‬توجه شود که در این قیمت تعداد معامل ‌هها مطرح نیستند بلکه مجموع‬
+‫حجم معامل ‌هها مورد نظر است‪ .‬برای محاسبه قیمت بازگشایی از بازه کمترین قیمت صف خرید تا بیشترین‬
+‫قیمت در صف فروش یک قیمت باید انتخاب شود‪ .‬برای انتخاب این قیمت‪ ،‬می‌توان حجم قابل معامله برای‬
+‫تمامی قیم ‌تهای در این بازه محاسبه کرد و قیمتی که منجر به بیشترین میزان معامله می‌شود به عنوان‬
+‫قیمت بازگشایی انتخاب می‌شود‪ .‬در صورتی که چند قیمت دارای بیشترین میزان حجم معامله باشند‪،‬‬
+‫نزدی ‌کترین قیمت به قیمت آخرین معامله انتخاب م ‌یشود‪ .‬در صورتی که این شرط نیز برای چند قیمت برقرار‬
+
+                                                                                 ‫باشد‪ ،‬کمترین قیمت انتخاب می‌شود‪.‬‬
+
+                                                                            ‫تغییر حالت تطابق‬
+
+‫برای تعیین نوع حراج مورد استفاده باید برای نما ‌دها «حالت» تعریف کرد‪ .‬در حال حاضر دو حالت برای یک‬
+‫نماد متصور است‪ :‬حالت تطابق پیوسته و حالت تطابق حراج‪ .‬انتقال بین دو حالت تطابق از طریق یک‬
+‫درخواست جدید انجام می‌شود‪ .‬در صورتی که سیستم در حالت تطابق حراج باشد و درخواست تغییر حالت‬
+‫ارسال شود‪ ،‬سیستم ابتدا فرآیند بازگشایی را انجام می‌دهد و سپس به حالت جدید تغییر م ‌یکند‪ .‬توجه به‬
+‫این نکته لازم است که تغییر حالت از تطبیق حراج به تطبیق حراج تغییر حالت مجازی است‪ .‬فرایند تغییر‬
+‫حالت تطابق با ارسال یک درخواست تغییر حالت که با روال عادی درخواس ‌تهای ورودی به سیستم داده‬
+‫م ‌یشود صورت می‌پذیرد‪ .‬به این منظور یک ‪ enum‬به نام‬
+‫‪ ir.ramtung.tinyme.messaging.request.MatchingState‬تعریف کنید که شامل دو مقدار ‪ AUCTION‬یا‬
+
+                                                                                                  ‫‪ CONTINUOUS‬است‪.‬‬
+
+                   ‫درخواست تغییر حالت (کلاس ‪)ChangeMatchingStateRq‬‬
+
+     ‫مثال‬          ‫تایپ فیلد‬  ‫نام فیلد‬
+‫”‪"ABC‬‬
+‫‪AUCTION‬‬    ‫‪String‬‬             ‫‪securityIsin‬‬
+
+           ‫‪ir.ramtung.tinyme.messaging.request.MatchingState targetState‬‬
+                                                                                  ‫نکات تکمیلی‬
+
+‫در حالت تطابق حراج‪ ،‬برای هر سفارش تمامی اعتبا‌رسنج ‌یهایی که در حال حاضر بر روی سفارش انجام‬
+‫م ‌یشود باید بررسی شوند‪ .‬این اعتبا‌رسنجی‌ها شامل اعتبار و دارایی نیز م ‌یشود و همانند حالت جاری در‬
+‫صورتی که سفارش معتبر باشد‪ ،‬برای سفارش‌های خرید‪ ،‬از میزان اعتبار کارگزاری مربوط به سفارش به اندازه‬
+
+     ‫ارزش سفارش کم م ‌یشود‪ .‬همچنین قوانین به‌روزرسانی و حذف سفارش همانند تطابق پیوسته هستند‪.‬‬
+
+‫در تطابق حراج امکان ثبت سفارش با مقدار کمینه وجود ندارد‪ .‬همچنین امکان ثبت سفار ‌ شهای توقفی در‬
+‫حالت تطبیق حراج وجود ندارد ولی امکان ثبت سفار ‌ شهای آی ‌ سبرگ وجود دارد‪ .‬رفتار این سفارش‌ها در‬
+‫هنگام بازگشایی همانند رفتا‌ر آ ‌نها در زمانی است که در صف قرار دارند (در هنگام ایجاد معامله فقط حجم‬
+‫قابل مشاهده می‌تواند معامله شود و در صورتی که حجم قابل مشاهده به اتمام برسد‪ ،‬سفارش آیس برگ‬
+‫در مجموعه سفار ‌ شهای انتخاب شده برای عملیات بازگشایی اولویت زمانی خود را از دست م ‌یدهد و با یک‬
+‫اولویت زمانی جدید در این مجموعه جایگذاری می‌شود)‪ .‬در محاسبه قیمت بازگشایی برای سفار ‌ شهای‬
+
+                                              ‫آی ‌ سبرگ کل حجم (و نه حجم قابل مشاهده) در نظر گرفته می‌شود‪.‬‬
+
+‫پس از ورود هر درخواست سفارش به سیستم‪ ،‬در صورتی که درخواست رد نشود‪ ،‬علاوه بر رخداد پذیرش‬
+                                                      ‫سفارش‪ ،‬رخداد قیمت بازگشایی نیز باید تولید و منتشر شود‪.‬‬
+
+‫در موارد آزمون در نظر گرفته می‌شود که پیش از تغییر به حالت تطابق حراج‪ ،‬قیمت آخرین معامله تعیین‬
+‫شده باشد‪ .‬همچنین تغییر حالت از تطابق حراج منجر به انتشار مجموع ‌های از رخدا ‌دهای معامله‬
+‫(‪ )TradeEvent‬م ‌یشود‪ .‬این رخداد‌ها با رخدا ‌د اجرای سفارش (‪ )OrderExecutedEvent‬متفاوت هستند و‬
+
+                       ‫دارای فیلدهای ‪ requestId‬و ‪ orderId‬نیستند و فقط اطلاعات یک معامله را دارا هستند‪.‬‬
+
+                                                                        ‫شرح رخدادهای جدید‬
+
+     ‫اضافه کردن ویژگی (‪ )feature‬تطابق حراج به سیستم نیازمند تعریف چند رخداد (‪ )event‬جدید است که‬
+‫شرایط انتشار آ ‌نها پی ‌ شتر آماده است‪ .‬در ادامه به شرح دقیق ساختار پیغام رخداد در صف خروجی سیستم‬
+
+                                                                                                        ‫پرداخته م ‌یشود‪.‬‬
+
+                     ‫مثال‬                 ‫تایپ فیلد‬  ‫رخداد ‪SecurityStateChangedEvent‬‬
+‫‪2024-02-23T10:59:54.970‬‬                                                    ‫نام فیلد‬
+
+    ‫”‪"ABC‬‬                  ‫‪LocalDateTime‬‬             ‫‪time‬‬
+    ‫‪AUCTION‬‬                ‫‪String‬‬                    ‫‪securityIsin‬‬
+
+                           ‫‪ir.ramtung.tinyme.messaging.request.MatchingState state‬‬
+‫● دقت شود که ‪ state‬نشانگر حالت کنونی سیستم (پس از تغییر حالت) به صورت یک ‪ Enum‬با‬
+                                                                ‫مقدار ‪ CONTINUOUS‬یا ‪ AUCTION‬است‪.‬‬
+
+                     ‫مثال‬                 ‫تایپ فیلد‬    ‫رخداد ‪OpeningPriceEvent‬‬
+‫‪2024-02-23T10:59:54.970‬‬                                           ‫نام فیلد‬
+                           ‫‪LocalDateTime‬‬
+    ‫”‪"ABC‬‬                  ‫‪String‬‬                    ‫‪time‬‬
+    ‫‪50‬‬                     ‫‪int‬‬                       ‫‪securityIsin‬‬
+    ‫‪50‬‬                     ‫‪int‬‬                       ‫‪openingPrice‬‬
+                                                     ‫‪tradableQuantity‬‬
+
+‫● دقت شود که ‪ tradableQuantity‬یک ‪ int‬از مقدار حجم قابل معامله در هنگام گشایش است‪.‬‬
+
+                     ‫مثال‬                 ‫تایپ فیلد‬              ‫رخداد ‪TradeEvent‬‬
+‫‪2024-02-23T10:59:54.970‬‬                                           ‫نام فیلد‬
+                           ‫‪LocalDateTime‬‬             ‫‪time‬‬
+    ‫”‪"ABC‬‬                  ‫‪String‬‬                    ‫‪securityIsin‬‬
+    ‫‪50‬‬                     ‫‪int‬‬                       ‫‪price‬‬
+    ‫‪50‬‬                     ‫‪int‬‬                       ‫‪quantity‬‬
+    ‫‪12345679‬‬               ‫‪long‬‬                      ‫‪buyId‬‬
+    ‫‪123456788‬‬              ‫‪long‬‬                      ‫‪sellId‬‬
+
+                                                                      ‫نحوه ارزیابی‬
+
+                                          ‫پاسخ‌های شما به این تکلیف از جنبه‌های زیر ارزیابی م ‌یشود‪.‬‬
+                                                                       ‫● درستی عملکرد (‪ ۶۰‬درصد)‬
+
+                                                        ‫○ درستی عملکرد ویژگی‌های جدید‬
+                               ‫○ خراب نکردن کارکردهایی که در تکلیف قبل درست کار می‌کرد ‌هاند‬
+                                                                       ‫● تمیزی کد در جنب ‌ههای زیر (‪ ۲۰‬درصد)‬
+
+                            ‫○ نام‌گذاری خوانا و هم‌خوان با زبان فراگیر (‪)ubiquitous language‬‬
+                                                              ‫○ متدهای کوتاهی که یک وظیفه دارند‬
+                                                                ‫○ سپردن وظایف به کلا ‌ سهای مرتبط‬
+
+                                ‫○ رعایت انسجام (‪ )cohesion‬بالا و وابستگی پایین بین کلا ‌ سها‬
+                                                                                       ‫○ نبود کد تکراری‬
+
+                                                                   ‫● کدهای آزمون در جنب ‌ههای زیر (‪ ۲۰‬درصد)‬
+                                                             ‫○ سناریوهای مختلف اجرا آزموده شوند‬
+                               ‫○ هر آزمایه یک هدف داشته باشد‪ ،‬یعنی وجود یک خطا را بیازماید‬
+                       ‫○ نام آزمای ‌هها را طوری انتخاب کنید که هدف آن را به طور واضح بیان کند‬
+                                                      ‫○ تا حد امکان از داشتن کد تکراری پرهیز کنید‬
+
+                                                             ‫نحوه تحویل‬
+
+‫برای تحویل تکلیف‪ ،‬لازم است که ‪ SHA‬آخرین کامیت مخزن پروژه تیم (روی گیت‌هاب) و همینطور لینک‬
+‫مخزن ‪ GitHub‬در محل مشخ ‌ صشده در ای‌لرن وارد شود‪ .‬یادآوری می‌نماید برای تکلیف‌های گروهی امکان‬
+‫تحویل با تأخیر وجود ندارد‪ .‬به همین خاطر توصیه م ‌یشود توسعه خود را در بخش‌های کوچک انجام دهید‬
+
+                                                   ‫و پس از اطمینان از صحت آن بخش‪ ،‬آن را در مخزن ‪ push‬کنید‪.‬‬
+
+‫دقت کنید این تکلیف تحویل حضوری خواهد داشت‪ .‬حضور تمام اعضای گروه هنگام تحویل ضروری است و‬
+                                                               ‫اعضای غایب نمره این تکلیف را از دست خواهند داد‪.‬‬
+
diff --git a/A7 - Auction Matching/Description/doc.txt b/A7 - Auction Matching/Description/doc.txt
new file mode 100644
index 0000000..faf6838
--- /dev/null
+++ b/A7 - Auction Matching/Description/doc.txt	
@@ -0,0 +1 @@
+https://docs.google.com/document/d/1taZkm1brXWoL3X8dvX9a47x1ZazUfrVZJtpI-AYx1z8/edit
\ No newline at end of file
diff --git a/A7 - Auction Matching/HELP.md b/A7 - Auction Matching/HELP.md
new file mode 100644
index 0000000..8382456
--- /dev/null
+++ b/A7 - Auction Matching/HELP.md	
@@ -0,0 +1,5 @@
+### Reference Documentation
+
+For further reference, please consider the following sections:
+
+- [Auction Matching Wikipedia](https://en.wikipedia.org/wiki/Auction#Auction_matching)
diff --git a/README.md b/README.md
index a5cd424..aa0e26a 100644
--- a/README.md
+++ b/README.md
@@ -9,6 +9,7 @@
   - [Assignment 4: Minimum Execution Quantity](#assignment-4-minimum-execution-quantity)
   - [Assignment 5: Stop Limit Order](#assignment-5-stop-limit-order)
   - [Assignment 6: Technical Debt](#assignment-6-technical-debt)
+  - [Assignment 7: Auction Matching](#assignment-7-auction-matching)
 
 ## Intro
 
@@ -41,3 +42,7 @@ In this assignment, we were supposed to add a new type of order to the `TinyME`
 ## Assignment 6: Technical Debt
 
 In this assignment, we were supposed to refactor the `TinyME` application to remove the technical debt, since the last version of the application was not well-designed. The technical debt was supposed to be removed in a way that the existing tests would not fail. For more information, please refer to the description file in the `A6` folder.
+
+## Assignment 7: Auction Matching
+
+In this assignment, we were supposed to add a new feature to the `TinyME` application. The new feature was to add an auction mechanism to the application. For more information, please refer to the description file in the `A7` folder.
\ No newline at end of file
diff --git a/TinyME-Base b/TinyME-Base
new file mode 160000
index 0000000..e3f6eb6
--- /dev/null
+++ b/TinyME-Base
@@ -0,0 +1 @@
+Subproject commit e3f6eb625abbb8abeb4c3b099edbc080f911b121
diff --git a/TinyME/.gitignore b/TinyME/.gitignore
deleted file mode 100644
index 524f096..0000000
--- a/TinyME/.gitignore
+++ /dev/null
@@ -1,24 +0,0 @@
-# Compiled class file
-*.class
-
-# Log file
-*.log
-
-# BlueJ files
-*.ctxt
-
-# Mobile Tools for Java (J2ME)
-.mtj.tmp/
-
-# Package Files #
-*.jar
-*.war
-*.nar
-*.ear
-*.zip
-*.tar.gz
-*.rar
-
-# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
-hs_err_pid*
-replay_pid*
diff --git a/TinyME/HELP.md b/TinyME/HELP.md
deleted file mode 100644
index f970ec9..0000000
--- a/TinyME/HELP.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# Getting Started
-
-### Reference Documentation
-
-For further reference, please consider the following sections:
-
--   [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
--   [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/docs/3.2.0/maven-plugin/reference/html/)
--   [Create an OCI image](https://docs.spring.io/spring-boot/docs/3.2.0/maven-plugin/reference/html/#build-image)
--   [Spring for Apache ActiveMQ Artemis](https://docs.spring.io/spring-boot/docs/3.2.0/reference/htmlsingle/index.html#messaging.jms.artemis)
-
-### Guides
-
-The following guides illustrate how to use some features concretely:
-
--   [Messaging with JMS](https://spring.io/guides/gs/messaging-jms/)
diff --git a/TinyME/mvnw b/TinyME/mvnw
deleted file mode 100644
index ef7cf16..0000000
--- a/TinyME/mvnw
+++ /dev/null
@@ -1,332 +0,0 @@
-#!/bin/sh
-# ----------------------------------------------------------------------------
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#    https://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-# ----------------------------------------------------------------------------
-
-# ----------------------------------------------------------------------------
-# Apache Maven Wrapper startup batch script, version 3.2.0
-#
-# Required ENV vars:
-# ------------------
-#   JAVA_HOME - location of a JDK home dir
-#
-# Optional ENV vars
-# -----------------
-#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
-#     e.g. to debug Maven itself, use
-#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
-#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
-# ----------------------------------------------------------------------------
-
-if [ -z "$MAVEN_SKIP_RC" ]; then
-
-  if [ -f /usr/local/etc/mavenrc ]; then
-    . /usr/local/etc/mavenrc
-  fi
-
-  if [ -f /etc/mavenrc ]; then
-    . /etc/mavenrc
-  fi
-
-  if [ -f "$HOME/.mavenrc" ]; then
-    . "$HOME/.mavenrc"
-  fi
-
-fi
-
-# OS specific support.  $var _must_ be set to either true or false.
-cygwin=false
-darwin=false
-mingw=false
-case "$(uname)" in
-CYGWIN*) cygwin=true ;;
-MINGW*) mingw=true ;;
-Darwin*)
-  darwin=true
-  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
-  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
-  if [ -z "$JAVA_HOME" ]; then
-    if [ -x "/usr/libexec/java_home" ]; then
-      JAVA_HOME="$(/usr/libexec/java_home)"
-      export JAVA_HOME
-    else
-      JAVA_HOME="/Library/Java/Home"
-      export JAVA_HOME
-    fi
-  fi
-  ;;
-esac
-
-if [ -z "$JAVA_HOME" ]; then
-  if [ -r /etc/gentoo-release ]; then
-    JAVA_HOME=$(java-config --jre-home)
-  fi
-fi
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched
-if $cygwin; then
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=$(cygpath --unix "$JAVA_HOME")
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=$(cygpath --path --unix "$CLASSPATH")
-fi
-
-# For Mingw, ensure paths are in UNIX format before anything is touched
-if $mingw; then
-  [ -n "$JAVA_HOME" ] && [ -d "$JAVA_HOME" ] &&
-    JAVA_HOME="$(
-      cd "$JAVA_HOME" || (
-        echo "cannot cd into $JAVA_HOME."
-        exit 1
-      )
-      pwd
-    )"
-fi
-
-if [ -z "$JAVA_HOME" ]; then
-  javaExecutable="$(which javac)"
-  if [ -n "$javaExecutable" ] && ! [ "$(expr "\"$javaExecutable\"" : '\([^ ]*\)')" = "no" ]; then
-    # readlink(1) is not available as standard on Solaris 10.
-    readLink=$(which readlink)
-    if [ ! "$(expr "$readLink" : '\([^ ]*\)')" = "no" ]; then
-      if $darwin; then
-        javaHome="$(dirname "\"$javaExecutable\"")"
-        javaExecutable="$(cd "\"$javaHome\"" && pwd -P)/javac"
-      else
-        javaExecutable="$(readlink -f "\"$javaExecutable\"")"
-      fi
-      javaHome="$(dirname "\"$javaExecutable\"")"
-      javaHome=$(expr "$javaHome" : '\(.*\)/bin')
-      JAVA_HOME="$javaHome"
-      export JAVA_HOME
-    fi
-  fi
-fi
-
-if [ -z "$JAVACMD" ]; then
-  if [ -n "$JAVA_HOME" ]; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
-      # IBM's JDK on AIX uses strange locations for the executables
-      JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-      JAVACMD="$JAVA_HOME/bin/java"
-    fi
-  else
-    JAVACMD="$(
-      \unset -f command 2>/dev/null
-      \command -v java
-    )"
-  fi
-fi
-
-if [ ! -x "$JAVACMD" ]; then
-  echo "Error: JAVA_HOME is not defined correctly." >&2
-  echo "  We cannot execute $JAVACMD" >&2
-  exit 1
-fi
-
-if [ -z "$JAVA_HOME" ]; then
-  echo "Warning: JAVA_HOME environment variable is not set."
-fi
-
-# traverses directory structure from process work directory to filesystem root
-# first directory with .mvn subdirectory is considered project base directory
-find_maven_basedir() {
-  if [ -z "$1" ]; then
-    echo "Path not specified to find_maven_basedir"
-    return 1
-  fi
-
-  basedir="$1"
-  wdir="$1"
-  while [ "$wdir" != '/' ]; do
-    if [ -d "$wdir"/.mvn ]; then
-      basedir=$wdir
-      break
-    fi
-    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
-    if [ -d "${wdir}" ]; then
-      wdir=$(
-        cd "$wdir/.." || exit 1
-        pwd
-      )
-    fi
-    # end of workaround
-  done
-  printf '%s' "$(
-    cd "$basedir" || exit 1
-    pwd
-  )"
-}
-
-# concatenates all lines of a file
-concat_lines() {
-  if [ -f "$1" ]; then
-    # Remove \r in case we run on Windows within Git Bash
-    # and check out the repository with auto CRLF management
-    # enabled. Otherwise, we may read lines that are delimited with
-    # \r\n and produce $'-Xarg\r' rather than -Xarg due to word
-    # splitting rules.
-    tr -s '\r\n' ' ' <"$1"
-  fi
-}
-
-log() {
-  if [ "$MVNW_VERBOSE" = true ]; then
-    printf '%s\n' "$1"
-  fi
-}
-
-BASE_DIR=$(find_maven_basedir "$(dirname "$0")")
-if [ -z "$BASE_DIR" ]; then
-  exit 1
-fi
-
-MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
-export MAVEN_PROJECTBASEDIR
-log "$MAVEN_PROJECTBASEDIR"
-
-##########################################################################################
-# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
-# This allows using the maven wrapper in projects that prohibit checking in binary data.
-##########################################################################################
-wrapperJarPath="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
-if [ -r "$wrapperJarPath" ]; then
-  log "Found $wrapperJarPath"
-else
-  log "Couldn't find $wrapperJarPath, downloading it ..."
-
-  if [ -n "$MVNW_REPOURL" ]; then
-    wrapperUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
-  else
-    wrapperUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
-  fi
-  while IFS="=" read -r key value; do
-    # Remove '\r' from value to allow usage on windows as IFS does not consider '\r' as a separator ( considers space, tab, new line ('\n'), and custom '=' )
-    safeValue=$(echo "$value" | tr -d '\r')
-    case "$key" in wrapperUrl)
-      wrapperUrl="$safeValue"
-      break
-      ;;
-    esac
-  done <"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
-  log "Downloading from: $wrapperUrl"
-
-  if $cygwin; then
-    wrapperJarPath=$(cygpath --path --windows "$wrapperJarPath")
-  fi
-
-  if command -v wget >/dev/null; then
-    log "Found wget ... using wget"
-    [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--quiet"
-    if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
-      wget $QUIET "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
-    else
-      wget $QUIET --http-user="$MVNW_USERNAME" --http-password="$MVNW_PASSWORD" "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
-    fi
-  elif command -v curl >/dev/null; then
-    log "Found curl ... using curl"
-    [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--silent"
-    if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
-      curl $QUIET -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
-    else
-      curl $QUIET --user "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
-    fi
-  else
-    log "Falling back to using Java to download"
-    javaSource="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java"
-    javaClass="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class"
-    # For Cygwin, switch paths to Windows format before running javac
-    if $cygwin; then
-      javaSource=$(cygpath --path --windows "$javaSource")
-      javaClass=$(cygpath --path --windows "$javaClass")
-    fi
-    if [ -e "$javaSource" ]; then
-      if [ ! -e "$javaClass" ]; then
-        log " - Compiling MavenWrapperDownloader.java ..."
-        ("$JAVA_HOME/bin/javac" "$javaSource")
-      fi
-      if [ -e "$javaClass" ]; then
-        log " - Running MavenWrapperDownloader.java ..."
-        ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$wrapperUrl" "$wrapperJarPath") || rm -f "$wrapperJarPath"
-      fi
-    fi
-  fi
-fi
-##########################################################################################
-# End of extension
-##########################################################################################
-
-# If specified, validate the SHA-256 sum of the Maven wrapper jar file
-wrapperSha256Sum=""
-while IFS="=" read -r key value; do
-  case "$key" in wrapperSha256Sum)
-    wrapperSha256Sum=$value
-    break
-    ;;
-  esac
-done <"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
-if [ -n "$wrapperSha256Sum" ]; then
-  wrapperSha256Result=false
-  if command -v sha256sum >/dev/null; then
-    if echo "$wrapperSha256Sum  $wrapperJarPath" | sha256sum -c >/dev/null 2>&1; then
-      wrapperSha256Result=true
-    fi
-  elif command -v shasum >/dev/null; then
-    if echo "$wrapperSha256Sum  $wrapperJarPath" | shasum -a 256 -c >/dev/null 2>&1; then
-      wrapperSha256Result=true
-    fi
-  else
-    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available."
-    echo "Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties."
-    exit 1
-  fi
-  if [ $wrapperSha256Result = false ]; then
-    echo "Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised." >&2
-    echo "Investigate or delete $wrapperJarPath to attempt a clean download." >&2
-    echo "If you updated your Maven version, you need to update the specified wrapperSha256Sum property." >&2
-    exit 1
-  fi
-fi
-
-MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin; then
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=$(cygpath --path --windows "$JAVA_HOME")
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=$(cygpath --path --windows "$CLASSPATH")
-  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
-    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows "$MAVEN_PROJECTBASEDIR")
-fi
-
-# Provide a "standardized" way to retrieve the CLI args that will
-# work with both Windows and non-Windows executions.
-MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $*"
-export MAVEN_CMD_LINE_ARGS
-
-WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
-
-# shellcheck disable=SC2086 # safe args
-exec "$JAVACMD" \
-  $MAVEN_OPTS \
-  $MAVEN_DEBUG_OPTS \
-  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
-  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
-  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
diff --git a/TinyME/mvnw.cmd b/TinyME/mvnw.cmd
deleted file mode 100644
index 95ba6f5..0000000
--- a/TinyME/mvnw.cmd
+++ /dev/null
@@ -1,205 +0,0 @@
-@REM ----------------------------------------------------------------------------
-@REM Licensed to the Apache Software Foundation (ASF) under one
-@REM or more contributor license agreements.  See the NOTICE file
-@REM distributed with this work for additional information
-@REM regarding copyright ownership.  The ASF licenses this file
-@REM to you under the Apache License, Version 2.0 (the
-@REM "License"); you may not use this file except in compliance
-@REM with the License.  You may obtain a copy of the License at
-@REM
-@REM    https://www.apache.org/licenses/LICENSE-2.0
-@REM
-@REM Unless required by applicable law or agreed to in writing,
-@REM software distributed under the License is distributed on an
-@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-@REM KIND, either express or implied.  See the License for the
-@REM specific language governing permissions and limitations
-@REM under the License.
-@REM ----------------------------------------------------------------------------
-
-@REM ----------------------------------------------------------------------------
-@REM Apache Maven Wrapper startup batch script, version 3.2.0
-@REM
-@REM Required ENV vars:
-@REM JAVA_HOME - location of a JDK home dir
-@REM
-@REM Optional ENV vars
-@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
-@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
-@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
-@REM     e.g. to debug Maven itself, use
-@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
-@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
-@REM ----------------------------------------------------------------------------
-
-@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
-@echo off
-@REM set title of command window
-title %0
-@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
-@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
-
-@REM set %HOME% to equivalent of $HOME
-if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
-
-@REM Execute a user defined script before this one
-if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
-@REM check for pre script, once with legacy .bat ending and once with .cmd ending
-if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
-if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
-:skipRcPre
-
-@setlocal
-
-set ERROR_CODE=0
-
-@REM To isolate internal variables from possible post scripts, we use another setlocal
-@setlocal
-
-@REM ==== START VALIDATION ====
-if not "%JAVA_HOME%" == "" goto OkJHome
-
-echo.
-echo Error: JAVA_HOME not found in your environment. >&2
-echo Please set the JAVA_HOME variable in your environment to match the >&2
-echo location of your Java installation. >&2
-echo.
-goto error
-
-:OkJHome
-if exist "%JAVA_HOME%\bin\java.exe" goto init
-
-echo.
-echo Error: JAVA_HOME is set to an invalid directory. >&2
-echo JAVA_HOME = "%JAVA_HOME%" >&2
-echo Please set the JAVA_HOME variable in your environment to match the >&2
-echo location of your Java installation. >&2
-echo.
-goto error
-
-@REM ==== END VALIDATION ====
-
-:init
-
-@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
-@REM Fallback to current working directory if not found.
-
-set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
-IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
-
-set EXEC_DIR=%CD%
-set WDIR=%EXEC_DIR%
-:findBaseDir
-IF EXIST "%WDIR%"\.mvn goto baseDirFound
-cd ..
-IF "%WDIR%"=="%CD%" goto baseDirNotFound
-set WDIR=%CD%
-goto findBaseDir
-
-:baseDirFound
-set MAVEN_PROJECTBASEDIR=%WDIR%
-cd "%EXEC_DIR%"
-goto endDetectBaseDir
-
-:baseDirNotFound
-set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
-cd "%EXEC_DIR%"
-
-:endDetectBaseDir
-
-IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
-
-@setlocal EnableExtensions EnableDelayedExpansion
-for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
-@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
-
-:endReadAdditionalConfig
-
-SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
-set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
-set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
-
-set WRAPPER_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
-
-FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
-    IF "%%A"=="wrapperUrl" SET WRAPPER_URL=%%B
-)
-
-@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
-@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
-if exist %WRAPPER_JAR% (
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Found %WRAPPER_JAR%
-    )
-) else (
-    if not "%MVNW_REPOURL%" == "" (
-        SET WRAPPER_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
-    )
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Couldn't find %WRAPPER_JAR%, downloading it ...
-        echo Downloading from: %WRAPPER_URL%
-    )
-
-    powershell -Command "&{"^
-		"$webclient = new-object System.Net.WebClient;"^
-		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
-		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
-		"}"^
-		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')"^
-		"}"
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Finished downloading %WRAPPER_JAR%
-    )
-)
-@REM End of extension
-
-@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
-SET WRAPPER_SHA_256_SUM=""
-FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
-    IF "%%A"=="wrapperSha256Sum" SET WRAPPER_SHA_256_SUM=%%B
-)
-IF NOT %WRAPPER_SHA_256_SUM%=="" (
-    powershell -Command "&{"^
-       "$hash = (Get-FileHash \"%WRAPPER_JAR%\" -Algorithm SHA256).Hash.ToLower();"^
-       "If('%WRAPPER_SHA_256_SUM%' -ne $hash){"^
-       "  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';"^
-       "  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';"^
-       "  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';"^
-       "  exit 1;"^
-       "}"^
-       "}"
-    if ERRORLEVEL 1 goto error
-)
-
-@REM Provide a "standardized" way to retrieve the CLI args that will
-@REM work with both Windows and non-Windows executions.
-set MAVEN_CMD_LINE_ARGS=%*
-
-%MAVEN_JAVA_EXE% ^
-  %JVM_CONFIG_MAVEN_PROPS% ^
-  %MAVEN_OPTS% ^
-  %MAVEN_DEBUG_OPTS% ^
-  -classpath %WRAPPER_JAR% ^
-  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
-  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
-if ERRORLEVEL 1 goto error
-goto end
-
-:error
-set ERROR_CODE=1
-
-:end
-@endlocal & set ERROR_CODE=%ERROR_CODE%
-
-if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
-@REM check for post script, once with legacy .bat ending and once with .cmd ending
-if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
-if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
-:skipRcPost
-
-@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
-if "%MAVEN_BATCH_PAUSE%"=="on" pause
-
-if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
-
-cmd /C exit /B %ERROR_CODE%
diff --git a/TinyME/pom.xml b/TinyME/pom.xml
deleted file mode 100644
index 49decfb..0000000
--- a/TinyME/pom.xml
+++ /dev/null
@@ -1,116 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>
-		4.0.0
-	</modelVersion>
-	<parent>
-		<groupId>
-			org.springframework.boot
-		</groupId>
-		<artifactId>
-			spring-boot-starter-parent
-		</artifactId>
-		<version>
-			3.2.0
-		</version>
-		<relativePath />
-		<!-- lookup parent from repository -->
-	</parent>
-	<groupId>
-		ir.ramtung
-	</groupId>
-	<artifactId>
-		tinyme
-	</artifactId>
-	<version>
-		0.0.1-SNAPSHOT
-	</version>
-	<name>
-		TinyME
-	</name>
-	<description>
-		Base project for Advanced Software Design (ASDF03)
-	</description>
-	<properties>
-		<java.version>
-			21
-		</java.version>
-	</properties>
-	<dependencies>
-		<dependency>
-			<groupId>
-				org.springframework.boot
-			</groupId>
-			<artifactId>
-				spring-boot-starter-artemis
-			</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>
-				org.springframework.boot
-			</groupId>
-			<artifactId>
-				spring-boot-starter-json
-			</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>
-				org.springframework.boot
-			</groupId>
-			<artifactId>
-				spring-boot-starter-test
-			</artifactId>
-			<scope>
-				test
-			</scope>
-		</dependency>
-		<dependency>
-			<groupId>
-				org.springframework.boot
-			</groupId>
-			<artifactId>
-				spring-boot-configuration-processor
-			</artifactId>
-			<optional>
-				true
-			</optional>
-		</dependency>
-		<dependency>
-			<groupId>
-				org.projectlombok
-			</groupId>
-			<artifactId>
-				lombok
-			</artifactId>
-			<version>
-				1.18.30
-			</version>
-			<scope>
-				compile
-			</scope>
-		</dependency>
-		<dependency>
-			<groupId>
-				com.opencsv
-			</groupId>
-			<artifactId>
-				opencsv
-			</artifactId>
-			<version>
-				5.8
-			</version>
-		</dependency>
-	</dependencies>
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>
-					org.springframework.boot
-				</groupId>
-				<artifactId>
-					spring-boot-maven-plugin
-				</artifactId>
-			</plugin>
-		</plugins>
-	</build>
-</project>
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/TinyMeApplication.java b/TinyME/src/main/java/ir/ramtung/tinyme/TinyMeApplication.java
deleted file mode 100644
index 9492c6f..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/TinyMeApplication.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package ir.ramtung.tinyme;
-
-import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.jms.annotation.EnableJms;
-
-@SpringBootApplication
-@EnableJms
-public class TinyMeApplication {
-
-	public static void main(String[] args) {
-		SpringApplication.run(TinyMeApplication.class, args);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java
deleted file mode 100644
index a83e939..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import lombok.Builder;
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-import lombok.ToString;
-
-@ToString
-@EqualsAndHashCode(onlyExplicitlyIncluded = true)
-@Builder
-public class Broker {
-
-	@Getter
-	@EqualsAndHashCode.Include
-	private long brokerId;
-
-	@Getter
-	private String name;
-
-	@Getter
-	private long credit;
-
-	public void increaseCreditBy(long amount) {
-		assert amount >= 0;
-		credit += amount;
-	}
-
-	public void decreaseCreditBy(long amount) {
-		assert amount >= 0;
-		credit -= amount;
-	}
-
-	public boolean hasEnoughCredit(long amount) {
-		return credit >= amount;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
deleted file mode 100644
index 3d0147b..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import java.time.LocalDateTime;
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-import lombok.ToString;
-
-@Getter
-@EqualsAndHashCode(callSuper = true)
-@ToString(callSuper = true)
-public class IcebergOrder extends Order {
-
-	int peakSize;
-	int displayedQuantity;
-
-	public IcebergOrder(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder,
-		LocalDateTime entryTime,
-		int peakSize,
-		int displayedQuantity,
-		OrderStatus status
-	) {
-		super(
-			orderId,
-			security,
-			side,
-			quantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			status
-		);
-		this.peakSize = peakSize;
-		this.displayedQuantity = displayedQuantity;
-	}
-
-	public IcebergOrder(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder,
-		LocalDateTime entryTime,
-		int peakSize,
-		OrderStatus status
-	) {
-		this(
-			orderId,
-			security,
-			side,
-			quantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			peakSize,
-			Math.min(peakSize, quantity),
-			status
-		);
-	}
-
-	public IcebergOrder(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder,
-		LocalDateTime entryTime,
-		int peakSize
-	) {
-		this(
-			orderId,
-			security,
-			side,
-			quantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			peakSize,
-			OrderStatus.NEW
-		);
-	}
-
-	public IcebergOrder(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder,
-		int peakSize
-	) {
-		super(orderId, security, side, quantity, price, broker, shareholder);
-		this.peakSize = peakSize;
-		this.displayedQuantity = Math.min(peakSize, quantity);
-	}
-
-	@Override
-	public Order snapshot() {
-		return new IcebergOrder(
-			orderId,
-			security,
-			side,
-			quantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			peakSize,
-			OrderStatus.SNAPSHOT
-		);
-	}
-
-	@Override
-	public Order snapshotWithQuantity(int newQuantity) {
-		return new IcebergOrder(
-			orderId,
-			security,
-			side,
-			newQuantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			peakSize,
-			OrderStatus.SNAPSHOT
-		);
-	}
-
-	@Override
-	public int getQuantity() {
-		if (status == OrderStatus.NEW) return super.getQuantity();
-		return displayedQuantity;
-	}
-
-	@Override
-	public void decreaseQuantity(int amount) {
-		if (status == OrderStatus.NEW) {
-			super.decreaseQuantity(amount);
-			return;
-		}
-		if (amount > displayedQuantity) throw new IllegalArgumentException();
-		quantity -= amount;
-		displayedQuantity -= amount;
-	}
-
-	public void replenish() {
-		displayedQuantity = Math.min(quantity, peakSize);
-	}
-
-	@Override
-	public void updateFromRequest(EnterOrderRq updateOrderRq) {
-		super.updateFromRequest(updateOrderRq);
-		if (peakSize < updateOrderRq.getPeakSize()) {
-			displayedQuantity = Math.min(quantity, updateOrderRq.getPeakSize());
-		}
-		peakSize = updateOrderRq.getPeakSize();
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
deleted file mode 100644
index 49a4899..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Objects;
-
-public final class MatchResult {
-
-	private final MatchingOutcome outcome;
-	private final Order remainder;
-	private final LinkedList<Trade> trades;
-
-	public static MatchResult executed(Order remainder, List<Trade> trades) {
-		return new MatchResult(
-			MatchingOutcome.EXECUTED,
-			remainder,
-			new LinkedList<>(trades)
-		);
-	}
-
-	public static MatchResult notEnoughCredit() {
-		return new MatchResult(
-			MatchingOutcome.NOT_ENOUGH_CREDIT,
-			null,
-			new LinkedList<>()
-		);
-	}
-
-	public static MatchResult notEnoughPositions() {
-		return new MatchResult(
-			MatchingOutcome.NOT_ENOUGH_POSITIONS,
-			null,
-			new LinkedList<>()
-		);
-	}
-
-	private MatchResult(
-		MatchingOutcome outcome,
-		Order remainder,
-		LinkedList<Trade> trades
-	) {
-		this.outcome = outcome;
-		this.remainder = remainder;
-		this.trades = trades;
-	}
-
-	public MatchingOutcome outcome() {
-		return outcome;
-	}
-
-	public Order remainder() {
-		return remainder;
-	}
-
-	public LinkedList<Trade> trades() {
-		return trades;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (obj == this) return true;
-		if (obj == null || obj.getClass() != this.getClass()) return false;
-		var that = (MatchResult) obj;
-		return (
-			Objects.equals(this.remainder, that.remainder) &&
-			Objects.equals(this.trades, that.trades)
-		);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(remainder, trades);
-	}
-
-	@Override
-	public String toString() {
-		return (
-			"MatchResult[" +
-			"remainder=" +
-			remainder +
-			", " +
-			"trades=" +
-			trades +
-			']'
-		);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
deleted file mode 100644
index 4b97780..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-public enum MatchingOutcome {
-	EXECUTED,
-	NOT_ENOUGH_CREDIT,
-	NOT_ENOUGH_POSITIONS,
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
deleted file mode 100644
index 1c37edc..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
+++ /dev/null
@@ -1,165 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import java.time.LocalDateTime;
-import lombok.Builder;
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-import lombok.ToString;
-
-@Builder
-@EqualsAndHashCode
-@ToString
-@Getter
-public class Order {
-
-	protected long orderId;
-	protected Security security;
-	protected Side side;
-	protected int quantity;
-	protected int price;
-	protected Broker broker;
-	protected Shareholder shareholder;
-
-	@Builder.Default
-	protected LocalDateTime entryTime = LocalDateTime.now();
-
-	@Builder.Default
-	protected OrderStatus status = OrderStatus.NEW;
-
-	public Order(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder,
-		LocalDateTime entryTime,
-		OrderStatus status
-	) {
-		this.orderId = orderId;
-		this.security = security;
-		this.side = side;
-		this.quantity = quantity;
-		this.price = price;
-		this.entryTime = entryTime;
-		this.broker = broker;
-		this.shareholder = shareholder;
-		this.status = status;
-	}
-
-	public Order(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder,
-		LocalDateTime entryTime
-	) {
-		this.orderId = orderId;
-		this.security = security;
-		this.side = side;
-		this.quantity = quantity;
-		this.price = price;
-		this.entryTime = entryTime;
-		this.broker = broker;
-		this.shareholder = shareholder;
-		this.status = OrderStatus.NEW;
-	}
-
-	public Order(
-		long orderId,
-		Security security,
-		Side side,
-		int quantity,
-		int price,
-		Broker broker,
-		Shareholder shareholder
-	) {
-		this(
-			orderId,
-			security,
-			side,
-			quantity,
-			price,
-			broker,
-			shareholder,
-			LocalDateTime.now()
-		);
-	}
-
-	public Order snapshot() {
-		return new Order(
-			orderId,
-			security,
-			side,
-			quantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			OrderStatus.SNAPSHOT
-		);
-	}
-
-	public Order snapshotWithQuantity(int newQuantity) {
-		return new Order(
-			orderId,
-			security,
-			side,
-			newQuantity,
-			price,
-			broker,
-			shareholder,
-			entryTime,
-			OrderStatus.SNAPSHOT
-		);
-	}
-
-	public boolean matches(Order other) {
-		if (side == Side.BUY) return price >= other.price; else return (
-			price <= other.price
-		);
-	}
-
-	public void decreaseQuantity(int amount) {
-		if (amount > quantity) throw new IllegalArgumentException();
-		quantity -= amount;
-	}
-
-	public void makeQuantityZero() {
-		quantity = 0;
-	}
-
-	public boolean queuesBefore(Order order) {
-		if (order.getSide() == Side.BUY) {
-			return price > order.getPrice();
-		} else {
-			return price < order.getPrice();
-		}
-	}
-
-	public void queue() {
-		status = OrderStatus.QUEUED;
-	}
-
-	public boolean isQuantityIncreased(int newQuantity) {
-		return newQuantity > quantity;
-	}
-
-	public void updateFromRequest(EnterOrderRq updateOrderRq) {
-		quantity = updateOrderRq.getQuantity();
-		price = updateOrderRq.getPrice();
-	}
-
-	public long getValue() {
-		return (long) price * quantity;
-	}
-
-	public int getTotalQuantity() {
-		return quantity;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
deleted file mode 100644
index c2f3371..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import java.util.LinkedList;
-import java.util.List;
-import java.util.ListIterator;
-import lombok.Getter;
-
-@Getter
-public class OrderBook {
-
-	private final LinkedList<Order> buyQueue;
-	private final LinkedList<Order> sellQueue;
-
-	public OrderBook() {
-		buyQueue = new LinkedList<>();
-		sellQueue = new LinkedList<>();
-	}
-
-	public void enqueue(Order order) {
-		List<Order> queue = getQueue(order.getSide());
-		ListIterator<Order> it = queue.listIterator();
-		while (it.hasNext()) {
-			if (order.queuesBefore(it.next())) {
-				it.previous();
-				break;
-			}
-		}
-		order.queue();
-		it.add(order);
-	}
-
-	private LinkedList<Order> getQueue(Side side) {
-		return side == Side.BUY ? buyQueue : sellQueue;
-	}
-
-	public Order findByOrderId(Side side, long orderId) {
-		var queue = getQueue(side);
-		for (Order order : queue) {
-			if (order.getOrderId() == orderId) return order;
-		}
-		return null;
-	}
-
-	public boolean removeByOrderId(Side side, long orderId) {
-		var queue = getQueue(side);
-		var it = queue.listIterator();
-		while (it.hasNext()) {
-			if (it.next().getOrderId() == orderId) {
-				it.remove();
-				return true;
-			}
-		}
-		return false;
-	}
-
-	public Order matchWithFirst(Order newOrder) {
-		var queue = getQueue(newOrder.getSide().opposite());
-		if (
-			newOrder.matches(queue.getFirst())
-		) return queue.getFirst(); else return null;
-	}
-
-	public void putBack(Order order) {
-		LinkedList<Order> queue = getQueue(order.getSide());
-		order.queue();
-		queue.addFirst(order);
-	}
-
-	public void restoreSellOrder(Order sellOrder) {
-		removeByOrderId(Side.SELL, sellOrder.getOrderId());
-		putBack(sellOrder);
-	}
-
-	public boolean hasOrderOfType(Side side) {
-		return !getQueue(side).isEmpty();
-	}
-
-	public void removeFirst(Side side) {
-		getQueue(side).removeFirst();
-	}
-
-	public int totalSellQuantityByShareholder(Shareholder shareholder) {
-		return sellQueue
-			.stream()
-			.filter(order -> order.getShareholder().equals(shareholder))
-			.mapToInt(Order::getTotalQuantity)
-			.sum();
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
deleted file mode 100644
index 92cbc3e..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-public enum OrderStatus {
-	NEW,
-	QUEUED,
-	SNAPSHOT,
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
deleted file mode 100644
index 3b415a6..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
+++ /dev/null
@@ -1,153 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import ir.ramtung.tinyme.domain.service.Matcher;
-import ir.ramtung.tinyme.messaging.Message;
-import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
-import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import java.util.List;
-import lombok.Builder;
-import lombok.Getter;
-
-@Getter
-@Builder
-public class Security {
-
-	private String isin;
-
-	@Builder.Default
-	private int tickSize = 1;
-
-	@Builder.Default
-	private int lotSize = 1;
-
-	@Builder.Default
-	private OrderBook orderBook = new OrderBook();
-
-	public MatchResult newOrder(
-		EnterOrderRq enterOrderRq,
-		Broker broker,
-		Shareholder shareholder,
-		Matcher matcher
-	) {
-		if (
-			enterOrderRq.getSide() == Side.SELL &&
-			!shareholder.hasEnoughPositionsOn(
-				this,
-				orderBook.totalSellQuantityByShareholder(shareholder) +
-				enterOrderRq.getQuantity()
-			)
-		) return MatchResult.notEnoughPositions();
-		Order order;
-		if (enterOrderRq.getPeakSize() == 0) order =
-			new Order(
-				enterOrderRq.getOrderId(),
-				this,
-				enterOrderRq.getSide(),
-				enterOrderRq.getQuantity(),
-				enterOrderRq.getPrice(),
-				broker,
-				shareholder,
-				enterOrderRq.getEntryTime()
-			); else order =
-			new IcebergOrder(
-				enterOrderRq.getOrderId(),
-				this,
-				enterOrderRq.getSide(),
-				enterOrderRq.getQuantity(),
-				enterOrderRq.getPrice(),
-				broker,
-				shareholder,
-				enterOrderRq.getEntryTime(),
-				enterOrderRq.getPeakSize()
-			);
-
-		return matcher.execute(order);
-	}
-
-	public void deleteOrder(DeleteOrderRq deleteOrderRq)
-		throws InvalidRequestException {
-		Order order = orderBook.findByOrderId(
-			deleteOrderRq.getSide(),
-			deleteOrderRq.getOrderId()
-		);
-		if (order == null) throw new InvalidRequestException(
-			Message.ORDER_ID_NOT_FOUND
-		);
-		if (order.getSide() == Side.BUY) order
-			.getBroker()
-			.increaseCreditBy(order.getValue());
-		orderBook.removeByOrderId(
-			deleteOrderRq.getSide(),
-			deleteOrderRq.getOrderId()
-		);
-	}
-
-	public MatchResult updateOrder(EnterOrderRq updateOrderRq, Matcher matcher)
-		throws InvalidRequestException {
-		Order order = orderBook.findByOrderId(
-			updateOrderRq.getSide(),
-			updateOrderRq.getOrderId()
-		);
-		if (order == null) throw new InvalidRequestException(
-			Message.ORDER_ID_NOT_FOUND
-		);
-		if (
-			(order instanceof IcebergOrder) && updateOrderRq.getPeakSize() == 0
-		) throw new InvalidRequestException(Message.INVALID_PEAK_SIZE);
-		if (
-			!(order instanceof IcebergOrder) && updateOrderRq.getPeakSize() != 0
-		) throw new InvalidRequestException(
-			Message.CANNOT_SPECIFY_PEAK_SIZE_FOR_A_NON_ICEBERG_ORDER
-		);
-
-		if (
-			updateOrderRq.getSide() == Side.SELL &&
-			!order
-				.getShareholder()
-				.hasEnoughPositionsOn(
-					this,
-					orderBook.totalSellQuantityByShareholder(
-						order.getShareholder()
-					) -
-					order.getQuantity() +
-					updateOrderRq.getQuantity()
-				)
-		) return MatchResult.notEnoughPositions();
-
-		boolean losesPriority =
-			order.isQuantityIncreased(updateOrderRq.getQuantity()) ||
-			updateOrderRq.getPrice() != order.getPrice() ||
-			(
-				(order instanceof IcebergOrder icebergOrder) &&
-				(icebergOrder.getPeakSize() < updateOrderRq.getPeakSize())
-			);
-
-		if (updateOrderRq.getSide() == Side.BUY) {
-			order.getBroker().increaseCreditBy(order.getValue());
-		}
-		Order originalOrder = order.snapshot();
-		order.updateFromRequest(updateOrderRq);
-		if (!losesPriority) {
-			if (updateOrderRq.getSide() == Side.BUY) {
-				order.getBroker().decreaseCreditBy(order.getValue());
-			}
-			return MatchResult.executed(null, List.of());
-		}
-
-		orderBook.removeByOrderId(
-			updateOrderRq.getSide(),
-			updateOrderRq.getOrderId()
-		);
-		MatchResult matchResult = matcher.execute(order);
-		if (matchResult.outcome() != MatchingOutcome.EXECUTED) {
-			orderBook.enqueue(originalOrder);
-			if (updateOrderRq.getSide() == Side.BUY) {
-				originalOrder
-					.getBroker()
-					.decreaseCreditBy(originalOrder.getValue());
-			}
-		}
-		return matchResult;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java
deleted file mode 100644
index 7ed5dcd..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import java.util.HashMap;
-import java.util.Map;
-import lombok.Builder;
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-import lombok.ToString;
-
-@ToString
-@EqualsAndHashCode(onlyExplicitlyIncluded = true)
-@Builder
-public class Shareholder {
-
-	@Getter
-	@EqualsAndHashCode.Include
-	private long shareholderId;
-
-	@Getter
-	private String name;
-
-	@Getter
-	@Builder.Default
-	private Map<Security, Integer> positions = new HashMap<>();
-
-	public void incPosition(Security security, int amount) {
-		assert amount >= 0;
-		positions.put(security, positions.getOrDefault(security, 0) + amount);
-	}
-
-	public void decPosition(Security security, int amount) {
-		assert amount >= 0;
-		int currentPositions = positions.getOrDefault(security, 0);
-		if (currentPositions < amount) throw new IllegalArgumentException(
-			"Amount to be decreased is greater than shareholder's current position"
-		);
-		positions.put(security, currentPositions - amount);
-	}
-
-	public boolean hasEnoughPositionsOn(Security security, int position) {
-		return positions.getOrDefault(security, 0) >= position;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java
deleted file mode 100644
index d9312c8..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-public enum Side {
-	BUY {
-		@Override
-		public Side opposite() {
-			return SELL;
-		}
-	},
-	SELL {
-		@Override
-		public Side opposite() {
-			return BUY;
-		}
-	};
-
-	public static Side parse(String s) {
-		if (s.equals("BUY")) return BUY; else if (
-			s.equals("SELL")
-		) return SELL; else throw new IllegalArgumentException(
-			"Invalid value for order side"
-		);
-	}
-
-	public abstract Side opposite();
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
deleted file mode 100644
index 5c58ec8..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package ir.ramtung.tinyme.domain.entity;
-
-import lombok.Builder;
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-import lombok.ToString;
-
-@Builder
-@Getter
-@EqualsAndHashCode
-@ToString
-public class Trade {
-
-	Security security;
-	private int price;
-	private int quantity;
-	private Order buy;
-	private Order sell;
-
-	public Trade(
-		Security security,
-		int price,
-		int quantity,
-		Order order1,
-		Order order2
-	) {
-		this.security = security;
-		this.price = price;
-		this.quantity = quantity;
-		Order snapshot1 = order1.snapshot();
-		Order snapshot2 = order2.snapshot();
-		if (order1.getSide() == Side.BUY) {
-			this.buy = snapshot1;
-			this.sell = snapshot2;
-		} else {
-			this.buy = snapshot2;
-			this.sell = snapshot1;
-		}
-	}
-
-	public long getTradedValue() {
-		return (long) price * quantity;
-	}
-
-	public void increaseSellersCredit() {
-		sell.getBroker().increaseCreditBy(getTradedValue());
-	}
-
-	public void decreaseBuyersCredit() {
-		buy.getBroker().decreaseCreditBy(getTradedValue());
-	}
-
-	public boolean buyerHasEnoughCredit() {
-		return buy.getBroker().hasEnoughCredit(getTradedValue());
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
deleted file mode 100644
index 6dfaff8..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
+++ /dev/null
@@ -1,118 +0,0 @@
-package ir.ramtung.tinyme.domain.service;
-
-import ir.ramtung.tinyme.domain.entity.*;
-import java.util.LinkedList;
-import java.util.ListIterator;
-import org.springframework.stereotype.Service;
-
-@Service
-public class Matcher {
-
-	public MatchResult match(Order newOrder) {
-		OrderBook orderBook = newOrder.getSecurity().getOrderBook();
-		LinkedList<Trade> trades = new LinkedList<>();
-
-		while (
-			orderBook.hasOrderOfType(newOrder.getSide().opposite()) &&
-			newOrder.getQuantity() > 0
-		) {
-			Order matchingOrder = orderBook.matchWithFirst(newOrder);
-			if (matchingOrder == null) break;
-
-			Trade trade = new Trade(
-				newOrder.getSecurity(),
-				matchingOrder.getPrice(),
-				Math.min(newOrder.getQuantity(), matchingOrder.getQuantity()),
-				newOrder,
-				matchingOrder
-			);
-			if (newOrder.getSide() == Side.BUY) {
-				if (
-					trade.buyerHasEnoughCredit()
-				) trade.decreaseBuyersCredit(); else {
-					rollbackTrades(newOrder, trades);
-					return MatchResult.notEnoughCredit();
-				}
-			}
-			trade.increaseSellersCredit();
-			trades.add(trade);
-
-			if (newOrder.getQuantity() >= matchingOrder.getQuantity()) {
-				newOrder.decreaseQuantity(matchingOrder.getQuantity());
-				orderBook.removeFirst(matchingOrder.getSide());
-				if (matchingOrder instanceof IcebergOrder icebergOrder) {
-					icebergOrder.decreaseQuantity(matchingOrder.getQuantity());
-					icebergOrder.replenish();
-					if (icebergOrder.getQuantity() > 0) orderBook.enqueue(
-						icebergOrder
-					);
-				}
-			} else {
-				matchingOrder.decreaseQuantity(newOrder.getQuantity());
-				newOrder.makeQuantityZero();
-			}
-		}
-		return MatchResult.executed(newOrder, trades);
-	}
-
-	private void rollbackTrades(Order newOrder, LinkedList<Trade> trades) {
-		assert newOrder.getSide() == Side.BUY;
-		newOrder
-			.getBroker()
-			.increaseCreditBy(
-				trades.stream().mapToLong(Trade::getTradedValue).sum()
-			);
-		trades.forEach(trade ->
-			trade.getSell().getBroker().decreaseCreditBy(trade.getTradedValue())
-		);
-
-		ListIterator<Trade> it = trades.listIterator(trades.size());
-		while (it.hasPrevious()) {
-			newOrder
-				.getSecurity()
-				.getOrderBook()
-				.restoreSellOrder(it.previous().getSell());
-		}
-	}
-
-	public MatchResult execute(Order order) {
-		MatchResult result = match(order);
-		if (
-			result.outcome() == MatchingOutcome.NOT_ENOUGH_CREDIT
-		) return result;
-
-		if (result.remainder().getQuantity() > 0) {
-			if (order.getSide() == Side.BUY) {
-				if (
-					!order
-						.getBroker()
-						.hasEnoughCredit(
-							(long) order.getPrice() * order.getQuantity()
-						)
-				) {
-					rollbackTrades(order, result.trades());
-					return MatchResult.notEnoughCredit();
-				}
-				order
-					.getBroker()
-					.decreaseCreditBy(
-						(long) order.getPrice() * order.getQuantity()
-					);
-			}
-			order.getSecurity().getOrderBook().enqueue(result.remainder());
-		}
-		if (!result.trades().isEmpty()) {
-			for (Trade trade : result.trades()) {
-				trade
-					.getBuy()
-					.getShareholder()
-					.incPosition(trade.getSecurity(), trade.getQuantity());
-				trade
-					.getSell()
-					.getShareholder()
-					.decPosition(trade.getSecurity(), trade.getQuantity());
-			}
-		}
-		return result;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java b/TinyME/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
deleted file mode 100644
index f31009b..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
+++ /dev/null
@@ -1,203 +0,0 @@
-package ir.ramtung.tinyme.domain.service;
-
-import ir.ramtung.tinyme.domain.entity.*;
-import ir.ramtung.tinyme.messaging.EventPublisher;
-import ir.ramtung.tinyme.messaging.Message;
-import ir.ramtung.tinyme.messaging.TradeDTO;
-import ir.ramtung.tinyme.messaging.event.*;
-import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
-import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import ir.ramtung.tinyme.messaging.request.OrderEntryType;
-import ir.ramtung.tinyme.repository.BrokerRepository;
-import ir.ramtung.tinyme.repository.SecurityRepository;
-import ir.ramtung.tinyme.repository.ShareholderRepository;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.stream.Collectors;
-import org.springframework.stereotype.Service;
-
-@Service
-public class OrderHandler {
-
-	SecurityRepository securityRepository;
-	BrokerRepository brokerRepository;
-	ShareholderRepository shareholderRepository;
-	EventPublisher eventPublisher;
-	Matcher matcher;
-
-	public OrderHandler(
-		SecurityRepository securityRepository,
-		BrokerRepository brokerRepository,
-		ShareholderRepository shareholderRepository,
-		EventPublisher eventPublisher,
-		Matcher matcher
-	) {
-		this.securityRepository = securityRepository;
-		this.brokerRepository = brokerRepository;
-		this.shareholderRepository = shareholderRepository;
-		this.eventPublisher = eventPublisher;
-		this.matcher = matcher;
-	}
-
-	public void handleEnterOrder(EnterOrderRq enterOrderRq) {
-		try {
-			validateEnterOrderRq(enterOrderRq);
-
-			Security security = securityRepository.findSecurityByIsin(
-				enterOrderRq.getSecurityIsin()
-			);
-			Broker broker = brokerRepository.findBrokerById(
-				enterOrderRq.getBrokerId()
-			);
-			Shareholder shareholder = shareholderRepository.findShareholderById(
-				enterOrderRq.getShareholderId()
-			);
-
-			MatchResult matchResult;
-			if (
-				enterOrderRq.getRequestType() == OrderEntryType.NEW_ORDER
-			) matchResult =
-				security.newOrder(
-					enterOrderRq,
-					broker,
-					shareholder,
-					matcher
-				); else matchResult =
-				security.updateOrder(enterOrderRq, matcher);
-
-			if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_CREDIT) {
-				eventPublisher.publish(
-					new OrderRejectedEvent(
-						enterOrderRq.getRequestId(),
-						enterOrderRq.getOrderId(),
-						List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)
-					)
-				);
-				return;
-			}
-			if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_POSITIONS) {
-				eventPublisher.publish(
-					new OrderRejectedEvent(
-						enterOrderRq.getRequestId(),
-						enterOrderRq.getOrderId(),
-						List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)
-					)
-				);
-				return;
-			}
-			if (
-				enterOrderRq.getRequestType() == OrderEntryType.NEW_ORDER
-			) eventPublisher.publish(
-				new OrderAcceptedEvent(
-					enterOrderRq.getRequestId(),
-					enterOrderRq.getOrderId()
-				)
-			); else eventPublisher.publish(
-				new OrderUpdatedEvent(
-					enterOrderRq.getRequestId(),
-					enterOrderRq.getOrderId()
-				)
-			);
-			if (!matchResult.trades().isEmpty()) {
-				eventPublisher.publish(
-					new OrderExecutedEvent(
-						enterOrderRq.getRequestId(),
-						enterOrderRq.getOrderId(),
-						matchResult
-							.trades()
-							.stream()
-							.map(TradeDTO::new)
-							.collect(Collectors.toList())
-					)
-				);
-			}
-		} catch (InvalidRequestException ex) {
-			eventPublisher.publish(
-				new OrderRejectedEvent(
-					enterOrderRq.getRequestId(),
-					enterOrderRq.getOrderId(),
-					ex.getReasons()
-				)
-			);
-		}
-	}
-
-	public void handleDeleteOrder(DeleteOrderRq deleteOrderRq) {
-		try {
-			validateDeleteOrderRq(deleteOrderRq);
-			Security security = securityRepository.findSecurityByIsin(
-				deleteOrderRq.getSecurityIsin()
-			);
-			security.deleteOrder(deleteOrderRq);
-			eventPublisher.publish(
-				new OrderDeletedEvent(
-					deleteOrderRq.getRequestId(),
-					deleteOrderRq.getOrderId()
-				)
-			);
-		} catch (InvalidRequestException ex) {
-			eventPublisher.publish(
-				new OrderRejectedEvent(
-					deleteOrderRq.getRequestId(),
-					deleteOrderRq.getOrderId(),
-					ex.getReasons()
-				)
-			);
-		}
-	}
-
-	private void validateEnterOrderRq(EnterOrderRq enterOrderRq)
-		throws InvalidRequestException {
-		List<String> errors = new LinkedList<>();
-		if (enterOrderRq.getOrderId() <= 0) errors.add(
-			Message.INVALID_ORDER_ID
-		);
-		if (enterOrderRq.getQuantity() <= 0) errors.add(
-			Message.ORDER_QUANTITY_NOT_POSITIVE
-		);
-		if (enterOrderRq.getPrice() <= 0) errors.add(
-			Message.ORDER_PRICE_NOT_POSITIVE
-		);
-		Security security = securityRepository.findSecurityByIsin(
-			enterOrderRq.getSecurityIsin()
-		);
-		if (security == null) errors.add(Message.UNKNOWN_SECURITY_ISIN); else {
-			if (
-				enterOrderRq.getQuantity() % security.getLotSize() != 0
-			) errors.add(Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE);
-			if (
-				enterOrderRq.getPrice() % security.getTickSize() != 0
-			) errors.add(Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE);
-		}
-		if (
-			brokerRepository.findBrokerById(enterOrderRq.getBrokerId()) == null
-		) errors.add(Message.UNKNOWN_BROKER_ID);
-		if (
-			shareholderRepository.findShareholderById(
-				enterOrderRq.getShareholderId()
-			) ==
-			null
-		) errors.add(Message.UNKNOWN_SHAREHOLDER_ID);
-		if (
-			enterOrderRq.getPeakSize() < 0 ||
-			enterOrderRq.getPeakSize() >= enterOrderRq.getQuantity()
-		) errors.add(Message.INVALID_PEAK_SIZE);
-		if (!errors.isEmpty()) throw new InvalidRequestException(errors);
-	}
-
-	private void validateDeleteOrderRq(DeleteOrderRq deleteOrderRq)
-		throws InvalidRequestException {
-		List<String> errors = new LinkedList<>();
-		if (deleteOrderRq.getOrderId() <= 0) errors.add(
-			Message.INVALID_ORDER_ID
-		);
-		if (
-			securityRepository.findSecurityByIsin(
-				deleteOrderRq.getSecurityIsin()
-			) ==
-			null
-		) errors.add(Message.UNKNOWN_SECURITY_ISIN);
-		if (!errors.isEmpty()) throw new InvalidRequestException(errors);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java
deleted file mode 100644
index 838c29d..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-import ir.ramtung.tinyme.messaging.event.Event;
-import java.util.logging.Logger;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.jms.core.JmsTemplate;
-import org.springframework.stereotype.Component;
-
-@Component
-public class EventPublisher {
-
-	private final Logger log = Logger.getLogger(this.getClass().getName());
-	private final JmsTemplate jmsTemplate;
-
-	@Value("${responseQueue}")
-	private String responseQueue;
-
-	public EventPublisher(JmsTemplate jmsTemplate) {
-		this.jmsTemplate = jmsTemplate;
-	}
-
-	public void publish(Event event) {
-		log.info("Published : " + event);
-		jmsTemplate.convertAndSend(responseQueue, event);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/Message.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/Message.java
deleted file mode 100644
index 602499e..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/Message.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-public class Message {
-
-	public static final String INVALID_ORDER_ID = "Invalid order ID";
-	public static final String ORDER_QUANTITY_NOT_POSITIVE =
-		"Order quantity is not-positive";
-	public static final String ORDER_PRICE_NOT_POSITIVE =
-		"Order price is not-positive";
-	public static final String UNKNOWN_SECURITY_ISIN = "Unknown security ISIN";
-	public static final String ORDER_ID_NOT_FOUND =
-		"Order ID not found in the order book";
-	public static final String INVALID_PEAK_SIZE =
-		"Iceberg order peak size is out of range";
-	public static final String CANNOT_SPECIFY_PEAK_SIZE_FOR_A_NON_ICEBERG_ORDER =
-		"Cannot specify peak size for a non-iceberg order";
-	public static final String UNKNOWN_BROKER_ID = "Unknown broker ID";
-	public static final String UNKNOWN_SHAREHOLDER_ID =
-		"Unknown shareholder ID";
-	public static final String BUYER_HAS_NOT_ENOUGH_CREDIT =
-		"Buyer has not enough credit";
-	public static final String QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE =
-		"Quantity is not a multiple of security lot size";
-	public static final String PRICE_NOT_MULTIPLE_OF_TICK_SIZE =
-		"Price is not a multiple of security tick size";
-	public static final String SELLER_HAS_NOT_ENOUGH_POSITIONS =
-		"Seller has not enough positions";
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java
deleted file mode 100644
index 3177171..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.jms.support.converter.MappingJackson2MessageConverter;
-import org.springframework.jms.support.converter.MessageConverter;
-import org.springframework.jms.support.converter.MessageType;
-
-@Configuration
-public class MessagingConfig {
-
-	@Bean
-	public MessageConverter jacksonJmsMessageConverter() {
-		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();
-		converter.setTargetType(MessageType.TEXT);
-		converter.setTypeIdPropertyName("_type");
-		return converter;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
deleted file mode 100644
index 10db973..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-import ir.ramtung.tinyme.domain.service.OrderHandler;
-import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import java.util.logging.Logger;
-import org.springframework.jms.annotation.JmsListener;
-import org.springframework.stereotype.Component;
-
-@Component
-public class RequestDispatcher {
-
-	private final Logger log = Logger.getLogger(this.getClass().getName());
-	private final OrderHandler orderHandler;
-
-	public RequestDispatcher(OrderHandler orderHandler) {
-		this.orderHandler = orderHandler;
-	}
-
-	@JmsListener(
-		destination = "${requestQueue}",
-		selector = "_type='ir.ramtung.tinyme.messaging.request.EnterOrderRq'"
-	)
-	public void receiveEnterOrderRq(EnterOrderRq enterOrderRq) {
-		log.info("Received message: " + enterOrderRq);
-		orderHandler.handleEnterOrder(enterOrderRq);
-	}
-
-	@JmsListener(
-		destination = "${requestQueue}",
-		selector = "_type='ir.ramtung.tinyme.messaging.request.DeleteOrderRq'"
-	)
-	public void receiveDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
-		log.info("Received message: " + deleteOrderRq);
-		orderHandler.handleDeleteOrder(deleteOrderRq);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java
deleted file mode 100644
index fa02ecf..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-import ir.ramtung.tinyme.domain.entity.Trade;
-
-public record TradeDTO(
-	String securityIsin,
-	int price,
-	int quantity,
-	long buyOrderId,
-	long sellOrderId
-) {
-	public TradeDTO(Trade trade) {
-		this(
-			trade.getSecurity().getIsin(),
-			trade.getPrice(),
-			trade.getQuantity(),
-			trade.getBuy().getOrderId(),
-			trade.getSell().getOrderId()
-		);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java
deleted file mode 100644
index b204ac2..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package ir.ramtung.tinyme.messaging.event;
-
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
-import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
-import java.time.LocalDateTime;
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-
-@EqualsAndHashCode
-public abstract class Event {
-
-	@Getter
-	@JsonSerialize(using = LocalDateTimeSerializer.class)
-	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
-	private final LocalDateTime time;
-
-	public Event() {
-		time = LocalDateTime.now();
-	}
-
-	public Event(LocalDateTime time) {
-		this.time = time;
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java
deleted file mode 100644
index c73bdcf..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package ir.ramtung.tinyme.messaging.event;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.EqualsAndHashCode;
-import lombok.NoArgsConstructor;
-
-@Data
-@EqualsAndHashCode(callSuper = false)
-@AllArgsConstructor
-@NoArgsConstructor
-public class OrderDeletedEvent extends Event {
-
-	private long requestId;
-	private long orderId;
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java
deleted file mode 100644
index 17d7e19..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package ir.ramtung.tinyme.messaging.event;
-
-import ir.ramtung.tinyme.messaging.TradeDTO;
-import java.util.List;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.EqualsAndHashCode;
-import lombok.NoArgsConstructor;
-
-@Data
-@EqualsAndHashCode(callSuper = false)
-@AllArgsConstructor
-@NoArgsConstructor
-public class OrderExecutedEvent extends Event {
-
-	private long requestId;
-	private long orderId;
-	private List<TradeDTO> trades;
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java
deleted file mode 100644
index f14de3e..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package ir.ramtung.tinyme.messaging.event;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.EqualsAndHashCode;
-import lombok.NoArgsConstructor;
-
-@Data
-@EqualsAndHashCode(callSuper = false)
-@AllArgsConstructor
-@NoArgsConstructor
-public class OrderUpdatedEvent extends Event {
-
-	private long requestId;
-	private long orderId;
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java
deleted file mode 100644
index 26f84dc..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package ir.ramtung.tinyme.messaging.exception;
-
-import java.util.List;
-import lombok.Getter;
-import lombok.ToString;
-
-@ToString
-public class InvalidRequestException extends Exception {
-
-	@Getter
-	private final List<String> reasons;
-
-	public InvalidRequestException(List<String> reasons) {
-		this.reasons = reasons;
-	}
-
-	public InvalidRequestException(String reason) {
-		this.reasons = List.of(reason);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
deleted file mode 100644
index ed1af83..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package ir.ramtung.tinyme.messaging.request;
-
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
-import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
-import ir.ramtung.tinyme.domain.entity.Side;
-import java.time.LocalDateTime;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
-public class DeleteOrderRq {
-
-	private long requestId;
-	private String securityIsin;
-	private Side side;
-	private long orderId;
-
-	@JsonSerialize(using = LocalDateTimeSerializer.class)
-	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
-	private LocalDateTime entryTime;
-
-	public DeleteOrderRq(
-		long requestId,
-		String securityIsin,
-		Side side,
-		long orderId
-	) {
-		this.requestId = requestId;
-		this.securityIsin = securityIsin;
-		this.side = side;
-		this.orderId = orderId;
-		this.entryTime = LocalDateTime.now();
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
deleted file mode 100644
index 306bfbd..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package ir.ramtung.tinyme.messaging.request;
-
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
-import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
-import ir.ramtung.tinyme.domain.entity.Side;
-import java.time.LocalDateTime;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@NoArgsConstructor
-public class EnterOrderRq {
-
-	private OrderEntryType requestType;
-	private long requestId;
-	private String securityIsin;
-	private long orderId;
-
-	@JsonSerialize(using = LocalDateTimeSerializer.class)
-	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
-	private LocalDateTime entryTime;
-
-	private Side side;
-	private int quantity;
-	private int price;
-	private long brokerId;
-	private long shareholderId;
-	private int peakSize;
-
-	private EnterOrderRq(
-		OrderEntryType orderEntryType,
-		long requestId,
-		String securityIsin,
-		long orderId,
-		LocalDateTime entryTime,
-		Side side,
-		int quantity,
-		int price,
-		long brokerId,
-		long shareholderId,
-		int peakSize
-	) {
-		this.requestType = orderEntryType;
-		this.requestId = requestId;
-		this.securityIsin = securityIsin;
-		this.orderId = orderId;
-		this.entryTime = entryTime;
-		this.side = side;
-		this.quantity = quantity;
-		this.price = price;
-		this.brokerId = brokerId;
-		this.shareholderId = shareholderId;
-		this.peakSize = peakSize;
-	}
-
-	public static EnterOrderRq createNewOrderRq(
-		long requestId,
-		String securityIsin,
-		long orderId,
-		LocalDateTime entryTime,
-		Side side,
-		int quantity,
-		int price,
-		long brokerId,
-		long shareholderId,
-		int peakSize
-	) {
-		return new EnterOrderRq(
-			OrderEntryType.NEW_ORDER,
-			requestId,
-			securityIsin,
-			orderId,
-			entryTime,
-			side,
-			quantity,
-			price,
-			brokerId,
-			shareholderId,
-			peakSize
-		);
-	}
-
-	public static EnterOrderRq createUpdateOrderRq(
-		long requestId,
-		String securityIsin,
-		long orderId,
-		LocalDateTime entryTime,
-		Side side,
-		int quantity,
-		int price,
-		long brokerId,
-		long shareholderId,
-		int peakSize
-	) {
-		return new EnterOrderRq(
-			OrderEntryType.UPDATE_ORDER,
-			requestId,
-			securityIsin,
-			orderId,
-			entryTime,
-			side,
-			quantity,
-			price,
-			brokerId,
-			shareholderId,
-			peakSize
-		);
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java b/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java
deleted file mode 100644
index e81ab4b..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package ir.ramtung.tinyme.messaging.request;
-
-public enum OrderEntryType {
-	NEW_ORDER,
-	UPDATE_ORDER,
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java b/TinyME/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java
deleted file mode 100644
index 0a35dc7..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package ir.ramtung.tinyme.repository;
-
-import ir.ramtung.tinyme.domain.entity.Broker;
-import java.util.HashMap;
-import org.springframework.stereotype.Component;
-
-@Component
-public class BrokerRepository {
-
-	private final HashMap<Long, Broker> brokerById = new HashMap<>();
-
-	public Broker findBrokerById(long brokerId) {
-		return brokerById.get(brokerId);
-	}
-
-	public void addBroker(Broker broker) {
-		brokerById.put(broker.getBrokerId(), broker);
-	}
-
-	public void clear() {
-		brokerById.clear();
-	}
-
-	Iterable<? extends Broker> allBrokers() {
-		return brokerById.values();
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java b/TinyME/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
deleted file mode 100644
index e7df109..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
+++ /dev/null
@@ -1,344 +0,0 @@
-package ir.ramtung.tinyme.repository;
-
-import com.opencsv.CSVReader;
-import com.opencsv.CSVReaderBuilder;
-import ir.ramtung.tinyme.domain.entity.*;
-import jakarta.annotation.PostConstruct;
-import jakarta.annotation.PreDestroy;
-import java.io.FileReader;
-import java.io.FileWriter;
-import java.io.PrintWriter;
-import java.io.Reader;
-import java.time.LocalDateTime;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.StringJoiner;
-import java.util.logging.Logger;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Profile;
-import org.springframework.core.io.Resource;
-import org.springframework.stereotype.Component;
-
-@Component
-@Profile("!test")
-public class DataLoader {
-
-	private final Logger log = Logger.getLogger(this.getClass().getName());
-	private final BrokerRepository brokerRepository;
-	private final ShareholderRepository shareholderRepository;
-	private final SecurityRepository securityRepository;
-
-	public DataLoader(
-		BrokerRepository brokerRepository,
-		ShareholderRepository shareholderRepository,
-		SecurityRepository securityRepository
-	) {
-		this.brokerRepository = brokerRepository;
-		this.shareholderRepository = shareholderRepository;
-		this.securityRepository = securityRepository;
-	}
-
-	@Value("classpath:persistence/broker.csv")
-	private Resource brokerCsvResource;
-
-	@Value("classpath:persistence/shareholder.csv")
-	private Resource shareholderCsvResource;
-
-	@Value("classpath:persistence/security.csv")
-	private Resource securityCsvResource;
-
-	@Value("classpath:persistence/position.csv")
-	private Resource positionCsvResource;
-
-	@Value("classpath:persistence/orderbook.csv")
-	private Resource orderBookCsvResource;
-
-	@PostConstruct
-	public void loadAll() throws Exception {
-		loadBrokers();
-		loadShareholders();
-		loadSecurities();
-		loadPositions();
-		loadOrderBook();
-	}
-
-	@PreDestroy
-	public void saveAll() throws Exception {
-		System.out.print("Saving persistent data ...");
-		saveBrokers();
-		saveShareholdersAndPositions();
-		saveSecuritiesAndOrderBooks();
-		System.out.println(", done!");
-	}
-
-	private void loadBrokers() throws Exception {
-		brokerRepository.clear();
-		try (Reader reader = new FileReader(brokerCsvResource.getFile())) {
-			try (
-				CSVReader csvReader = new CSVReaderBuilder(reader)
-					.withSkipLines(1)
-					.build()
-			) {
-				String[] line;
-				while ((line = csvReader.readNext()) != null) {
-					brokerRepository.addBroker(
-						Broker
-							.builder()
-							.brokerId(Long.parseLong(line[0]))
-							.name(line[1])
-							.credit(Long.parseLong(line[0]))
-							.build()
-					);
-				}
-			}
-		}
-		log.info("Brokers loaded");
-	}
-
-	private void loadShareholders() throws Exception {
-		shareholderRepository.clear();
-		try (Reader reader = new FileReader(shareholderCsvResource.getFile())) {
-			try (
-				CSVReader csvReader = new CSVReaderBuilder(reader)
-					.withSkipLines(1)
-					.build()
-			) {
-				String[] line;
-				while ((line = csvReader.readNext()) != null) {
-					shareholderRepository.addShareholder(
-						Shareholder
-							.builder()
-							.shareholderId(Long.parseLong(line[0]))
-							.name(line[1])
-							.build()
-					);
-				}
-			}
-		}
-		log.info("Shareholders loaded");
-	}
-
-	private void loadSecurities() throws Exception {
-		securityRepository.clear();
-		try (Reader reader = new FileReader(securityCsvResource.getFile())) {
-			try (
-				CSVReader csvReader = new CSVReaderBuilder(reader)
-					.withSkipLines(1)
-					.build()
-			) {
-				String[] line;
-				while ((line = csvReader.readNext()) != null) {
-					securityRepository.addSecurity(
-						Security
-							.builder()
-							.isin(line[0])
-							.tickSize(Integer.parseInt(line[1]))
-							.lotSize(Integer.parseInt(line[2]))
-							.build()
-					);
-				}
-			}
-		}
-		log.info("Securities loaded");
-	}
-
-	private void loadPositions() throws Exception {
-		try (Reader reader = new FileReader(positionCsvResource.getFile())) {
-			try (
-				CSVReader csvReader = new CSVReaderBuilder(reader)
-					.withSkipLines(1)
-					.build()
-			) {
-				String[] line;
-				while ((line = csvReader.readNext()) != null) {
-					Shareholder shareholder = shareholderRepository.findShareholderById(
-						Long.parseLong(line[0])
-					);
-					Security security = securityRepository.findSecurityByIsin(
-						line[1]
-					);
-					shareholder.incPosition(
-						security,
-						Integer.parseInt(line[2])
-					);
-				}
-			}
-		}
-		log.info("Positions loaded");
-	}
-
-	private void loadOrderBook() throws Exception {
-		LinkedList<Order> orders = new LinkedList<>();
-		try (Reader reader = new FileReader(orderBookCsvResource.getFile())) {
-			try (
-				CSVReader csvReader = new CSVReaderBuilder(reader)
-					.withSkipLines(1)
-					.build()
-			) {
-				String[] line;
-				while ((line = csvReader.readNext()) != null) {
-					Security security = securityRepository.findSecurityByIsin(
-						line[1]
-					);
-					Broker broker = brokerRepository.findBrokerById(
-						Long.parseLong(line[5])
-					);
-					Shareholder shareholder = shareholderRepository.findShareholderById(
-						Long.parseLong(line[6])
-					);
-					//orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
-					//0       1    2    3        4     5        6             7         8        9
-					int peakSize = Integer.parseInt(line[8]);
-					Order order;
-					if (peakSize == 0) {
-						order =
-							new Order(
-								Long.parseLong(line[0]),
-								security,
-								Side.parse(line[2]),
-								Integer.parseInt(line[3]),
-								Integer.parseInt(line[4]),
-								broker,
-								shareholder,
-								LocalDateTime.parse(line[7]),
-								OrderStatus.QUEUED
-							);
-					} else {
-						order =
-							new IcebergOrder(
-								Long.parseLong(line[0]),
-								security,
-								Side.parse(line[2]),
-								Integer.parseInt(line[3]),
-								Integer.parseInt(line[4]),
-								broker,
-								shareholder,
-								LocalDateTime.parse(line[7]),
-								Integer.parseInt(line[8]),
-								Integer.parseInt(line[9]),
-								OrderStatus.QUEUED
-							);
-					}
-					orders.addFirst(order);
-				}
-			}
-		}
-		Iterator<Order> it = orders.descendingIterator();
-		while (it.hasNext()) {
-			Order order = it.next();
-			order.getSecurity().getOrderBook().enqueue(order);
-		}
-		log.info("Order Book loaded");
-	}
-
-	private void saveBrokers() throws Exception {
-		try (
-			PrintWriter writer = new PrintWriter(
-				new FileWriter(brokerCsvResource.getFile())
-			)
-		) {
-			writer.println("brokerId,name,credit");
-			for (Broker broker : brokerRepository.allBrokers()) {
-				StringJoiner joiner = new StringJoiner(",");
-				joiner
-					.add(String.valueOf(broker.getBrokerId()))
-					.add(broker.getName())
-					.add(String.valueOf(broker.getCredit()));
-				writer.println(joiner);
-			}
-		}
-		log.info("Brokers saved");
-	}
-
-	private void saveShareholdersAndPositions() throws Exception {
-		try (
-			PrintWriter shareholderWriter = new PrintWriter(
-				new FileWriter(shareholderCsvResource.getFile())
-			)
-		) {
-			shareholderWriter.println("shareholderId,name");
-			try (
-				PrintWriter positionWriter = new PrintWriter(
-					new FileWriter(positionCsvResource.getFile())
-				)
-			) {
-				positionWriter.println("shareholderId,isin,positions");
-				for (Shareholder shareholder : shareholderRepository.allShareholders()) {
-					StringJoiner joiner = new StringJoiner(",");
-					joiner
-						.add(String.valueOf(shareholder.getShareholderId()))
-						.add(shareholder.getName());
-					shareholderWriter.println(joiner);
-					for (var entry : shareholder.getPositions().entrySet()) {
-						StringJoiner posJoiner = new StringJoiner(",");
-						posJoiner
-							.add(String.valueOf(shareholder.getShareholderId()))
-							.add(entry.getKey().getIsin())
-							.add(String.valueOf(entry.getValue()));
-						positionWriter.println(posJoiner);
-					}
-				}
-			}
-		}
-		log.info("Shareholders and Positions saved");
-	}
-
-	private void saveSecuritiesAndOrderBooks() throws Exception {
-		try (
-			PrintWriter securityWriter = new PrintWriter(
-				new FileWriter(securityCsvResource.getFile())
-			)
-		) {
-			securityWriter.println("isin,tickSize,lotSize");
-			try (
-				PrintWriter orderBookWriter = new PrintWriter(
-					new FileWriter(orderBookCsvResource.getFile())
-				)
-			) {
-				orderBookWriter.println(
-					"orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,status,peakSize,displayedQuantity"
-				);
-				for (Security security : securityRepository.allSecurities()) {
-					StringJoiner joiner = new StringJoiner(",");
-					joiner
-						.add(security.getIsin())
-						.add(String.valueOf(security.getTickSize()))
-						.add(String.valueOf(security.getLotSize()));
-					securityWriter.println(joiner);
-					for (Order order : security
-						.getOrderBook()
-						.getBuyQueue()) orderBookWriter.println(
-						getCSVString(order)
-					);
-					for (Order order : security
-						.getOrderBook()
-						.getSellQueue()) orderBookWriter.println(
-						getCSVString(order)
-					);
-				}
-			}
-		}
-		log.info("Securities and OrderBook saved");
-	}
-
-	private static String getCSVString(Order order) {
-		StringJoiner orderJoiner = new StringJoiner(",");
-		orderJoiner
-			.add(String.valueOf(order.getOrderId()))
-			.add(order.getSecurity().getIsin())
-			.add(order.getSide().toString())
-			.add(String.valueOf(order.getQuantity()))
-			.add(String.valueOf(order.getPrice()))
-			.add(String.valueOf(order.getBroker().getBrokerId()))
-			.add(String.valueOf(order.getShareholder().getShareholderId()))
-			.add(order.getEntryTime().toString());
-		if (order instanceof IcebergOrder icebergOrder) {
-			orderJoiner
-				.add(String.valueOf(icebergOrder.getPeakSize()))
-				.add(String.valueOf(icebergOrder.getDisplayedQuantity()));
-		} else {
-			orderJoiner.add("0").add("0");
-		}
-		return orderJoiner.toString();
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java b/TinyME/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java
deleted file mode 100644
index 1b8d3fa..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package ir.ramtung.tinyme.repository;
-
-import ir.ramtung.tinyme.domain.entity.Security;
-import java.util.HashMap;
-import org.springframework.stereotype.Component;
-
-@Component
-public class SecurityRepository {
-
-	private final HashMap<String, Security> securityByIsin = new HashMap<>();
-
-	public Security findSecurityByIsin(String isin) {
-		return securityByIsin.get(isin);
-	}
-
-	public void addSecurity(Security security) {
-		securityByIsin.put(security.getIsin(), security);
-	}
-
-	public void clear() {
-		securityByIsin.clear();
-	}
-
-	Iterable<? extends Security> allSecurities() {
-		return securityByIsin.values();
-	}
-}
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java b/TinyME/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java
deleted file mode 100644
index cadc242..0000000
--- a/TinyME/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package ir.ramtung.tinyme.repository;
-
-import ir.ramtung.tinyme.domain.entity.Shareholder;
-import java.util.HashMap;
-import org.springframework.stereotype.Component;
-
-@Component
-public class ShareholderRepository {
-
-	private final HashMap<Long, Shareholder> shareholderById = new HashMap<>();
-
-	public Shareholder findShareholderById(long shareholderId) {
-		return shareholderById.get(shareholderId);
-	}
-
-	public void addShareholder(Shareholder shareholder) {
-		shareholderById.put(shareholder.getShareholderId(), shareholder);
-	}
-
-	public void clear() {
-		shareholderById.clear();
-	}
-
-	Iterable<? extends Shareholder> allShareholders() {
-		return shareholderById.values();
-	}
-}
diff --git a/TinyME/src/main/resources/application.properties b/TinyME/src/main/resources/application.properties
deleted file mode 100644
index 19ca007..0000000
--- a/TinyME/src/main/resources/application.properties
+++ /dev/null
@@ -1,4 +0,0 @@
-spring.artemis.mode=native
-spring.artemis.broker-url=tcp://127.0.0.1:61616
-requestQueue=RQ
-responseQueue=RS
\ No newline at end of file
diff --git a/TinyME/src/main/resources/persistence/broker.csv b/TinyME/src/main/resources/persistence/broker.csv
deleted file mode 100644
index 774fc4f..0000000
--- a/TinyME/src/main/resources/persistence/broker.csv
+++ /dev/null
@@ -1,4 +0,0 @@
-brokerId,name,credit
-1,broker1,100000000
-2,broker2,100000000
-3,broker3,100000000
diff --git a/TinyME/src/main/resources/persistence/orderbook.csv b/TinyME/src/main/resources/persistence/orderbook.csv
deleted file mode 100644
index 1d2d8e7..0000000
--- a/TinyME/src/main/resources/persistence/orderbook.csv
+++ /dev/null
@@ -1,16 +0,0 @@
-orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
-1,SEC1,BUY,304,15700,1,1,2024-02-23T10:59:54.970,0,0
-2,SEC1,BUY,43,15500,1,2,2024-02-23T10:59:55.970,0,0
-3,SEC1,BUY,445,15450,1,2,2024-02-23T10:59:56.970,0,0
-4,SEC1,BUY,526,15450,1,2,2024-02-23T10:59:57.970,0,0
-5,SEC1,BUY,1000,15400,1,1,2024-02-23T10:59:58.970,0,0
-6,SEC1,SELL,350,15800,2,3,2024-02-23T10:59:54.980,0,0
-7,SEC1,SELL,285,15810,2,3,2024-02-23T10:59:55.980,0,0
-8,SEC1,SELL,800,15810,3,4,2024-02-23T10:59:56.980,0,0
-9,SEC1,SELL,340,15820,3,4,2024-02-23T10:59:57.980,0,0
-10,SEC1,SELL,65,15820,2,3,2024-02-23T10:59:58.980,0,0
-11,SEC2,BUY,304,15700,1,1,2024-02-23T11:09:10.012,0,0
-12,SEC2,BUY,43,15500,2,1,2024-02-23T10:00:10.012,0,0
-13,SEC2,BUY,445,15450,2,2,2024-02-23T11:06:10.012,100,100
-14,SEC2,BUY,526,15450,3,3,2024-02-23T11:06:11.012,0,0
-15,SEC2,BUY,1000,15400,3,1,2024-02-23T11:06:12.012,0,0
diff --git a/TinyME/src/main/resources/persistence/position.csv b/TinyME/src/main/resources/persistence/position.csv
deleted file mode 100644
index 87bb219..0000000
--- a/TinyME/src/main/resources/persistence/position.csv
+++ /dev/null
@@ -1,7 +0,0 @@
-shareholderId,isin,positions
-1,SEC1,1000
-1,SEC2,800
-2,SEC1,100
-3,SEC1,1000
-3,SEC2,1200
-3,SEC3,2000
diff --git a/TinyME/src/main/resources/persistence/security.csv b/TinyME/src/main/resources/persistence/security.csv
deleted file mode 100644
index 1eaa4af..0000000
--- a/TinyME/src/main/resources/persistence/security.csv
+++ /dev/null
@@ -1,4 +0,0 @@
-isin,tickSize,lotSize
-SEC1,1,1
-SEC2,1,1
-SEC3,1,1
diff --git a/TinyME/src/main/resources/persistence/shareholder.csv b/TinyME/src/main/resources/persistence/shareholder.csv
deleted file mode 100644
index 1d51a21..0000000
--- a/TinyME/src/main/resources/persistence/shareholder.csv
+++ /dev/null
@@ -1,5 +0,0 @@
-shareholderId,name
-1,shareholder1
-2,shareholder2
-3,shareholder3
-4,shareholder4
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java b/TinyME/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java
deleted file mode 100644
index c77ebf6..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package ir.ramtung.tinyme.config;
-
-import ir.ramtung.tinyme.messaging.EventPublisher;
-import ir.ramtung.tinyme.messaging.RequestDispatcher;
-import ir.ramtung.tinyme.repository.DataLoader;
-import org.springframework.boot.test.context.TestConfiguration;
-import org.springframework.boot.test.mock.mockito.MockBean;
-
-@TestConfiguration
-public class MockedJMSTestConfig {
-
-	@MockBean
-	EventPublisher eventPublisher;
-
-	@MockBean
-	RequestDispatcher requestDispatcher;
-}
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java b/TinyME/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
deleted file mode 100644
index 4ab3cef..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
+++ /dev/null
@@ -1,337 +0,0 @@
-package ir.ramtung.tinyme.domain;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-import ir.ramtung.tinyme.config.MockedJMSTestConfig;
-import ir.ramtung.tinyme.domain.entity.*;
-import ir.ramtung.tinyme.domain.service.Matcher;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.annotation.Import;
-import org.springframework.test.annotation.DirtiesContext;
-
-@SpringBootTest
-@Import(MockedJMSTestConfig.class)
-@DirtiesContext
-public class MatcherTest {
-
-	private Security security;
-	private Broker broker;
-	private Shareholder shareholder;
-	private OrderBook orderBook;
-	private List<Order> orders;
-
-	@Autowired
-	private Matcher matcher;
-
-	@BeforeEach
-	void setupOrderBook() {
-		security = Security.builder().build();
-		broker = Broker.builder().credit(100_000_000L).build();
-		shareholder = Shareholder.builder().build();
-		shareholder.incPosition(security, 100_000);
-		orderBook = security.getOrderBook();
-		orders =
-			Arrays.asList(
-				new Order(
-					1,
-					security,
-					Side.BUY,
-					304,
-					15700,
-					broker,
-					shareholder
-				),
-				new Order(
-					2,
-					security,
-					Side.BUY,
-					43,
-					15500,
-					broker,
-					shareholder
-				),
-				new Order(
-					3,
-					security,
-					Side.BUY,
-					445,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					4,
-					security,
-					Side.BUY,
-					526,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					5,
-					security,
-					Side.BUY,
-					1000,
-					15400,
-					broker,
-					shareholder
-				),
-				new Order(
-					6,
-					security,
-					Side.SELL,
-					350,
-					15800,
-					broker,
-					shareholder
-				),
-				new Order(
-					7,
-					security,
-					Side.SELL,
-					285,
-					15810,
-					broker,
-					shareholder
-				),
-				new Order(
-					8,
-					security,
-					Side.SELL,
-					800,
-					15810,
-					broker,
-					shareholder
-				),
-				new Order(
-					9,
-					security,
-					Side.SELL,
-					340,
-					15820,
-					broker,
-					shareholder
-				),
-				new Order(
-					10,
-					security,
-					Side.SELL,
-					65,
-					15820,
-					broker,
-					shareholder
-				)
-			);
-		orders.forEach(order -> orderBook.enqueue(order));
-	}
-
-	@Test
-	void new_sell_order_matches_completely_with_part_of_the_first_buy() {
-		Order order = new Order(
-			11,
-			security,
-			Side.SELL,
-			100,
-			15600,
-			broker,
-			shareholder
-		);
-		Trade trade = new Trade(security, 15700, 100, orders.get(0), order);
-		MatchResult result = matcher.match(order);
-		assertThat(result.remainder().getQuantity()).isEqualTo(0);
-		assertThat(result.trades()).containsExactly(trade);
-		assertThat(
-			security.getOrderBook().getBuyQueue().getFirst().getQuantity()
-		)
-			.isEqualTo(204);
-	}
-
-	@Test
-	void new_sell_order_matches_partially_with_the_first_buy() {
-		Order order = new Order(
-			11,
-			security,
-			Side.SELL,
-			500,
-			15600,
-			broker,
-			shareholder
-		);
-		Trade trade = new Trade(security, 15700, 304, orders.get(0), order);
-		MatchResult result = matcher.match(order);
-		assertThat(result.remainder().getQuantity()).isEqualTo(196);
-		assertThat(result.trades()).containsExactly(trade);
-		assertThat(
-			security.getOrderBook().getBuyQueue().getFirst().getOrderId()
-		)
-			.isEqualTo(2);
-	}
-
-	@Test
-	void new_sell_order_matches_partially_with_two_buys() {
-		Order order = new Order(
-			11,
-			security,
-			Side.SELL,
-			500,
-			15500,
-			broker,
-			shareholder
-		);
-		Trade trade1 = new Trade(security, 15700, 304, orders.get(0), order);
-		Trade trade2 = new Trade(
-			security,
-			15500,
-			43,
-			orders.get(1),
-			order.snapshotWithQuantity(196)
-		);
-		MatchResult result = matcher.match(order);
-		assertThat(result.remainder().getQuantity()).isEqualTo(153);
-		assertThat(result.trades()).containsExactly(trade1, trade2);
-		assertThat(
-			security.getOrderBook().getBuyQueue().getFirst().getOrderId()
-		)
-			.isEqualTo(3);
-	}
-
-	@Test
-	void new_buy_order_matches_partially_with_the_entire_sell_queue() {
-		Order order = new Order(
-			11,
-			security,
-			Side.BUY,
-			2000,
-			15820,
-			broker,
-			shareholder
-		);
-		List<Trade> trades = new ArrayList<>();
-		int totalTraded = 0;
-		for (Order o : orders.subList(5, 10)) {
-			trades.add(
-				new Trade(
-					security,
-					o.getPrice(),
-					o.getQuantity(),
-					order.snapshotWithQuantity(
-						order.getQuantity() - totalTraded
-					),
-					o
-				)
-			);
-			totalTraded += o.getQuantity();
-		}
-
-		MatchResult result = matcher.match(order);
-		assertThat(result.remainder().getQuantity()).isEqualTo(160);
-		assertThat(result.trades()).isEqualTo(trades);
-		assertThat(security.getOrderBook().getSellQueue()).isEmpty();
-	}
-
-	@Test
-	void new_buy_order_does_not_match() {
-		Order order = new Order(
-			11,
-			security,
-			Side.BUY,
-			2000,
-			15500,
-			broker,
-			shareholder
-		);
-		MatchResult result = matcher.match(order);
-		assertThat(result.remainder()).isEqualTo(order);
-		assertThat(result.trades()).isEmpty();
-	}
-
-	@Test
-	void iceberg_order_in_queue_matched_completely_after_three_rounds() {
-		security = Security.builder().build();
-		broker = Broker.builder().build();
-		orderBook = security.getOrderBook();
-		orders =
-			Arrays.asList(
-				new IcebergOrder(
-					1,
-					security,
-					Side.BUY,
-					450,
-					15450,
-					broker,
-					shareholder,
-					200
-				),
-				new Order(
-					2,
-					security,
-					Side.BUY,
-					70,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					3,
-					security,
-					Side.BUY,
-					1000,
-					15400,
-					broker,
-					shareholder
-				)
-			);
-		orders.forEach(order -> orderBook.enqueue(order));
-		Order order = new Order(
-			4,
-			security,
-			Side.SELL,
-			600,
-			15450,
-			broker,
-			shareholder
-		);
-		List<Trade> trades = List.of(
-			new Trade(
-				security,
-				15450,
-				200,
-				orders.get(0).snapshotWithQuantity(200),
-				order.snapshotWithQuantity(600)
-			),
-			new Trade(
-				security,
-				15450,
-				70,
-				orders.get(1).snapshotWithQuantity(70),
-				order.snapshotWithQuantity(400)
-			),
-			new Trade(
-				security,
-				15450,
-				200,
-				orders.get(0).snapshotWithQuantity(200),
-				order.snapshotWithQuantity(330)
-			),
-			new Trade(
-				security,
-				15450,
-				50,
-				orders.get(0).snapshotWithQuantity(50),
-				order.snapshotWithQuantity(130)
-			)
-		);
-
-		MatchResult result = matcher.match(order);
-
-		assertThat(result.remainder().getQuantity()).isEqualTo(80);
-		assertThat(result.trades()).isEqualTo(trades);
-	}
-}
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java b/TinyME/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java
deleted file mode 100644
index 2f33f37..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java
+++ /dev/null
@@ -1,162 +0,0 @@
-package ir.ramtung.tinyme.domain;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-import ir.ramtung.tinyme.domain.entity.*;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-class OrderBookTest {
-
-	private Security security;
-	private List<Order> orders;
-
-	@BeforeEach
-	void setupOrderBook() {
-		security = Security.builder().build();
-		Broker broker = Broker.builder().build();
-		Shareholder shareholder = Shareholder.builder().build();
-		shareholder.incPosition(security, 100_000);
-		orders =
-			Arrays.asList(
-				new Order(
-					1,
-					security,
-					Side.BUY,
-					304,
-					15700,
-					broker,
-					shareholder
-				),
-				new Order(
-					2,
-					security,
-					Side.BUY,
-					43,
-					15500,
-					broker,
-					shareholder
-				),
-				new Order(
-					3,
-					security,
-					Side.BUY,
-					445,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					4,
-					security,
-					Side.BUY,
-					526,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					5,
-					security,
-					Side.BUY,
-					1000,
-					15400,
-					broker,
-					shareholder
-				),
-				new Order(
-					6,
-					security,
-					Side.SELL,
-					350,
-					15800,
-					broker,
-					shareholder
-				),
-				new Order(
-					7,
-					security,
-					Side.SELL,
-					285,
-					15810,
-					broker,
-					shareholder
-				),
-				new Order(
-					8,
-					security,
-					Side.SELL,
-					800,
-					15810,
-					broker,
-					shareholder
-				),
-				new Order(
-					9,
-					security,
-					Side.SELL,
-					340,
-					15820,
-					broker,
-					shareholder
-				),
-				new Order(
-					10,
-					security,
-					Side.SELL,
-					65,
-					15820,
-					broker,
-					shareholder
-				)
-			);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-	}
-
-	@Test
-	void finds_the_first_order_by_id() {
-		assertThat(security.getOrderBook().findByOrderId(Side.BUY, 1))
-			.isEqualTo(orders.get(0));
-	}
-
-	@Test
-	void fails_to_find_the_first_order_by_id_in_the_wrong_queue() {
-		assertThat(security.getOrderBook().findByOrderId(Side.SELL, 1))
-			.isNull();
-	}
-
-	@Test
-	void finds_some_order_in_the_middle_by_id() {
-		assertThat(security.getOrderBook().findByOrderId(Side.BUY, 3))
-			.isEqualTo(orders.get(2));
-	}
-
-	@Test
-	void finds_the_last_order_by_id() {
-		assertThat(security.getOrderBook().findByOrderId(Side.SELL, 10))
-			.isEqualTo(orders.get(9));
-	}
-
-	@Test
-	void removes_the_first_order_by_id() {
-		OrderBook orderBook = security.getOrderBook();
-		orderBook.removeByOrderId(Side.BUY, 1);
-		assertThat(orderBook.getBuyQueue()).isEqualTo(orders.subList(1, 5));
-	}
-
-	@Test
-	void fails_to_remove_the_first_order_by_id_in_the_wrong_queue() {
-		OrderBook orderBook = security.getOrderBook();
-		orderBook.removeByOrderId(Side.SELL, 1);
-		assertThat(orderBook.getBuyQueue()).isEqualTo(orders.subList(0, 5));
-	}
-
-	@Test
-	void removes_the_last_order_by_id() {
-		OrderBook orderBook = security.getOrderBook();
-		orderBook.removeByOrderId(Side.SELL, 10);
-		assertThat(orderBook.getSellQueue()).isEqualTo(orders.subList(5, 9));
-	}
-}
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java b/TinyME/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
deleted file mode 100644
index c7b086b..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
+++ /dev/null
@@ -1,737 +0,0 @@
-package ir.ramtung.tinyme.domain;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.*;
-
-import ir.ramtung.tinyme.config.MockedJMSTestConfig;
-import ir.ramtung.tinyme.domain.entity.*;
-import ir.ramtung.tinyme.domain.service.Matcher;
-import ir.ramtung.tinyme.domain.service.OrderHandler;
-import ir.ramtung.tinyme.messaging.EventPublisher;
-import ir.ramtung.tinyme.messaging.Message;
-import ir.ramtung.tinyme.messaging.TradeDTO;
-import ir.ramtung.tinyme.messaging.event.OrderAcceptedEvent;
-import ir.ramtung.tinyme.messaging.event.OrderExecutedEvent;
-import ir.ramtung.tinyme.messaging.event.OrderRejectedEvent;
-import ir.ramtung.tinyme.messaging.event.OrderUpdatedEvent;
-import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import ir.ramtung.tinyme.repository.BrokerRepository;
-import ir.ramtung.tinyme.repository.SecurityRepository;
-import ir.ramtung.tinyme.repository.ShareholderRepository;
-import java.time.LocalDateTime;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.mockito.ArgumentCaptor;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.annotation.Import;
-import org.springframework.test.annotation.DirtiesContext;
-
-@SpringBootTest
-@Import(MockedJMSTestConfig.class)
-@DirtiesContext
-public class OrderHandlerTest {
-
-	@Autowired
-	OrderHandler orderHandler;
-
-	@Autowired
-	EventPublisher eventPublisher;
-
-	@Autowired
-	SecurityRepository securityRepository;
-
-	@Autowired
-	BrokerRepository brokerRepository;
-
-	@Autowired
-	ShareholderRepository shareholderRepository;
-
-	private Security security;
-	private Shareholder shareholder;
-	private Broker broker1;
-	private Broker broker2;
-	private Broker broker3;
-
-	@BeforeEach
-	void setup() {
-		securityRepository.clear();
-		brokerRepository.clear();
-		shareholderRepository.clear();
-
-		security = Security.builder().isin("ABC").build();
-		securityRepository.addSecurity(security);
-
-		shareholder = Shareholder.builder().build();
-		shareholder.incPosition(security, 100_000);
-		shareholderRepository.addShareholder(shareholder);
-
-		broker1 = Broker.builder().brokerId(1).build();
-		broker2 = Broker.builder().brokerId(2).build();
-		broker3 = Broker.builder().brokerId(2).build();
-		brokerRepository.addBroker(broker1);
-		brokerRepository.addBroker(broker2);
-		brokerRepository.addBroker(broker3);
-	}
-
-	@Test
-	void new_order_matched_completely_with_one_trade() {
-		Order matchingBuyOrder = new Order(
-			100,
-			security,
-			Side.BUY,
-			1000,
-			15500,
-			broker1,
-			shareholder
-		);
-		Order incomingSellOrder = new Order(
-			200,
-			security,
-			Side.SELL,
-			300,
-			15450,
-			broker2,
-			shareholder
-		);
-		security.getOrderBook().enqueue(matchingBuyOrder);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.SELL,
-				300,
-				15450,
-				2,
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-
-		Trade trade = new Trade(
-			security,
-			matchingBuyOrder.getPrice(),
-			incomingSellOrder.getQuantity(),
-			matchingBuyOrder,
-			incomingSellOrder
-		);
-		verify(eventPublisher).publish((new OrderAcceptedEvent(1, 200)));
-		verify(eventPublisher)
-			.publish(
-				new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade)))
-			);
-	}
-
-	@Test
-	void new_order_queued_with_no_trade() {
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.SELL,
-				300,
-				15450,
-				2,
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
-	}
-
-	@Test
-	void new_order_matched_partially_with_two_trades() {
-		Order matchingBuyOrder1 = new Order(
-			100,
-			security,
-			Side.BUY,
-			300,
-			15500,
-			broker1,
-			shareholder
-		);
-		Order matchingBuyOrder2 = new Order(
-			110,
-			security,
-			Side.BUY,
-			300,
-			15500,
-			broker1,
-			shareholder
-		);
-		Order incomingSellOrder = new Order(
-			200,
-			security,
-			Side.SELL,
-			1000,
-			15450,
-			broker2,
-			shareholder
-		);
-		security.getOrderBook().enqueue(matchingBuyOrder1);
-		security.getOrderBook().enqueue(matchingBuyOrder2);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				incomingSellOrder.getSecurity().getIsin(),
-				incomingSellOrder.getOrderId(),
-				incomingSellOrder.getEntryTime(),
-				incomingSellOrder.getSide(),
-				incomingSellOrder.getTotalQuantity(),
-				incomingSellOrder.getPrice(),
-				incomingSellOrder.getBroker().getBrokerId(),
-				incomingSellOrder.getShareholder().getShareholderId(),
-				0
-			)
-		);
-
-		Trade trade1 = new Trade(
-			security,
-			matchingBuyOrder1.getPrice(),
-			matchingBuyOrder1.getQuantity(),
-			matchingBuyOrder1,
-			incomingSellOrder
-		);
-		Trade trade2 = new Trade(
-			security,
-			matchingBuyOrder2.getPrice(),
-			matchingBuyOrder2.getQuantity(),
-			matchingBuyOrder2,
-			incomingSellOrder.snapshotWithQuantity(700)
-		);
-		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
-		verify(eventPublisher)
-			.publish(
-				new OrderExecutedEvent(
-					1,
-					200,
-					List.of(new TradeDTO(trade1), new TradeDTO(trade2))
-				)
-			);
-	}
-
-	@Test
-	void iceberg_order_behaves_normally_before_being_queued() {
-		Order matchingBuyOrder = new Order(
-			100,
-			security,
-			Side.BUY,
-			1000,
-			15500,
-			broker1,
-			shareholder
-		);
-		Order incomingSellOrder = new IcebergOrder(
-			200,
-			security,
-			Side.SELL,
-			300,
-			15450,
-			broker2,
-			shareholder,
-			100
-		);
-		security.getOrderBook().enqueue(matchingBuyOrder);
-		Trade trade = new Trade(
-			security,
-			matchingBuyOrder.getPrice(),
-			incomingSellOrder.getQuantity(),
-			matchingBuyOrder,
-			incomingSellOrder
-		);
-
-		EventPublisher mockEventPublisher = mock(
-			EventPublisher.class,
-			withSettings().verboseLogging()
-		);
-		OrderHandler myOrderHandler = new OrderHandler(
-			securityRepository,
-			brokerRepository,
-			shareholderRepository,
-			mockEventPublisher,
-			new Matcher()
-		);
-		myOrderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				incomingSellOrder.getSecurity().getIsin(),
-				incomingSellOrder.getOrderId(),
-				incomingSellOrder.getEntryTime(),
-				incomingSellOrder.getSide(),
-				incomingSellOrder.getTotalQuantity(),
-				incomingSellOrder.getPrice(),
-				incomingSellOrder.getBroker().getBrokerId(),
-				incomingSellOrder.getShareholder().getShareholderId(),
-				100
-			)
-		);
-
-		verify(mockEventPublisher).publish(new OrderAcceptedEvent(1, 200));
-		verify(mockEventPublisher)
-			.publish(
-				new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade)))
-			);
-	}
-
-	@Test
-	void invalid_new_order_with_multiple_errors() {
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"XXX",
-				-1,
-				LocalDateTime.now(),
-				Side.SELL,
-				0,
-				0,
-				-1,
-				-1,
-				0
-			)
-		);
-		ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(
-			OrderRejectedEvent.class
-		);
-		verify(eventPublisher).publish(orderRejectedCaptor.capture());
-		OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-		assertThat(outputEvent.getOrderId()).isEqualTo(-1);
-		assertThat(outputEvent.getErrors())
-			.containsOnly(
-				Message.UNKNOWN_SECURITY_ISIN,
-				Message.INVALID_ORDER_ID,
-				Message.ORDER_PRICE_NOT_POSITIVE,
-				Message.ORDER_QUANTITY_NOT_POSITIVE,
-				Message.INVALID_PEAK_SIZE,
-				Message.UNKNOWN_BROKER_ID,
-				Message.UNKNOWN_SHAREHOLDER_ID
-			);
-	}
-
-	@Test
-	void invalid_new_order_with_tick_and_lot_size_errors() {
-		Security aSecurity = Security
-			.builder()
-			.isin("XXX")
-			.lotSize(10)
-			.tickSize(10)
-			.build();
-		securityRepository.addSecurity(aSecurity);
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"XXX",
-				1,
-				LocalDateTime.now(),
-				Side.SELL,
-				12,
-				1001,
-				1,
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-		ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(
-			OrderRejectedEvent.class
-		);
-		verify(eventPublisher).publish(orderRejectedCaptor.capture());
-		OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-		assertThat(outputEvent.getOrderId()).isEqualTo(1);
-		assertThat(outputEvent.getErrors())
-			.containsOnly(
-				Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE,
-				Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE
-			);
-	}
-
-	@Test
-	void update_order_causing_no_trades() {
-		Order queuedOrder = new Order(
-			200,
-			security,
-			Side.SELL,
-			500,
-			15450,
-			broker1,
-			shareholder
-		);
-		security.getOrderBook().enqueue(queuedOrder);
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createUpdateOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.SELL,
-				1000,
-				15450,
-				1,
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-		verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
-	}
-
-	@Test
-	void handle_valid_update_with_trades() {
-		Order matchingOrder = new Order(
-			1,
-			security,
-			Side.BUY,
-			500,
-			15450,
-			broker1,
-			shareholder
-		);
-		Order beforeUpdate = new Order(
-			200,
-			security,
-			Side.SELL,
-			1000,
-			15455,
-			broker2,
-			shareholder
-		);
-		Order afterUpdate = new Order(
-			200,
-			security,
-			Side.SELL,
-			500,
-			15450,
-			broker2,
-			shareholder
-		);
-		security.getOrderBook().enqueue(matchingOrder);
-		security.getOrderBook().enqueue(beforeUpdate);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createUpdateOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.SELL,
-				1000,
-				15450,
-				broker2.getBrokerId(),
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-
-		Trade trade = new Trade(
-			security,
-			15450,
-			500,
-			matchingOrder,
-			afterUpdate
-		);
-		verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
-		verify(eventPublisher)
-			.publish(
-				new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade)))
-			);
-	}
-
-	@Test
-	void invalid_update_with_order_id_not_found() {
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createUpdateOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.SELL,
-				1000,
-				15450,
-				1,
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-		verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, any()));
-	}
-
-	@Test
-	void invalid_update_with_multiple_errors() {
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createUpdateOrderRq(
-				1,
-				"XXX",
-				-1,
-				LocalDateTime.now(),
-				Side.SELL,
-				0,
-				0,
-				-1,
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-		ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(
-			OrderRejectedEvent.class
-		);
-		verify(eventPublisher).publish(orderRejectedCaptor.capture());
-		OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-		assertThat(outputEvent.getOrderId()).isEqualTo(-1);
-		assertThat(outputEvent.getErrors())
-			.containsOnly(
-				Message.UNKNOWN_SECURITY_ISIN,
-				Message.UNKNOWN_BROKER_ID,
-				Message.INVALID_ORDER_ID,
-				Message.ORDER_PRICE_NOT_POSITIVE,
-				Message.ORDER_QUANTITY_NOT_POSITIVE,
-				Message.INVALID_PEAK_SIZE
-			);
-	}
-
-	@Test
-	void invalid_delete_with_order_id_not_found() {
-		Broker buyBroker = Broker.builder().credit(1_000_000).build();
-		brokerRepository.addBroker(buyBroker);
-		Order queuedOrder = new Order(
-			200,
-			security,
-			Side.BUY,
-			1000,
-			15500,
-			buyBroker,
-			shareholder
-		);
-		security.getOrderBook().enqueue(queuedOrder);
-		orderHandler.handleDeleteOrder(
-			new DeleteOrderRq(1, "ABC", Side.SELL, 100)
-		);
-		verify(eventPublisher)
-			.publish(
-				new OrderRejectedEvent(
-					1,
-					100,
-					List.of(Message.ORDER_ID_NOT_FOUND)
-				)
-			);
-		assertThat(buyBroker.getCredit()).isEqualTo(1_000_000);
-	}
-
-	@Test
-	void invalid_delete_order_with_non_existing_security() {
-		Order queuedOrder = new Order(
-			200,
-			security,
-			Side.BUY,
-			1000,
-			15500,
-			broker1,
-			shareholder
-		);
-		security.getOrderBook().enqueue(queuedOrder);
-		orderHandler.handleDeleteOrder(
-			new DeleteOrderRq(1, "XXX", Side.SELL, 200)
-		);
-		verify(eventPublisher)
-			.publish(
-				new OrderRejectedEvent(
-					1,
-					200,
-					List.of(Message.UNKNOWN_SECURITY_ISIN)
-				)
-			);
-	}
-
-	@Test
-	void new_sell_order_without_enough_positions_is_rejected() {
-		List<Order> orders = Arrays.asList(
-			new Order(1, security, Side.BUY, 304, 570, broker3, shareholder),
-			new Order(2, security, Side.BUY, 430, 550, broker3, shareholder),
-			new Order(3, security, Side.BUY, 445, 545, broker3, shareholder),
-			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-		);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		shareholder.decPosition(security, 99_500);
-		broker3.increaseCreditBy(100_000_000);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.SELL,
-				400,
-				590,
-				broker1.getBrokerId(),
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-
-		verify(eventPublisher)
-			.publish(
-				new OrderRejectedEvent(
-					1,
-					200,
-					List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)
-				)
-			);
-	}
-
-	@Test
-	void update_sell_order_without_enough_positions_is_rejected() {
-		List<Order> orders = Arrays.asList(
-			new Order(1, security, Side.BUY, 304, 570, broker3, shareholder),
-			new Order(2, security, Side.BUY, 430, 550, broker3, shareholder),
-			new Order(3, security, Side.BUY, 445, 545, broker3, shareholder),
-			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-		);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		shareholder.decPosition(security, 99_500);
-		broker3.increaseCreditBy(100_000_000);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createUpdateOrderRq(
-				1,
-				"ABC",
-				6,
-				LocalDateTime.now(),
-				Side.SELL,
-				450,
-				580,
-				broker1.getBrokerId(),
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-
-		verify(eventPublisher)
-			.publish(
-				new OrderRejectedEvent(
-					1,
-					6,
-					List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)
-				)
-			);
-	}
-
-	@Test
-	void update_sell_order_with_enough_positions_is_executed() {
-		Shareholder shareholder1 = Shareholder.builder().build();
-		shareholder1.incPosition(security, 100_000);
-		shareholderRepository.addShareholder(shareholder1);
-		List<Order> orders = Arrays.asList(
-			new Order(1, security, Side.BUY, 304, 570, broker3, shareholder1),
-			new Order(2, security, Side.BUY, 430, 550, broker3, shareholder1),
-			new Order(3, security, Side.BUY, 445, 545, broker3, shareholder1),
-			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-		);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		shareholder.decPosition(security, 99_500);
-		broker3.increaseCreditBy(100_000_000);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createUpdateOrderRq(
-				1,
-				"ABC",
-				6,
-				LocalDateTime.now(),
-				Side.SELL,
-				250,
-				570,
-				broker1.getBrokerId(),
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-
-		verify(eventPublisher).publish(any(OrderExecutedEvent.class));
-		assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000 + 250))
-			.isTrue();
-		assertThat(shareholder.hasEnoughPositionsOn(security, 99_500 - 251))
-			.isFalse();
-	}
-
-	@Test
-	void new_buy_order_does_not_check_for_position() {
-		Shareholder shareholder1 = Shareholder.builder().build();
-		shareholder1.incPosition(security, 100_000);
-		shareholderRepository.addShareholder(shareholder1);
-		List<Order> orders = Arrays.asList(
-			new Order(1, security, Side.BUY, 304, 570, broker3, shareholder1),
-			new Order(2, security, Side.BUY, 430, 550, broker3, shareholder1),
-			new Order(3, security, Side.BUY, 445, 545, broker3, shareholder1),
-			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-		);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		shareholder.decPosition(security, 99_500);
-		broker3.increaseCreditBy(100_000_000);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"ABC",
-				200,
-				LocalDateTime.now(),
-				Side.BUY,
-				500,
-				570,
-				broker3.getBrokerId(),
-				shareholder.getShareholderId(),
-				0
-			)
-		);
-
-		verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
-		assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000))
-			.isTrue();
-		assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
-	}
-
-	@Test
-	void update_buy_order_does_not_check_for_position() {
-		Shareholder shareholder1 = Shareholder.builder().build();
-		shareholder1.incPosition(security, 100_000);
-		shareholderRepository.addShareholder(shareholder1);
-		List<Order> orders = Arrays.asList(
-			new Order(1, security, Side.BUY, 304, 570, broker3, shareholder1),
-			new Order(2, security, Side.BUY, 430, 550, broker3, shareholder1),
-			new Order(3, security, Side.BUY, 445, 545, broker3, shareholder1),
-			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-		);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		shareholder.decPosition(security, 99_500);
-		broker3.increaseCreditBy(100_000_000);
-
-		orderHandler.handleEnterOrder(
-			EnterOrderRq.createNewOrderRq(
-				1,
-				"ABC",
-				3,
-				LocalDateTime.now(),
-				Side.BUY,
-				500,
-				545,
-				broker3.getBrokerId(),
-				shareholder1.getShareholderId(),
-				0
-			)
-		);
-
-		verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
-		assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000))
-			.isTrue();
-		assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
-	}
-}
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java b/TinyME/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
deleted file mode 100644
index 90450bc..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
+++ /dev/null
@@ -1,463 +0,0 @@
-package ir.ramtung.tinyme.domain;
-
-import static org.assertj.core.api.Assertions.*;
-
-import ir.ramtung.tinyme.config.MockedJMSTestConfig;
-import ir.ramtung.tinyme.domain.entity.*;
-import ir.ramtung.tinyme.domain.service.Matcher;
-import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
-import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import java.time.LocalDateTime;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.annotation.Import;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
-@SpringBootTest
-@Import(MockedJMSTestConfig.class)
-class SecurityTest {
-
-	private Security security;
-	private Broker broker;
-	private Shareholder shareholder;
-	private List<Order> orders;
-
-	@Autowired
-	Matcher matcher;
-
-	@BeforeEach
-	void setupOrderBook() {
-		security = Security.builder().build();
-		broker = Broker.builder().brokerId(0).credit(1_000_000L).build();
-		shareholder = Shareholder.builder().shareholderId(0).build();
-		shareholder.incPosition(security, 100_000);
-		orders =
-			Arrays.asList(
-				new Order(
-					1,
-					security,
-					Side.BUY,
-					304,
-					15700,
-					broker,
-					shareholder
-				),
-				new Order(
-					2,
-					security,
-					Side.BUY,
-					43,
-					15500,
-					broker,
-					shareholder
-				),
-				new Order(
-					3,
-					security,
-					Side.BUY,
-					445,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					4,
-					security,
-					Side.BUY,
-					526,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					5,
-					security,
-					Side.BUY,
-					1000,
-					15400,
-					broker,
-					shareholder
-				),
-				new Order(
-					6,
-					security,
-					Side.SELL,
-					350,
-					15800,
-					broker,
-					shareholder
-				),
-				new Order(
-					7,
-					security,
-					Side.SELL,
-					285,
-					15810,
-					broker,
-					shareholder
-				),
-				new Order(
-					8,
-					security,
-					Side.SELL,
-					800,
-					15810,
-					broker,
-					shareholder
-				),
-				new Order(
-					9,
-					security,
-					Side.SELL,
-					340,
-					15820,
-					broker,
-					shareholder
-				),
-				new Order(
-					10,
-					security,
-					Side.SELL,
-					65,
-					15820,
-					broker,
-					shareholder
-				)
-			);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-	}
-
-	@Test
-	void reducing_quantity_does_not_change_priority() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			3,
-			LocalDateTime.now(),
-			Side.BUY,
-			440,
-			15450,
-			0,
-			0,
-			0
-		);
-		assertThatNoException()
-			.isThrownBy(() -> security.updateOrder(updateOrderRq, matcher));
-		assertThat(security.getOrderBook().getBuyQueue().get(2).getQuantity())
-			.isEqualTo(440);
-		assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId())
-			.isEqualTo(3);
-	}
-
-	@Test
-	void increasing_quantity_changes_priority() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			3,
-			LocalDateTime.now(),
-			Side.BUY,
-			450,
-			15450,
-			0,
-			0,
-			0
-		);
-		assertThatNoException()
-			.isThrownBy(() -> security.updateOrder(updateOrderRq, matcher));
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity())
-			.isEqualTo(450);
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId())
-			.isEqualTo(3);
-	}
-
-	@Test
-	void changing_price_changes_priority() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			1,
-			LocalDateTime.now(),
-			Side.BUY,
-			300,
-			15450,
-			0,
-			0,
-			0
-		);
-		assertThatNoException()
-			.isThrownBy(() -> security.updateOrder(updateOrderRq, matcher));
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity())
-			.isEqualTo(300);
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getPrice())
-			.isEqualTo(15450);
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId())
-			.isEqualTo(1);
-		assertThat(security.getOrderBook().getBuyQueue().get(0).getOrderId())
-			.isEqualTo(2);
-	}
-
-	@Test
-	void changing_price_causes_trades_to_happen() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			6,
-			LocalDateTime.now(),
-			Side.SELL,
-			350,
-			15700,
-			0,
-			0,
-			0
-		);
-		assertThatNoException()
-			.isThrownBy(() ->
-				assertThat(
-					security.updateOrder(updateOrderRq, matcher).trades()
-				)
-					.isNotEmpty()
-			);
-	}
-
-	@Test
-	void updating_non_existing_order_fails() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			6,
-			LocalDateTime.now(),
-			Side.BUY,
-			350,
-			15700,
-			0,
-			0,
-			0
-		);
-		assertThatExceptionOfType(InvalidRequestException.class)
-			.isThrownBy(() -> security.updateOrder(updateOrderRq, matcher));
-	}
-
-	@Test
-	void delete_order_works() {
-		DeleteOrderRq deleteOrderRq = new DeleteOrderRq(
-			1,
-			security.getIsin(),
-			Side.SELL,
-			6
-		);
-		assertThatNoException()
-			.isThrownBy(() -> security.deleteOrder(deleteOrderRq));
-		assertThat(security.getOrderBook().getBuyQueue())
-			.isEqualTo(orders.subList(0, 5));
-		assertThat(security.getOrderBook().getSellQueue())
-			.isEqualTo(orders.subList(6, 10));
-	}
-
-	@Test
-	void deleting_non_existing_order_fails() {
-		DeleteOrderRq deleteOrderRq = new DeleteOrderRq(
-			1,
-			security.getIsin(),
-			Side.SELL,
-			1
-		);
-		assertThatExceptionOfType(InvalidRequestException.class)
-			.isThrownBy(() -> security.deleteOrder(deleteOrderRq));
-	}
-
-	@Test
-	void increasing_iceberg_peak_size_changes_priority() {
-		security = Security.builder().build();
-		broker = Broker.builder().credit(1_000_000L).build();
-		orders =
-			Arrays.asList(
-				new Order(
-					1,
-					security,
-					Side.BUY,
-					304,
-					15700,
-					broker,
-					shareholder
-				),
-				new Order(
-					2,
-					security,
-					Side.BUY,
-					43,
-					15500,
-					broker,
-					shareholder
-				),
-				new IcebergOrder(
-					3,
-					security,
-					Side.BUY,
-					445,
-					15450,
-					broker,
-					shareholder,
-					100
-				),
-				new Order(
-					4,
-					security,
-					Side.BUY,
-					526,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					5,
-					security,
-					Side.BUY,
-					1000,
-					15400,
-					broker,
-					shareholder
-				)
-			);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			3,
-			LocalDateTime.now(),
-			Side.BUY,
-			445,
-			15450,
-			0,
-			0,
-			150
-		);
-		assertThatNoException()
-			.isThrownBy(() -> security.updateOrder(updateOrderRq, matcher));
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity())
-			.isEqualTo(150);
-		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId())
-			.isEqualTo(3);
-	}
-
-	@Test
-	void decreasing_iceberg_quantity_to_amount_larger_than_peak_size_does_not_changes_priority() {
-		security = Security.builder().build();
-		broker = Broker.builder().build();
-		orders =
-			Arrays.asList(
-				new Order(
-					1,
-					security,
-					Side.BUY,
-					304,
-					15700,
-					broker,
-					shareholder
-				),
-				new Order(
-					2,
-					security,
-					Side.BUY,
-					43,
-					15500,
-					broker,
-					shareholder
-				),
-				new IcebergOrder(
-					3,
-					security,
-					Side.BUY,
-					445,
-					15450,
-					broker,
-					shareholder,
-					100
-				),
-				new Order(
-					4,
-					security,
-					Side.BUY,
-					526,
-					15450,
-					broker,
-					shareholder
-				),
-				new Order(
-					5,
-					security,
-					Side.BUY,
-					1000,
-					15400,
-					broker,
-					shareholder
-				)
-			);
-		orders.forEach(order -> security.getOrderBook().enqueue(order));
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			3,
-			LocalDateTime.now(),
-			Side.BUY,
-			300,
-			15450,
-			0,
-			0,
-			100
-		);
-		assertThatNoException()
-			.isThrownBy(() -> security.updateOrder(updateOrderRq, matcher));
-		assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId())
-			.isEqualTo(3);
-	}
-
-	@Test
-	void order_update_with_different_side() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			6,
-			java.time.LocalDateTime.now(),
-			Side.BUY,
-			350,
-			15700,
-			0,
-			0,
-			0
-		);
-		matcher = new Matcher();
-		matcher.match(orders.get(5).snapshotWithQuantity(350));
-		assertThrows(
-			InvalidRequestException.class,
-			() -> security.updateOrder(updateOrderRq, matcher)
-		);
-	}
-
-	@Test
-	void order_update_with_non_existing_order() {
-		EnterOrderRq updateOrderRq = EnterOrderRq.createUpdateOrderRq(
-			1,
-			security.getIsin(),
-			11,
-			java.time.LocalDateTime.now(),
-			Side.SELL,
-			350,
-			15700,
-			0,
-			0,
-			0
-		);
-		matcher = new Matcher();
-		matcher.match(orders.get(5).snapshotWithQuantity(350));
-		assertThrows(
-			InvalidRequestException.class,
-			() -> security.updateOrder(updateOrderRq, matcher)
-		);
-	}
-}
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java b/TinyME/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java
deleted file mode 100644
index 691afa0..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-import ir.ramtung.tinyme.messaging.event.OrderExecutedEvent;
-import java.util.List;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.jms.annotation.EnableJms;
-import org.springframework.jms.core.JmsTemplate;
-import org.springframework.test.annotation.DirtiesContext;
-
-//@Disabled
-@SpringBootTest
-@EnableJms
-@DirtiesContext
-public class EventPublisherTest {
-
-	@Autowired
-	JmsTemplate jmsTemplate;
-
-	@Autowired
-	EventPublisher eventPublisher;
-
-	@Value("${responseQueue}")
-	private String responseQueue;
-
-	@BeforeEach
-	void emptyResponseQueue() {
-		long receiveTimeout = jmsTemplate.getReceiveTimeout();
-		jmsTemplate.setReceiveTimeout(1000);
-		//noinspection StatementWithEmptyBody
-		while (jmsTemplate.receive(responseQueue) != null);
-		jmsTemplate.setReceiveTimeout(receiveTimeout);
-	}
-
-	@Test
-	void response_channel_integration_works() {
-		OrderExecutedEvent orderExecutedEvent = new OrderExecutedEvent(
-			1,
-			0,
-			List.of()
-		);
-		eventPublisher.publish(orderExecutedEvent);
-
-		long receiveTimeout = jmsTemplate.getReceiveTimeout();
-		jmsTemplate.setReceiveTimeout(1000);
-		OrderExecutedEvent responseReceived = (OrderExecutedEvent) jmsTemplate.receiveAndConvert(
-			responseQueue
-		);
-		assertEquals(orderExecutedEvent, responseReceived);
-
-		jmsTemplate.setReceiveTimeout(receiveTimeout);
-	}
-}
diff --git a/TinyME/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java b/TinyME/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
deleted file mode 100644
index 1216147..0000000
--- a/TinyME/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package ir.ramtung.tinyme.messaging;
-
-import static org.mockito.Mockito.timeout;
-import static org.mockito.Mockito.verify;
-
-import ir.ramtung.tinyme.domain.entity.Side;
-import ir.ramtung.tinyme.domain.service.OrderHandler;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import java.time.LocalDateTime;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.jms.annotation.EnableJms;
-import org.springframework.jms.core.JmsTemplate;
-
-//@Disabled
-@SpringBootTest
-@EnableJms
-public class RequestDispatcherTest {
-
-	@Autowired
-	private JmsTemplate jmsTemplate;
-
-	@MockBean
-	private OrderHandler mockOrderHandler;
-
-	@Value("${requestQueue}")
-	private String requestQueue;
-
-	@BeforeEach
-	void emptyRequestQueue() {
-		long receiveTimeout = jmsTemplate.getReceiveTimeout();
-		jmsTemplate.setReceiveTimeout(1000);
-		//noinspection StatementWithEmptyBody
-		while (jmsTemplate.receive(requestQueue) != null);
-		jmsTemplate.setReceiveTimeout(receiveTimeout);
-	}
-
-	@Test
-	void request_channel_integration_works() {
-		EnterOrderRq rq = EnterOrderRq.createNewOrderRq(
-			1,
-			"ABC",
-			200,
-			LocalDateTime.now(),
-			Side.SELL,
-			300,
-			15450,
-			0,
-			0,
-			0
-		);
-		jmsTemplate.convertAndSend(requestQueue, rq);
-		verify(mockOrderHandler, timeout(1000)).handleEnterOrder(rq);
-	}
-}
diff --git a/TinyME/src/test/resources/application.properties b/TinyME/src/test/resources/application.properties
deleted file mode 100644
index 57f460c..0000000
--- a/TinyME/src/test/resources/application.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-spring.artemis.mode=native
-spring.artemis.broker-url=tcp://127.0.0.1:61616
-requestQueue=RQ
-responseQueue=RS
-spring.profiles.active=test
\ No newline at end of file
diff --git a/TinyME_v2.0/pom.xml b/TinyME_v2.0/pom.xml
index c49b70c..957446e 100644
--- a/TinyME_v2.0/pom.xml
+++ b/TinyME_v2.0/pom.xml
@@ -11,7 +11,7 @@
 	</parent>
 	<groupId>ir.ramtung</groupId>
 	<artifactId>tinyme</artifactId>
-	<version>2.3.1-SNAPSHOT</version>
+	<version>2.4.0-SNAPSHOT</version>
 	<name>TinyME</name>
 	<description>A Tiny Implementation of a Matching Engine</description>
 	<properties>
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
index 7e95067..4ad48a3 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
@@ -133,7 +133,7 @@ public class IcebergOrder extends Order {
 			Math.min(peakSize, quantity),
 			status
 		);
-		this.entryTimes = entryTimes;
+		this.entryTimes.addAll(entryTimes);
 	}
 
 	public IcebergOrder(
@@ -282,6 +282,7 @@ public class IcebergOrder extends Order {
 			status = OrderStatus.DONE;
 			security.deleteOrder(side, orderId);
 			if (quantity != 0) {
+				this.entryTimes.add(LocalDateTime.now());
 				security.getOrderBook().enqueue(this);
 			}
 		}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
index c74e33c..966afcc 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
@@ -29,7 +29,7 @@ public class Order {
 	protected int price;
 	protected Broker broker;
 	protected Shareholder shareholder;
-	protected List<LocalDateTime> entryTimes = new ArrayList<>();
+	protected final List<LocalDateTime> entryTimes = new ArrayList<>();
 
 	@Builder.Default
 	protected OrderStatus status = OrderStatus.NEW;
@@ -58,6 +58,28 @@ public class Order {
 		this.status = status;
 	}
 
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		OrderStatus status
+	) {
+		this.orderId = orderId;
+		this.security = security;
+		this.side = side;
+		this.quantity = quantity;
+		this.minimumExecutionQuantity = minimumExecutionQuantity;
+		this.price = price;
+		this.broker = broker;
+		this.shareholder = shareholder;
+		this.status = status;
+	}
+
 	public Order(
 		long orderId,
 		Security security,
@@ -76,7 +98,7 @@ public class Order {
 		this.quantity = quantity;
 		this.minimumExecutionQuantity = minimumExecutionQuantity;
 		this.price = price;
-		this.entryTimes = entryTimes;
+		this.entryTimes.addAll(entryTimes);
 		this.broker = broker;
 		this.shareholder = shareholder;
 		this.status = status;
@@ -221,11 +243,15 @@ public class Order {
 	}
 
 	public boolean matches(Order other) {
+		return canTradeWithPrice(other.price);
+	}
+
+	public boolean canTradeWithPrice(int price) {
 		if (side == Side.BUY) {
-			return price >= other.price;
+			return this.price >= price;
 		}
 
-		return price <= other.price;
+		return this.price <= price;
 	}
 
 	public void decreaseQuantity(int amount) {
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
index 12a7b4d..2101be1 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
@@ -21,6 +21,26 @@ public class OrderBook {
 		stopLimitOrderBuyQueue = new LinkedList<>();
 	}
 
+	public Order getLowestPriorityActiveOrder(Side side) {
+		var queue = (side == Side.BUY) ? buyQueue : sellQueue;
+
+		if (queue.isEmpty()) {
+			throw new NotFoundException();
+		} else {
+			return queue.getLast();
+		}
+	}
+
+	public Order getHighestPriorityActiveOrder(Side side) {
+		var queue = (side == Side.BUY) ? buyQueue : sellQueue;
+
+		if (queue.isEmpty()) {
+			throw new NotFoundException();
+		} else {
+			return queue.getFirst();
+		}
+	}
+
 	public void enqueue(Order order) {
 		List<Order> queue = getQueue(order);
 		ListIterator<Order> it = queue.listIterator();
@@ -87,6 +107,12 @@ public class OrderBook {
 		queue.remove(targetOrder);
 	}
 
+	public void removeOrder(Order order) {
+		List<Order> queue = getQueue(order);
+		queue.remove(order);
+		order.delete();
+	}
+
 	public Order findOrderToMatchWith(Order newOrder) {
 		var queue = getQueue(newOrder.getSide().opposite());
 
@@ -112,10 +138,6 @@ public class OrderBook {
 		return !getQueue(side).isEmpty();
 	}
 
-	public void removeFirst(Side side) {
-		getQueue(side).removeFirst();
-	}
-
 	public int totalSellQuantityByShareholder(Shareholder shareholder) {
 		return (
 			sellQueue
@@ -150,7 +172,7 @@ public class OrderBook {
 	}
 
 	private StopLimitOrder findSatisfiedStopLimitOrder(List<Order> queue, int lastTradePrice) {
-		if (queue.size() == 0) {
+		if (queue.isEmpty()) {
 			return null;
 		}
 
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
index 96e08e9..31589ee 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
@@ -1,13 +1,20 @@
 package ir.ramtung.tinyme.domain.entity;
 
+import ir.ramtung.tinyme.domain.entity.security_stats.AuctionStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.ExecuteStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SecurityStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SituationalStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.StateStats;
 import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
 import ir.ramtung.tinyme.domain.exception.NotEnoughPositionException;
+import ir.ramtung.tinyme.domain.exception.UnknownSecurityStateException;
 import ir.ramtung.tinyme.domain.service.Matcher;
 import ir.ramtung.tinyme.messaging.Message;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
+
 import lombok.Builder;
 import lombok.Getter;
 
@@ -28,29 +35,51 @@ public class Security {
 
 	private int lastTradePrice;
 
-	public List<MatchResult> addNewOrder(Order newOrder, Matcher matcher) {
+	private static Matcher matcher = new Matcher();
+
+	@Builder.Default
+	private SecurityState state = SecurityState.CONTINUOUS;
+
+	public SecurityResponse addNewOrder(Order newOrder) {
 		try {
-			List<MatchResult> results = new ArrayList<>();
 			checkPositionForNewOrder(newOrder);
-			handleAdd(newOrder, matcher, results);
-			results.addAll(executeStopLimitOrders(matcher));
-			return results;
+			List<SecurityStats> stats = handleAdd(newOrder);
+			return new SecurityResponse(stats);
 		} catch (NotEnoughPositionException exp) {
-			return List.of(MatchResult.notEnoughPositions());
+			return new SecurityResponse(SituationalStats.createNotEnoughPositionsStats(newOrder.getOrderId()));
 		} catch (NotEnoughCreditException exp) {
-			return List.of(MatchResult.notEnoughCredit());
+			return new SecurityResponse(SituationalStats.createNotEnoughCreditStats(newOrder.getOrderId()));
+		}
+	}
+
+	private List<SecurityStats> handleAdd(Order newOrder) {
+		if (this.state == SecurityState.CONTINUOUS) {
+			return handleAddInContinuousState(newOrder);
+		} else if (this.state == SecurityState.AUCTION) {
+			return handleAddInAuctionState(newOrder);
+		} else {
+			throw new UnknownSecurityStateException();
 		}
 	}
 
-	private void handleAdd(Order newOrder, Matcher matcher, List<MatchResult> results) {
+	private List<SecurityStats> handleAddInAuctionState(Order newOrder) {
+		orderBook.enqueue(newOrder);
+
+		List<SecurityStats> stats = new ArrayList<>();
+		stats.add(SituationalStats.createAddOrderStats(newOrder.getOrderId()));
+		stats.add(createAuctionStats());
+		return stats;
+	}
+
+	private List<SecurityStats> handleAddInContinuousState(Order newOrder) {
+		List<SecurityStats> stats = new ArrayList<>();
 		if (newOrder instanceof StopLimitOrder newStopLimitOrder) {
-			addNewStopLimitOrder(newStopLimitOrder);
-			results.addFirst(MatchResult.executed(newOrder, List.of()));
+			stats.addAll(addNewStopLimitOrder(newStopLimitOrder));
 		} else {
-			MatchResult newOrderMatchResult = matcher.execute(newOrder);
-			updateLastTradePrice(newOrderMatchResult.trades());
-			results.addFirst(newOrderMatchResult);
+			stats.addAll(addNewLimitOrderInContinuousState(newOrder));
 		}
+		stats.addAll(activateStopLimitOrders());
+		return stats;
 	}
 
 	private void updateLastTradePrice(List<Trade> trades) {
@@ -59,8 +88,24 @@ public class Security {
 		}
 	}
 
-	private void addNewStopLimitOrder(StopLimitOrder newOrder) {
+	private List<SecurityStats> addNewStopLimitOrder(StopLimitOrder newOrder) {
 		orderBook.enqueue(newOrder);
+		return List.of(SituationalStats.createAddOrderStats(newOrder.getOrderId()));
+	}
+
+	private List<SecurityStats> addNewLimitOrderInContinuousState(Order newOrder) {
+		List<SecurityStats> stats = new ArrayList<>();
+		stats.add(SituationalStats.createAddOrderStats(newOrder.getOrderId()));
+
+		MatchResult newOrderMatchResult = matcher.continuousExecuting(newOrder);
+		if (!newOrderMatchResult.isSuccessful()) {
+			stats.set(0, SituationalStats.createExecutionStatsFromUnsuccessfulMatchResult(newOrderMatchResult, newOrder.getOrderId()));
+		}
+		if(!newOrderMatchResult.trades().isEmpty()) {
+			stats.add(ExecuteStats.createContinuousExecuteStats(newOrderMatchResult.trades(), newOrder.getOrderId()));
+		}
+		updateLastTradePrice(newOrderMatchResult.trades());
+		return stats;
 	}
 
 	private void checkPositionForNewOrder(Order newOrder) {
@@ -78,65 +123,154 @@ public class Security {
 		}
 	}
 
-	public void deleteOrder(Side side, long orderId) {
+	public SecurityResponse deleteOrder(Side side, long orderId) {
 		orderBook.removeByOrderId(side, orderId);
+
+		List<SecurityStats> stats = new ArrayList<>();
+		stats.add(SituationalStats.createDeleteOrderStats(orderId));
+		if (this.state == SecurityState.AUCTION) {
+			stats.add(createAuctionStats());
+		}
+		return new SecurityResponse(stats);
+	}
+
+	public SecurityResponse changeMatchingState(SecurityState newState) {
+		StateStats stateStats = StateStats.createStateStats(this.state, newState);
+		SecurityState prevState = this.state;
+		this.state = newState;
+		if (prevState == SecurityState.CONTINUOUS) {
+			return new SecurityResponse(stateStats);
+		} else if (prevState == SecurityState.AUCTION) {
+			List<SecurityStats> stats = openAuction();
+			stats.add(stateStats);
+			stats.addAll(activateStopLimitOrders());
+			return new SecurityResponse(stats);
+		} else {
+			throw new UnknownSecurityStateException();
+		}
+	}
+
+	private List<SecurityStats> openAuction() {
+		List<SecurityStats> stats = new ArrayList<>();
+
+		List<Trade> trades = matcher.auctionExecuting(orderBook, lastTradePrice);
+		if (!trades.isEmpty()) {
+			stats.add(ExecuteStats.createAuctionExecuteStats(trades));
+		}
+
+		updateLastTradePrice(trades);
+
+		return stats;
 	}
 
-	public List<MatchResult> updateOrder(Order tempOrder, Matcher matcher) {
+	public SecurityResponse updateOrder(Order tempOrder) {
 		try {
 			Order mainOrder = findByOrderId(tempOrder.getSide(), tempOrder.getOrderId());
 			checkPositionForUpdateOrder(mainOrder, tempOrder);
-			boolean losesPriority = mainOrder.willPriorityLostInUpdate(tempOrder);
-			return handleUpdate(tempOrder, matcher, mainOrder, losesPriority);
+			List<SecurityStats> stats = handleUpdate(tempOrder, mainOrder);
+			return new SecurityResponse(stats);
 		} catch (NotEnoughPositionException exp) {
-			return List.of(MatchResult.notEnoughPositions());
+			return new SecurityResponse(SituationalStats.createNotEnoughPositionsStats(tempOrder.getOrderId()));
 		}
 	}
 
-	private List<MatchResult> handleUpdate(Order tempOrder, Matcher matcher, Order mainOrder, boolean losesPriority) {
+	private List<SecurityStats> handleUpdate(Order tempOrder, Order mainOrder) {
+		boolean losesPriority = mainOrder.willPriorityLostInUpdate(tempOrder);
 		if (losesPriority) {
 			Order originalOrder = mainOrder.snapshot();
 			orderBook.removeByOrderId(originalOrder.getSide(), originalOrder.getOrderId());
 			mainOrder.updateFromTempOrder(tempOrder);
-			return reAddUpdatedOrder(mainOrder, originalOrder, matcher);
+			return reAddUpdatedOrder(mainOrder, originalOrder);
 		} else {
-			mainOrder.updateFromTempOrder(tempOrder);
-			return List.of(MatchResult.executed(null, List.of()));
+			return updateByKeepingPriority(tempOrder, mainOrder);
 		}
 	}
 
-	private List<MatchResult> reAddUpdatedOrder(Order updatedOrder, Order originalOrder, Matcher matcher) {
+	private List<SecurityStats> updateByKeepingPriority(Order tempOrder, Order mainOrder) {
+		if (this.state == SecurityState.CONTINUOUS) {
+			return updateByKeepingPriorityInContinuousState(tempOrder, mainOrder);
+		} else if (this.state == SecurityState.AUCTION) {
+			return updateByKeepingPriorityInAuctionState(tempOrder, mainOrder);
+		} else {
+			throw new UnknownSecurityStateException();
+		}
+	}
+
+	private List<SecurityStats> updateByKeepingPriorityInContinuousState(Order tempOrder, Order mainOrder) {
+		mainOrder.updateFromTempOrder(tempOrder);
+		return List.of(SituationalStats.createUpdateOrderStats(mainOrder.getOrderId()));
+	}
+
+	private List<SecurityStats> updateByKeepingPriorityInAuctionState(Order tempOrder, Order mainOrder) {
+		mainOrder.updateFromTempOrder(tempOrder);
+		
+		List<SecurityStats> stats = new ArrayList<>();
+		stats.add(SituationalStats.createUpdateOrderStats(mainOrder.getOrderId()));
+		stats.add(createAuctionStats());
+		return stats;
+	}
+
+	private List<SecurityStats> reAddUpdatedOrder(Order updatedOrder, Order originalOrder) {
+		if (this.state == SecurityState.CONTINUOUS) {
+			return reAddUpdatedOrderInContinuousState(updatedOrder, originalOrder);
+		} else if (this.state == SecurityState.AUCTION) {
+			return reAddUpdatedOrderInAuctionState(updatedOrder, originalOrder);
+		} else {
+			throw new UnknownSecurityStateException();
+		}
+	}
+
+	private List<SecurityStats> reAddUpdatedOrderInContinuousState(Order updatedOrder, Order originalOrder) {
 		if (updatedOrder instanceof StopLimitOrder updatedSlo) {
 			StopLimitOrder originalSlo = (StopLimitOrder) originalOrder;
-			return reAddUpdatedSlo(updatedSlo, originalSlo, matcher);
+			return reAddUpdatedSloInContinuousState(updatedSlo, originalSlo);
 		} else {
-			return reAddActiveOrder(updatedOrder, originalOrder, matcher);
+			return reAddActiveOrderInContinuousState(updatedOrder, originalOrder);
 		}
 	}
 
-	private List<MatchResult> reAddActiveOrder(Order updatedOrder, Order originalOrder, Matcher matcher) {
-		MatchResult updatedOrderResult = matcher.execute(updatedOrder);
+	private List<SecurityStats> reAddUpdatedOrderInAuctionState(Order updatedOrder, Order originalOrder) {
+		try {
+			orderBook.enqueue(updatedOrder);
+			List<SecurityStats> stats = new LinkedList<>();
+			stats.add(SituationalStats.createUpdateOrderStats(originalOrder.getOrderId()));
+			stats.add(createAuctionStats());
+			return stats;
+		} catch (NotEnoughCreditException e) {
+			orderBook.enqueue(originalOrder);
+			return List.of(SituationalStats.createNotEnoughCreditStats(originalOrder.getOrderId()));
+		}
+	}
 
-		if (updatedOrderResult.outcome() != MatchingOutcome.EXECUTED) {
+	private List<SecurityStats> reAddActiveOrderInContinuousState(Order updatedOrder, Order originalOrder) {
+		List<SecurityStats> stats = new LinkedList<>();
+		stats.add(SituationalStats.createUpdateOrderStats(originalOrder.getOrderId()));
+		
+		MatchResult updatedOrderResult = matcher.continuousExecuting(updatedOrder);
+
+		if (!updatedOrderResult.isSuccessful()) {
 			orderBook.enqueue(originalOrder);
+			stats.set(0, SituationalStats.createExecutionStatsFromUnsuccessfulMatchResult(updatedOrderResult, originalOrder.getOrderId()));
+		} 
+		if (!updatedOrderResult.trades().isEmpty()) {
+			stats.add(ExecuteStats.createContinuousExecuteStats(updatedOrderResult.trades(), originalOrder.getOrderId()));
 		}
 
 		updateLastTradePrice(updatedOrderResult.trades());
-		List<MatchResult> results = executeStopLimitOrders(matcher);
-		results.addFirst(updatedOrderResult);
-		return results;
+		stats.addAll(activateStopLimitOrders());
+		return stats;
 	}
 
-	private List<MatchResult> reAddUpdatedSlo(StopLimitOrder updatedOrder,StopLimitOrder originalOrder,Matcher matcher) {
+	private List<SecurityStats> reAddUpdatedSloInContinuousState(StopLimitOrder updatedOrder,StopLimitOrder originalOrder) {
 		try {
-			List<MatchResult> results = new LinkedList<>();
-			results.add(MatchResult.executed(updatedOrder, List.of()));
-			addNewStopLimitOrder(updatedOrder);
-			results.addAll(executeStopLimitOrders(matcher));
-			return results;
+			List<SecurityStats> stats = new LinkedList<>();
+			stats.add(SituationalStats.createUpdateOrderStats(originalOrder.getOrderId()));
+			orderBook.enqueue(updatedOrder);
+			stats.addAll(activateStopLimitOrders());
+			return stats;
 		} catch (NotEnoughCreditException exp) {
-			addNewStopLimitOrder(originalOrder);
-			return List.of(MatchResult.notEnoughCredit());
+			orderBook.enqueue(originalOrder);
+			return List.of(SituationalStats.createNotEnoughCreditStats(originalOrder.getOrderId()));
 		}
 	}
 
@@ -154,7 +288,7 @@ public class Security {
 		}
 	}
 
-	public List<String> checkLotAndTickSize(EnterOrderRq order) {
+	public List<String> checkEnterOrderRq(EnterOrderRq order) {
 		List<String> errors = new LinkedList<>();
 		
 		if (order.getQuantity() % lotSize != 0) {
@@ -165,21 +299,49 @@ public class Security {
 			errors.add(Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE);
 		}
 
+		if(this.state == SecurityState.AUCTION && order.getMinimumExecutionQuantity() != 0) {
+			errors.add(Message.MINIMUM_EXECUTION_IN_AUCTION_STATE);
+		}
+
+		if(this.state == SecurityState.AUCTION && order.getStopPrice() != 0) {
+			errors.add(Message.STOP_PRICE_IN_AUCTION_STATE);
+		}
+
 		return errors;
 	}
 
-	private List<MatchResult> executeStopLimitOrders(Matcher matcher) {
-		List<MatchResult> results = new LinkedList<>();
-		StopLimitOrder sloOrder;
+	private List<SecurityStats> activateStopLimitOrders() {
+		List<SecurityStats> stats = new LinkedList<>();
+		StopLimitOrder slo;
+
+		while ((slo = orderBook.getStopLimitOrder(lastTradePrice)) != null) {
+			stats.add(SituationalStats.createOrderActivatedStats(slo.getOrderId(), slo.getRequestId()));
+			Order activatedOrder = new Order(slo);
+			if (this.state == SecurityState.CONTINUOUS) {
+				stats.addAll(activateOrderInContinuousState(activatedOrder, slo.getRequestId()));
+			} else if (this.state == SecurityState.AUCTION) {
+				stats.addAll(activateOrderInAuctionState(activatedOrder));
+			} else {
+				throw new UnknownSecurityStateException();
+			}
+		}
 
-		while ((sloOrder = orderBook.getStopLimitOrder(lastTradePrice)) != null) {
-			Order activatedOrder = new Order(sloOrder);
-			MatchResult result = matcher.execute(activatedOrder);
-			updateLastTradePrice(result.trades());
-			results.add(result);
+		return stats;
+	}
+
+	private List<SecurityStats> activateOrderInContinuousState(Order activatedOrder, long requestId) {
+		MatchResult result = matcher.continuousExecuting(activatedOrder);
+		updateLastTradePrice(result.trades());
+		if(!result.trades().isEmpty()) {
+			return List.of(ExecuteStats.createContinuousExecuteStatsForActivatedOrder(result.trades(), activatedOrder.getOrderId(), requestId));
+		} else {
+			return List.of();
 		}
+	}
 
-		return results;
+	private List<SecurityStats> activateOrderInAuctionState(Order activatedOrder) {
+		orderBook.enqueue(activatedOrder);
+		return List.of();
 	}
 
 	public Order findByOrderId(Side side, long orderId) {
@@ -189,4 +351,14 @@ public class Security {
 	public boolean isThereOrderWithId(Side side, long orderId) {
 		return orderBook.isThereOrderWithId(side, orderId);
 	}
+
+	public boolean isStopLimitOrder(Side side, long orderId) {
+		Order order = orderBook.findByOrderId(side, orderId);
+		return (order instanceof StopLimitOrder);
+	}
+	private AuctionStats createAuctionStats() {
+		int openingPrice = matcher.calcOpeningAuctionPrice(orderBook, lastTradePrice);
+		int tradableQuantity = matcher.calcTradableQuantity(orderBook, openingPrice);
+		return AuctionStats.createAuctionStats(openingPrice, tradableQuantity);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/SecurityResponse.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/SecurityResponse.java
new file mode 100644
index 0000000..b5664a2
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/SecurityResponse.java
@@ -0,0 +1,20 @@
+package ir.ramtung.tinyme.domain.entity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ir.ramtung.tinyme.domain.entity.security_stats.SecurityStats;
+import lombok.Getter;
+
+@Getter
+public final class SecurityResponse {
+	private List<SecurityStats> stats = new ArrayList<>();
+
+	public SecurityResponse(List<SecurityStats> stats) {
+		this.stats = stats;
+	}
+
+	public SecurityResponse(SecurityStats stats) {
+		this.stats.add(stats);
+	}
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/SecurityState.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/SecurityState.java
new file mode 100644
index 0000000..2bb21b5
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/SecurityState.java
@@ -0,0 +1,6 @@
+package ir.ramtung.tinyme.domain.entity;
+
+public enum SecurityState {
+    CONTINUOUS,
+    AUCTION
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java
index 72b5775..8a806b5 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java
@@ -15,6 +15,7 @@ import lombok.ToString;
 public class StopLimitOrder extends Order {
 
 	private int stopPrice;
+	private long requestId;
 
 	public StopLimitOrder(
 		long orderId,
@@ -40,10 +41,28 @@ public class StopLimitOrder extends Order {
 		Shareholder shareholder,
 		LocalDateTime entryTime,
 		int stopPrice,
+		long requestId,
 		OrderStatus status
 	) {
 		super(orderId, security, side, quantity, 0, price, broker, shareholder, entryTime, status);
 		this.stopPrice = stopPrice;
+		this.requestId =  requestId;
+	}
+
+	public StopLimitOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		int stopPrice,
+		long requestId
+	) {
+		super(orderId, security, side, quantity, 0, price, broker, shareholder, LocalDateTime.now(), OrderStatus.NEW);
+		this.stopPrice = stopPrice;
+		this.requestId =  requestId;
 	}
 
 	public StopLimitOrder(
@@ -78,6 +97,7 @@ public class StopLimitOrder extends Order {
 			shareholder,
 			req.getEntryTime(),
 			req.getStopPrice(),
+			req.getRequestId(),
 			OrderStatus.NEW
 		);
 	}
@@ -123,6 +143,7 @@ public class StopLimitOrder extends Order {
 		super.updateFromTempOrder(tempOrder);
 		StopLimitOrder tempSlo = (StopLimitOrder) tempOrder;
 		this.stopPrice = tempSlo.stopPrice;
+		this.requestId = tempSlo.requestId;
 	}
 
 	@Override
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
index 1f7e629..53fd854 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
@@ -74,6 +74,17 @@ public class Trade {
 		this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
 	}
 
+	public Trade(Order sellOrder, Order buyOrder, int price) {
+		this.security = sellOrder.getSecurity();
+		this.price = price;
+		this.quantity = Math.min(sellOrder.getQuantity(), buyOrder.getQuantity());
+		this.buy = buyOrder;
+		this.sell = sellOrder;
+		this.buyFirstVersion = buyOrder.snapshot();
+		this.sellFirstVersion = sellOrder.snapshot();
+		this.isBuyQueued = (buyOrder.status == OrderStatus.QUEUED);
+	}
+
 	public long getTradedValue() {
 		return (long) price * quantity;
 	}
@@ -113,6 +124,9 @@ public class Trade {
 	public void confirm() {
 		if (!isBuyQueued) {
 			decreaseBuyersCredit();
+		} else if (price < buy.getPrice()) {
+			long backCredit = (long) ((buy.getPrice() - this.price) * this.quantity);
+			buy.getBroker().increaseCreditBy(backCredit);
 		}
 
 		increaseSellersCredit();
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/AuctionStats.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/AuctionStats.java
new file mode 100644
index 0000000..c9a4869
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/AuctionStats.java
@@ -0,0 +1,18 @@
+package ir.ramtung.tinyme.domain.entity.security_stats;
+
+import lombok.Getter;
+
+@Getter
+public class AuctionStats extends SecurityStats {
+    int openingPrice;
+    int tradableQuantity;
+
+    private AuctionStats(int openingPrice, int tradableQuantity) {
+        this.openingPrice = openingPrice;
+        this.tradableQuantity = tradableQuantity;
+    }
+
+    public static AuctionStats createAuctionStats(int openingPrice, int tradableQuantity) {
+        return new AuctionStats(openingPrice, tradableQuantity);
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/ExecuteStats.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/ExecuteStats.java
new file mode 100644
index 0000000..2c5f289
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/ExecuteStats.java
@@ -0,0 +1,67 @@
+package ir.ramtung.tinyme.domain.entity.security_stats;
+
+import java.util.List;
+
+import ir.ramtung.tinyme.domain.entity.SecurityState;
+import ir.ramtung.tinyme.domain.entity.Trade;
+import lombok.Getter;
+
+@Getter
+public class ExecuteStats extends SecurityStats {
+    private long orderId;
+    private long requestId;
+    private List<Trade> trades;
+    private SecurityState securityState;
+    private boolean isForActivatedOrder;
+
+    private ExecuteStats(long orderId, List<Trade> trades, SecurityState securityState) {
+        this.orderId = orderId;
+        this.trades = trades;
+        this.securityState = securityState;
+        this.isForActivatedOrder = false;
+    }
+
+    private ExecuteStats(long orderId, long requestId, boolean isForActivatedOrder, List<Trade> trades, SecurityState securityState) {
+        this(orderId, trades, securityState);
+        this.requestId = requestId;
+        this.isForActivatedOrder = isForActivatedOrder;
+    }
+
+    public static ExecuteStats createAuctionExecuteStats(List<Trade> trades) {
+        return new ExecuteStats(0, trades, SecurityState.AUCTION);
+    }
+
+    public static ExecuteStats createContinuousExecuteStats(List<Trade> trades, long orderId) {
+        return new ExecuteStats(orderId, trades, SecurityState.CONTINUOUS);
+    }
+
+    public static ExecuteStats createContinuousExecuteStatsForActivatedOrder(List<Trade> trades, long orderId, long requestId) {
+        return new ExecuteStats(orderId, requestId, true, trades, SecurityState.CONTINUOUS);
+    }
+
+    public long getOrderId() {
+        if (securityState == SecurityState.AUCTION) {
+            throw new IllegalStateException("Action execute stats can not have order id");
+        }
+        return this.orderId;
+    }
+
+    public long getRequestId(){
+        if (!isForActivatedOrder) {
+            throw new IllegalStateException("Only order activated execution stats has requestId");
+        }
+        return requestId;
+    }
+
+    public boolean isForActivatedOrder() {
+        return isForActivatedOrder;
+    }
+    
+    public boolean isAuction() {
+        return securityState == SecurityState.AUCTION;
+    }
+
+    public boolean isCountinues() {
+        return securityState == SecurityState.CONTINUOUS;
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SecurityStats.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SecurityStats.java
new file mode 100644
index 0000000..93baf56
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SecurityStats.java
@@ -0,0 +1,8 @@
+package ir.ramtung.tinyme.domain.entity.security_stats;
+
+import lombok.Getter;
+
+@Getter
+public abstract class SecurityStats {
+	
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SituationalStats.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SituationalStats.java
new file mode 100644
index 0000000..02aca6e
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SituationalStats.java
@@ -0,0 +1,67 @@
+package ir.ramtung.tinyme.domain.entity.security_stats;
+
+import ir.ramtung.tinyme.domain.entity.MatchResult;
+import ir.ramtung.tinyme.domain.entity.MatchingOutcome;
+import lombok.Getter;
+
+@Getter
+public class SituationalStats extends SecurityStats {
+
+    private long orderId;
+    private long requestId;
+    private SituationalStatsType type;
+
+    private SituationalStats (long orderId, SituationalStatsType type) {
+        this.orderId = orderId;
+        this.type = type;
+    }
+
+    private SituationalStats (long orderId, long requestId, SituationalStatsType type) {
+        this(orderId, type);
+        this.requestId = requestId;
+    }
+
+	public static SecurityStats createAddOrderStats(long orderId) {
+		return new SituationalStats(orderId, SituationalStatsType.ADD_ORDER);
+	}
+
+	public static SituationalStats createDeleteOrderStats(long orderId) {
+		return new SituationalStats(orderId, SituationalStatsType.DELETE_ORDER);
+	}
+
+	public static SituationalStats createUpdateOrderStats(long orderId) {
+		return new SituationalStats(orderId, SituationalStatsType.UPDATE_ORDER);
+	}
+
+    public static SituationalStats createNotEnoughCreditStats(long orderId) {
+        return new SituationalStats(orderId, SituationalStatsType.NOT_ENOUGH_CREDIT);
+    }
+
+    public static SituationalStats createNotEnoughPositionsStats(long orderId) {
+        return new SituationalStats(orderId, SituationalStatsType.NOT_ENOUGH_POSITIONS);
+    }
+
+    public static SituationalStats createNotEnoughExecutionStats(long orderId) {
+        return new SituationalStats(orderId, SituationalStatsType.NOT_ENOUGH_EXECUTION);
+    }
+
+    public static SituationalStats createOrderActivatedStats(long orderId, long requestId) {
+        return new SituationalStats(orderId, requestId, SituationalStatsType.ORDER_ACTIVATED);
+    }
+
+    public static SituationalStats createExecutionStatsFromUnsuccessfulMatchResult(MatchResult matchResult, long orderId) {
+        switch (matchResult.outcome()) {
+            case MatchingOutcome.NOT_ENOUGH_CREDIT   : return createNotEnoughCreditStats(orderId);
+            case MatchingOutcome.NOT_ENOUGH_POSITIONS: return createNotEnoughPositionsStats(orderId);
+            case MatchingOutcome.NOT_ENOUGH_EXECUTION: return createNotEnoughExecutionStats(orderId);
+            default: throw new IllegalArgumentException("Unknown unsuccessful match result");
+        }
+    }
+
+    public long getRequestId() {
+        if (this.type != SituationalStatsType.ORDER_ACTIVATED) {
+            throw new IllegalStateException("Only order activated stats has requestId.");
+        }
+        return this.requestId;
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SituationalStatsType.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SituationalStatsType.java
new file mode 100644
index 0000000..65cc2ef
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/SituationalStatsType.java
@@ -0,0 +1,11 @@
+package ir.ramtung.tinyme.domain.entity.security_stats;
+
+public enum SituationalStatsType {
+    DELETE_ORDER,
+    ADD_ORDER,
+    UPDATE_ORDER,
+    ORDER_ACTIVATED,
+    NOT_ENOUGH_CREDIT,
+    NOT_ENOUGH_POSITIONS,
+    NOT_ENOUGH_EXECUTION
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/StateStats.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/StateStats.java
new file mode 100644
index 0000000..2da2a26
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/security_stats/StateStats.java
@@ -0,0 +1,19 @@
+package ir.ramtung.tinyme.domain.entity.security_stats;
+
+import ir.ramtung.tinyme.domain.entity.SecurityState;
+import lombok.Getter;
+
+@Getter
+public class StateStats extends SecurityStats {
+    private SecurityState from;
+    private SecurityState to;
+    
+    private StateStats(SecurityState from, SecurityState to) {
+        this.from = from;
+        this.to = to;
+    }
+
+    public static StateStats createStateStats(SecurityState from, SecurityState to) {
+        return new StateStats(from, to);
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UnknownSecurityStateException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UnknownSecurityStateException.java
new file mode 100644
index 0000000..d2f5e70
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UnknownSecurityStateException.java
@@ -0,0 +1,11 @@
+package ir.ramtung.tinyme.domain.exception;
+
+public class UnknownSecurityStateException extends RuntimeException{
+    public UnknownSecurityStateException(String msg) {
+		super(msg);
+	}
+
+	public UnknownSecurityStateException() {
+		super();
+	}
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java
index d273ac8..063abf2 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java
@@ -1,18 +1,18 @@
 package ir.ramtung.tinyme.domain.service;
 
-import ir.ramtung.tinyme.domain.entity.MatchResult;
-import ir.ramtung.tinyme.domain.entity.MatchingOutcome;
-import ir.ramtung.tinyme.domain.entity.Trade;
+import ir.ramtung.tinyme.messaging.event.Event;
 import ir.ramtung.tinyme.messaging.request.BaseOrderRq;
 import java.util.List;
+
+import ir.ramtung.tinyme.messaging.request.BaseRq;
 import lombok.Getter;
 
 @Getter
 public class ApplicationServiceResponse {
 
 	private ApplicationServiceType type;
-	private List<MatchResult> matchResults;
-	private BaseOrderRq req;
+	private List<Event> events;
+	private BaseRq req;
 
 	public enum ApplicationServiceType {
 		DELETE_ORDER,
@@ -22,11 +22,12 @@ public class ApplicationServiceResponse {
 		UPDATE_ICEBERG_ORDER,
 		ADD_STOP_LIMIT_ORDER,
 		UPDATE_STOP_LIMIT_ORDER,
+		CHANGE_MATCHING_STATE,
 	}
 
-	public ApplicationServiceResponse(ApplicationServiceType type, List<MatchResult> matchResults, BaseOrderRq req) {
+	public ApplicationServiceResponse(ApplicationServiceType type, List<Event> events, BaseRq req) {
 		this.type = type;
-		this.matchResults = matchResults;
+		this.events = events;
 		this.req = req;
 	}
 
@@ -34,6 +35,10 @@ public class ApplicationServiceResponse {
 		return this.type == ApplicationServiceType.DELETE_ORDER;
 	}
 
+	public boolean isTypeChangeState() {
+		return this.type == ApplicationServiceType.CHANGE_MATCHING_STATE;
+	}
+
 	public boolean isTypeUpdate() {
 		return (
 			this.type == ApplicationServiceType.UPDATE_LIMIT_ORDER ||
@@ -51,30 +56,14 @@ public class ApplicationServiceResponse {
 	}
 
 	public long getRequestId() {
-		return req.getRequestId();
+		// Fixme:
+		BaseOrderRq baseOrderRq = (BaseOrderRq) this.req;
+		return baseOrderRq.getRequestId();
 	}
 
 	public long getOrderId() {
-		return req.getOrderId();
-	}
-
-	public long getOrderId(int idx) {
-		return matchResults.get(idx).remainder().getOrderId();
-	}
-
-	public boolean isSuccessful(int idx) {
-		return matchResults.get(idx).isSuccessful();
-	}
-
-	public boolean hasTrades(int idx) {
-		return !matchResults.get(idx).trades().isEmpty();
-	}
-
-	public List<Trade> getTrades(int idx) {
-		return matchResults.get(idx).trades();
-	}
-
-	public MatchingOutcome getOutcome(int idx) {
-		return matchResults.get(idx).outcome();
+		// Fixme:
+		BaseOrderRq baseOrderRq = (BaseOrderRq) this.req;
+		return baseOrderRq.getOrderId();
 	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java
index 32ffaa8..e701eff 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java
@@ -1,6 +1,12 @@
 package ir.ramtung.tinyme.domain.service;
 
 import ir.ramtung.tinyme.domain.entity.*;
+import ir.ramtung.tinyme.domain.entity.security_stats.AuctionStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.ExecuteStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SecurityStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SituationalStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SituationalStatsType;
+import ir.ramtung.tinyme.domain.entity.security_stats.StateStats;
 import ir.ramtung.tinyme.domain.exception.InvalidIcebergPeakSizeException;
 import ir.ramtung.tinyme.domain.exception.InvalidPeakSizeException;
 import ir.ramtung.tinyme.domain.exception.InvalidStopLimitPriceException;
@@ -8,13 +14,30 @@ import ir.ramtung.tinyme.domain.exception.NotFoundException;
 import ir.ramtung.tinyme.domain.exception.UpdateMinimumExecutionQuantityException;
 import ir.ramtung.tinyme.domain.service.ApplicationServiceResponse.ApplicationServiceType;
 import ir.ramtung.tinyme.messaging.Message;
+import ir.ramtung.tinyme.messaging.TradeDTO;
+import ir.ramtung.tinyme.messaging.event.Event;
+import ir.ramtung.tinyme.messaging.event.OpeningPriceEvent;
+import ir.ramtung.tinyme.messaging.event.OrderAcceptedEvent;
+import ir.ramtung.tinyme.messaging.event.OrderActivatedEvent;
+import ir.ramtung.tinyme.messaging.event.OrderDeletedEvent;
+import ir.ramtung.tinyme.messaging.event.OrderExecutedEvent;
+import ir.ramtung.tinyme.messaging.event.OrderRejectedEvent;
+import ir.ramtung.tinyme.messaging.event.OrderUpdatedEvent;
+import ir.ramtung.tinyme.messaging.event.SecurityStateChangedEvent;
+import ir.ramtung.tinyme.messaging.event.TradeEvent;
 import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
+import ir.ramtung.tinyme.messaging.request.ChangeMatchingStateRq;
 import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import ir.ramtung.tinyme.messaging.request.MatchingState;
 import ir.ramtung.tinyme.repository.BrokerRepository;
 import ir.ramtung.tinyme.repository.SecurityRepository;
 import ir.ramtung.tinyme.repository.ShareholderRepository;
+
+import java.util.ArrayList;
 import java.util.List;
+import java.util.stream.Collectors;
+
 import org.springframework.stereotype.Service;
 
 @Service
@@ -23,7 +46,6 @@ public class ApplicationServices {
 	private SecurityRepository securityRepository;
 	private BrokerRepository brokerRepository;
 	private ShareholderRepository shareholderRepository;
-	private Matcher matcher;
 	private Security security;
 	private Broker broker;
 	private Shareholder shareholder;
@@ -31,22 +53,24 @@ public class ApplicationServices {
 	public ApplicationServices(
 		SecurityRepository securityRepository,
 		BrokerRepository brokerRepository,
-		ShareholderRepository shareholderRepository,
-		Matcher matcher
+		ShareholderRepository shareholderRepository
 	) {
 		this.brokerRepository = brokerRepository;
 		this.shareholderRepository = shareholderRepository;
 		this.securityRepository = securityRepository;
-		this.matcher = matcher;
 	}
 
-	private void setEntitiesByEnterOrderRq(EnterOrderRq req) {
+	private void setEntitiesByRq(EnterOrderRq req) {
 		this.security = securityRepository.findSecurityByIsin(req.getSecurityIsin());
 		this.broker = brokerRepository.findBrokerById(req.getBrokerId());
 		this.shareholder = shareholderRepository.findShareholderById(req.getShareholderId());
 	}
 
-	private void setEntitiesByEnterOrderRq(DeleteOrderRq req) {
+	private void setEntitiesByRq(DeleteOrderRq req) {
+		this.security = securityRepository.findSecurityByIsin(req.getSecurityIsin());
+	}
+
+	private void setEntitiesByRq(ChangeMatchingStateRq req) {
 		this.security = securityRepository.findSecurityByIsin(req.getSecurityIsin());
 	}
 
@@ -65,6 +89,11 @@ public class ApplicationServices {
 		if (!security.isThereOrderWithId(deleteOrderRq.getSide(), deleteOrderRq.getOrderId())) {
 			throw new InvalidRequestException(Message.ORDER_ID_NOT_FOUND);
 		}
+
+		if(security.getState() == SecurityState.AUCTION &&
+				security.isStopLimitOrder(deleteOrderRq.getSide(), deleteOrderRq.getOrderId())) {
+			throw new InvalidRequestException(Message.CAN_NOT_DELETE_SLO_IN_AUCTION_STATE);
+		}
 	}
 
 	private void generalEnterOrderValidation(EnterOrderRq enterOrderRq) {
@@ -73,7 +102,7 @@ public class ApplicationServices {
 			errors.add(Message.UNKNOWN_SECURITY_ISIN);
 		} else {
 			Security security = securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin());
-			errors.addAll(security.checkLotAndTickSize(enterOrderRq));
+			errors.addAll(security.checkEnterOrderRq(enterOrderRq));
 		}
 
 		if (!brokerRepository.isThereBrokerWithId(enterOrderRq.getBrokerId())) {
@@ -109,68 +138,152 @@ public class ApplicationServices {
 		}
 	}
 
+	private void validateChangeMatchingState(ChangeMatchingStateRq req) {
+		try {
+			securityRepository.findSecurityByIsin(req.getSecurityIsin());
+		} catch (NotFoundException exp) {
+			throw new InvalidRequestException(Message.UNKNOWN_SECURITY_ISIN);
+		}
+	}
+
+	private List<Event> createEventsFormSecurityStats(List<SecurityStats> securityStats, long requestId) {
+		List<Event> events = new ArrayList<>();
+		for (SecurityStats stats : securityStats) {
+			if (stats instanceof SituationalStats situationalStats) {
+				events.add(createEventFromSituationalStats(situationalStats, requestId));
+			} else if (stats instanceof ExecuteStats executeStats) {
+				events.addAll(createEventsFromExecuteStats(executeStats, requestId));
+			} else if (stats instanceof StateStats stateStats) {
+				events.add(createSecurityStateChangedEvent(stateStats));
+			} else if (stats instanceof AuctionStats auctionStats) {
+				events.add(createOpeningPriceEvent(auctionStats));
+			} else {
+				throw new UnknownError("Unknown SecurityStats");
+			}
+		}
+		return events;
+	}
+
+	private Event createOpeningPriceEvent(AuctionStats auctionStats) {
+		return new OpeningPriceEvent(security.getIsin(), auctionStats.getOpeningPrice(), auctionStats.getTradableQuantity());
+	}
+
+	private Event createSecurityStateChangedEvent(StateStats stateStats) {
+		MatchingState state = (stateStats.getTo() == SecurityState.AUCTION) ? MatchingState.AUCTION : MatchingState.CONTINUOUS;
+		return new SecurityStateChangedEvent(security.getIsin(), state);
+	}
+
+	private Event createEventFromSituationalStats(SituationalStats situationalStats, long requestId) {
+		long orderId = situationalStats.getOrderId();
+		switch (situationalStats.getType()) {
+            case SituationalStatsType.DELETE_ORDER         : return new OrderDeletedEvent(requestId, orderId); 
+            case SituationalStatsType.ADD_ORDER            : return new OrderAcceptedEvent(requestId, orderId);
+            case SituationalStatsType.UPDATE_ORDER         : return new OrderUpdatedEvent(requestId, orderId);
+            case SituationalStatsType.ORDER_ACTIVATED      : return new OrderActivatedEvent(orderId);
+            case SituationalStatsType.NOT_ENOUGH_CREDIT    : return new OrderRejectedEvent(requestId, orderId, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT));
+            case SituationalStatsType.NOT_ENOUGH_POSITIONS : return new OrderRejectedEvent(requestId, orderId, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS));
+            case SituationalStatsType.NOT_ENOUGH_EXECUTION : return new OrderRejectedEvent(requestId, orderId, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET));
+            default : throw new UnknownError("Unknown SituationalStatsType");
+        }
+	}
+
+	private List<Event> createEventsFromExecuteStats(ExecuteStats executeStats, long requestId) {
+		if (executeStats.isCountinues()) {
+			long orderId = executeStats.getOrderId();
+			long finalRequestId = (executeStats.isForActivatedOrder()) ? executeStats.getRequestId() : requestId;
+			return List.of(new OrderExecutedEvent(finalRequestId, orderId, executeStats.getTrades().stream().map(TradeDTO::new).collect(Collectors.toList())));
+		} else {
+			return createTradeEvents(executeStats);
+		}
+	}
+
+	private List<Event> createTradeEvents(ExecuteStats executeStats) {
+		List<Event> tradeEvents = new ArrayList<>();
+		for (Trade trade : executeStats.getTrades()) {
+			tradeEvents.add(new TradeEvent(trade));
+		}
+		return tradeEvents;
+	}
+
 	public ApplicationServiceResponse deleteOrder(DeleteOrderRq req) {
 		validateDeleteOrderRq(req);
-		setEntitiesByEnterOrderRq(req);
-		security.deleteOrder(req.getSide(), req.getOrderId());
+		setEntitiesByRq(req);
+		SecurityResponse response = security.deleteOrder(req.getSide(), req.getOrderId());
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
 
-		return new ApplicationServiceResponse(ApplicationServiceType.DELETE_ORDER, null, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.DELETE_ORDER, events, req);
 	}
 
 	public ApplicationServiceResponse addLimitOrder(EnterOrderRq req) {
 		generalEnterOrderValidation(req);
-		setEntitiesByEnterOrderRq(req);
+		setEntitiesByRq(req);
 		Order tempOrder = Order.createTempOrderByEnterRq(security, broker, shareholder, req);
-		List<MatchResult> results = security.addNewOrder(tempOrder, matcher);
+		SecurityResponse response = security.addNewOrder(tempOrder);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
 
-		return new ApplicationServiceResponse(ApplicationServiceType.ADD_LIMIT_ORDER, results, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.ADD_LIMIT_ORDER, events, req);
 	}
 
 	public ApplicationServiceResponse updateLimitOrder(EnterOrderRq req) {
 		generalEnterOrderValidation(req);
 		validateUpdateOrderRq(req);
-		setEntitiesByEnterOrderRq(req);
+		setEntitiesByRq(req);
 		Order tempOrder = Order.createTempOrderByEnterRq(security, broker, shareholder, req);
-		List<MatchResult> results = security.updateOrder(tempOrder, matcher);
+		SecurityResponse response = security.updateOrder(tempOrder);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
 
-		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_LIMIT_ORDER, results, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_LIMIT_ORDER, events, req);
 	}
 
 	public ApplicationServiceResponse addIcebergOrder(EnterOrderRq req) {
 		generalEnterOrderValidation(req);
-		setEntitiesByEnterOrderRq(req);
+		setEntitiesByRq(req);
 		IcebergOrder tempOrder = IcebergOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
-		List<MatchResult> results = security.addNewOrder(tempOrder, matcher);
+		SecurityResponse response = security.addNewOrder(tempOrder);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
 
-		return new ApplicationServiceResponse(ApplicationServiceType.ADD_ICEBERG_ORDER, results, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.ADD_ICEBERG_ORDER, events, req);
 	}
 
 	public ApplicationServiceResponse updateIcebergOrder(EnterOrderRq req) {
 		generalEnterOrderValidation(req);
 		validateUpdateOrderRq(req);
-		setEntitiesByEnterOrderRq(req);
+		setEntitiesByRq(req);
 		IcebergOrder tempOrder = IcebergOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
-		List<MatchResult> results = security.updateOrder(tempOrder, matcher);
+		SecurityResponse response = security.updateOrder(tempOrder);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
 
-		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_ICEBERG_ORDER, results, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_ICEBERG_ORDER, events, req);
 	}
 
 	public ApplicationServiceResponse addStopLimitOrder(EnterOrderRq req) {
 		generalEnterOrderValidation(req);
-		setEntitiesByEnterOrderRq(req);
+		setEntitiesByRq(req);
 		StopLimitOrder tempOrder = StopLimitOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
-		List<MatchResult> results = security.addNewOrder(tempOrder, matcher);
+		SecurityResponse response = security.addNewOrder(tempOrder);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
 
-		return new ApplicationServiceResponse(ApplicationServiceType.ADD_STOP_LIMIT_ORDER, results, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.ADD_STOP_LIMIT_ORDER, events, req);
 	}
 
 	public ApplicationServiceResponse updateStopLimitOrder(EnterOrderRq req) {
 		generalEnterOrderValidation(req);
 		validateUpdateOrderRq(req);
-		setEntitiesByEnterOrderRq(req);
+		setEntitiesByRq(req);
 		StopLimitOrder tempOrder = StopLimitOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
-		List<MatchResult> results = security.updateOrder(tempOrder, matcher);
+		SecurityResponse response = security.updateOrder(tempOrder);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), req.getRequestId());
+
+		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_STOP_LIMIT_ORDER, events, req);
+	}
+
+	public ApplicationServiceResponse changeMatchingState(ChangeMatchingStateRq req) {
+		validateChangeMatchingState(req);
+		setEntitiesByRq(req);
+		SecurityState targetSecurityState = (req.getTargetState() == MatchingState.AUCTION) ? SecurityState.AUCTION : SecurityState.CONTINUOUS;
+		SecurityResponse response = security.changeMatchingState(targetSecurityState);
+		List<Event> events = createEventsFormSecurityStats(response.getStats(), 0);
 
-		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_STOP_LIMIT_ORDER, results, req);
+		return new ApplicationServiceResponse(ApplicationServiceType.CHANGE_MATCHING_STATE, events, req);
 	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
index 14b330a..6f4588e 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
@@ -4,6 +4,8 @@ import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
 import ir.ramtung.tinyme.domain.exception.NotEnoughExecutionException;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
+
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import org.springframework.stereotype.Service;
@@ -11,12 +13,65 @@ import org.springframework.stereotype.Service;
 @Service
 public class Matcher {
 
-	public List<Trade> match(Order newOrder) {
+	private boolean hasOrderForAuction(OrderBook orderBook) {
+		return orderBook.hasOrderOfType(Side.BUY) &&
+				orderBook.hasOrderOfType(Side.SELL);
+	}
+
+	public int calcOpeningAuctionPrice(OrderBook orderBook, int lastTradePrice) {
+		if(!hasOrderForAuction(orderBook))
+			return lastTradePrice;
+
+		int minPrice = orderBook.getLowestPriorityActiveOrder(Side.BUY).getPrice();
+		int maxPrice = orderBook.getLowestPriorityActiveOrder(Side.SELL).getPrice();
+
+		int maxTradableQuantity = 0;
+		int openingPrice = lastTradePrice; 
+		
+		for (int price = minPrice; price <= maxPrice; price++) {
+			int currentTradableQuantity = calcTradableQuantity(orderBook, price);
+			if (currentTradableQuantity > maxTradableQuantity) {
+				openingPrice = price;
+				maxTradableQuantity = currentTradableQuantity;
+			} 
+			else if (currentTradableQuantity == maxTradableQuantity && Math.abs(price - lastTradePrice) < Math.abs(openingPrice - lastTradePrice)) {
+				openingPrice = price;
+			}
+		}
+		
+		return openingPrice;
+	}
+
+	public int calcTradableQuantity(OrderBook orderBook, int openingPrice) {
+		int buysQuantity = 0;
+		int sellsQuantity = 0;
+
+		for (Order order : orderBook.getBuyQueue()) {
+			if (order.canTradeWithPrice(openingPrice)) {
+				buysQuantity += order.getTotalQuantity();
+			} 
+		}
+
+		for (Order order : orderBook.getSellQueue()) {
+			if (order.canTradeWithPrice(openingPrice)) {
+				sellsQuantity += order.getTotalQuantity();
+			} 
+		}
+
+		return Math.min(buysQuantity, sellsQuantity);
+	}
+
+	public List<Trade> continuousMatch(Order newOrder) {
 		OrderBook orderBook = newOrder.getSecurity().getOrderBook();
 		LinkedList<Trade> trades = new LinkedList<>();
 		try {
 			while (hasOrderToMatch(newOrder, orderBook)) {
-				tryToTrade(newOrder, orderBook, trades);
+				Order matchingOrder = orderBook.findOrderToMatchWith(newOrder);
+				if (newOrder.getSide() == Side.SELL) {
+					trades.add(createTrade(newOrder, matchingOrder, matchingOrder.getPrice()));
+				} else {
+					trades.add(createTrade(matchingOrder, newOrder, matchingOrder.getPrice()));
+				}
 			}
 			return trades;
 		} catch (NotFoundException exp) {
@@ -27,12 +82,29 @@ public class Matcher {
 		}
 	}
 
-    private void tryToTrade(Order newOrder, OrderBook orderBook, LinkedList<Trade> trades) {
-        Order matchingOrder = orderBook.findOrderToMatchWith(newOrder);
-        Trade trade = new Trade(newOrder, matchingOrder);
-        trade.confirm();
-        trades.add(trade);
-    }
+	private List<Trade> auctionMatch(OrderBook orderBook, int openingPrice) {
+		List<Trade> trades = new ArrayList<>();
+		if(!hasOrderForAuction(orderBook)) {
+			return trades;
+		}
+		Order sellOrder = orderBook.getHighestPriorityActiveOrder(Side.SELL);
+		Order buyOrder = orderBook.getHighestPriorityActiveOrder(Side.BUY);
+		while(sellOrder.canTradeWithPrice(openingPrice) && buyOrder.canTradeWithPrice(openingPrice)) {
+			trades.add(createTrade(sellOrder, buyOrder, openingPrice));
+			// FIXME: maybe more clear?
+			if(!hasOrderForAuction(orderBook))
+				break;
+			sellOrder = orderBook.getHighestPriorityActiveOrder(Side.SELL);
+			buyOrder = orderBook.getHighestPriorityActiveOrder(Side.BUY);
+		}
+		return trades;
+	}
+
+	private Trade createTrade(Order sellOrder, Order buyOrder, int price) {
+		Trade trade = new Trade(sellOrder, buyOrder, price);
+		trade.confirm();
+		return trade;
+	}
 
 	private boolean hasOrderToMatch(Order newOrder, OrderBook orderBook) {
 		return (orderBook.hasOrderOfType(newOrder.getSide().opposite())) && (newOrder.getQuantity() > 0);
@@ -42,11 +114,11 @@ public class Matcher {
 		trades.reversed().forEach(Trade::rollback);
 	}
 
-	public MatchResult execute(Order order) {
+	public MatchResult continuousExecuting(Order order) {
 		List<Trade> trades = new LinkedList<>();
 		
 		try {
-			trades = match(order);
+			trades = continuousMatch(order);
 			order.checkExecutionQuantity(sumOfExecutionQuantity(trades));
 			order.addYourselfToQueue();
 			return MatchResult.executed(order, trades);
@@ -59,6 +131,11 @@ public class Matcher {
 		}
 	}
 
+	public List<Trade> auctionExecuting(OrderBook orderBook, int lastTradePrice) {
+		int openingPrice = calcOpeningAuctionPrice(orderBook, lastTradePrice);
+		return auctionMatch(orderBook, openingPrice);
+	}
+
 	private int sumOfExecutionQuantity(List<Trade> trades) {
 		int quantitySum = 0;
 		for (Trade trade : trades) quantitySum += trade.getQuantity();
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
index 0eeb727..9d44969 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
@@ -1,19 +1,16 @@
 package ir.ramtung.tinyme.domain.service;
 
-import ir.ramtung.tinyme.domain.entity.MatchingOutcome;
-import ir.ramtung.tinyme.domain.entity.Trade;
 import ir.ramtung.tinyme.messaging.EventPublisher;
 import ir.ramtung.tinyme.messaging.Message;
-import ir.ramtung.tinyme.messaging.TradeDTO;
 import ir.ramtung.tinyme.messaging.event.*;
 import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
 import ir.ramtung.tinyme.messaging.request.BaseOrderRq;
 import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import ir.ramtung.tinyme.messaging.request.OrderEntryType;
-import java.util.LinkedList;
+import ir.ramtung.tinyme.messaging.request.BaseRq;
+import ir.ramtung.tinyme.messaging.request.ChangeMatchingStateRq;
 import java.util.List;
-import java.util.stream.Collectors;
 import org.springframework.stereotype.Service;
 
 @Service
@@ -27,29 +24,23 @@ public class OrderHandler {
 		this.services = services;
 	}
 
-	public void handleEnterOrder(EnterOrderRq enterOrderRq) {
+	public void handleRq(BaseRq baseRq) {
 		try {
-			ApplicationServiceResponse response = callService(enterOrderRq);
+			ApplicationServiceResponse response = callService(baseRq);
 			publishApplicationServiceResponse(response);
 		} catch (InvalidRequestException ex) {
+			BaseOrderRq baseOrderRq = (BaseOrderRq) baseRq;
+			//FIXME: Add line -1 to fix line +2
 			eventPublisher.publish(
-				new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), ex.getReasons())
+					new OrderRejectedEvent(baseOrderRq.getRequestId(), baseOrderRq.getOrderId(), ex.getReasons())
 			);
 		}
 	}
 
-	public void handleDeleteOrder(DeleteOrderRq deleteOrderRq) {
-		try {
-			ApplicationServiceResponse response = callService(deleteOrderRq);
-			publishApplicationServiceResponse(response);
-		} catch (InvalidRequestException ex) {
-			eventPublisher.publish(
-				new OrderRejectedEvent(deleteOrderRq.getRequestId(), deleteOrderRq.getOrderId(), ex.getReasons())
-			);
+	private ApplicationServiceResponse callService(BaseRq req) {
+		if (req instanceof ChangeMatchingStateRq changeMatchingStateRq) {
+			return callChangeStateServices(changeMatchingStateRq);
 		}
-	}
-
-	private ApplicationServiceResponse callService(BaseOrderRq req) {
 		if (req instanceof DeleteOrderRq deleteReq) {
 			return callDeleteServices(deleteReq);
 		}
@@ -69,6 +60,10 @@ public class OrderHandler {
 		return services.deleteOrder(req);
 	}
 
+	private ApplicationServiceResponse callChangeStateServices(ChangeMatchingStateRq req) {
+		return services.changeMatchingState(req);
+	}
+
 	private ApplicationServiceResponse callAddServices(EnterOrderRq req) {
 		if (req.getStopPrice() != 0) {
 			return services.addStopLimitOrder(req);
@@ -90,95 +85,7 @@ public class OrderHandler {
 	}
 
 	private void publishApplicationServiceResponse(ApplicationServiceResponse response) {
-		List<Event> events = createEvents(response);
+		List<Event> events = response.getEvents();
 		events.forEach(event -> eventPublisher.publish(event));
 	}
-
-	private List<Event> createEvents(ApplicationServiceResponse response) {
-		if (response.isTypeDelete()) {
-			return List.of(new OrderDeletedEvent(response.getRequestId(), response.getOrderId()));
-		}
-
-		List<Event> events = createFirstMatchResultEvents(response);
-		events.addAll(createActivatedEvents(response));
-		return events;
-	}
-
-	private List<Event> createFirstMatchResultEvents(ApplicationServiceResponse response) {
-		if (response.isSuccessful(0)) {
-			return createSuccessEvents(response);
-		} else {
-			return createRejectedEvents(response);
-		}
-	}
-
-	private List<Event> createActivatedEvents(ApplicationServiceResponse response) {
-		List<Event> events = new LinkedList<>();
-		int numOfMatchResults = response.getMatchResults().size();
-
-		for (int i = 1; i < numOfMatchResults; i++) {
-			events.add(new OrderActivatedEvent(response.getOrderId(i)));
-			if ((response.hasTrades(i))) {
-				events.add(createExecutedEvent(response.getOrderId(i), response.getTrades(i)));
-			}
-		}
-
-		return events;
-	}
-
-	private List<Event> createSuccessEvents(ApplicationServiceResponse response) {
-		List<Event> events = new LinkedList<>();
-
-		if (response.isTypeAdd()) {
-			events.add(new OrderAcceptedEvent(response.getRequestId(), response.getOrderId()));
-		} else {
-			events.add(new OrderUpdatedEvent(response.getRequestId(), response.getOrderId()));
-		}
-
-		if (response.hasTrades(0)) {
-			events.add(createExecutedEvent(response.getRequestId(), response.getOrderId(), response.getTrades(0)));
-		}
-
-		return events;
-	}
-
-	private List<Event> createRejectedEvents(ApplicationServiceResponse response) {
-		List<Event> events = new LinkedList<>();
-		MatchingOutcome outcome = response.getOutcome(0);
-
-		if (outcome == MatchingOutcome.NOT_ENOUGH_CREDIT) {
-			events.add(
-				new OrderRejectedEvent(
-					response.getRequestId(),
-					response.getOrderId(),
-					List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)
-				)
-			);
-		} else if (outcome == MatchingOutcome.NOT_ENOUGH_POSITIONS) {
-			events.add(
-				new OrderRejectedEvent(
-					response.getRequestId(),
-					response.getOrderId(),
-					List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)
-				)
-			);
-		} else if (outcome == MatchingOutcome.NOT_ENOUGH_EXECUTION) {
-			events.add(
-				new OrderRejectedEvent(
-					response.getRequestId(),
-					response.getOrderId(),
-					List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)
-				)
-			);
-		}
-		return events;
-	}
-
-	private Event createExecutedEvent(long reqId, long orderId, List<Trade> trades) {
-		return new OrderExecutedEvent(reqId, orderId, trades.stream().map(TradeDTO::new).collect(Collectors.toList()));
-	}
-
-	private Event createExecutedEvent(long orderId, List<Trade> trades) {
-		return new OrderExecutedEvent(orderId, trades.stream().map(TradeDTO::new).collect(Collectors.toList()));
-	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
index 77ff3b8..72189bd 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
@@ -26,4 +26,7 @@ public class Message {
 	public static final String STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG = "Stop limit orders can not be iceberg";
 	public static final String INVALID_STOP_LIMIT_UPDATE_PRICE = "This order can not be updated by given stop price.";
 	public static final String UNKNOWN_REQUEST_TYPE = "Unknown request type";
+	public static final String MINIMUM_EXECUTION_IN_AUCTION_STATE = "Orders can not have minimum execution quantity in auction state.";
+	public static final String STOP_PRICE_IN_AUCTION_STATE = "Orders can not have stop price in auction state.";
+	public static final String CAN_NOT_DELETE_SLO_IN_AUCTION_STATE = "Stop limit orders cn not be deleted in auction state";
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
index 0813802..c586756 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
@@ -1,6 +1,7 @@
 package ir.ramtung.tinyme.messaging;
 
 import ir.ramtung.tinyme.domain.service.OrderHandler;
+import ir.ramtung.tinyme.messaging.request.ChangeMatchingStateRq;
 import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import java.util.logging.Logger;
@@ -17,10 +18,13 @@ public class RequestDispatcher {
 		this.orderHandler = orderHandler;
 	}
 
-	@JmsListener(destination = "${requestQueue}", selector = "_type='ir.ramtung.tinyme.messaging.request.EnterOrderRq'")
+	@JmsListener(
+			destination = "${requestQueue}",
+			selector = "_type='ir.ramtung.tinyme.messaging.request.EnterOrderRq'"
+	)
 	public void receiveEnterOrderRq(EnterOrderRq enterOrderRq) {
 		log.info("Received message: " + enterOrderRq);
-		orderHandler.handleEnterOrder(enterOrderRq);
+		orderHandler.handleRq(enterOrderRq);
 	}
 
 	@JmsListener(
@@ -29,6 +33,15 @@ public class RequestDispatcher {
 	)
 	public void receiveDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
 		log.info("Received message: " + deleteOrderRq);
-		orderHandler.handleDeleteOrder(deleteOrderRq);
+		orderHandler.handleRq(deleteOrderRq);
+	}
+
+	@JmsListener(
+			destination = "${requestQueue}",
+			selector = "_type='ir.ramtung.tinyme.messaging.request.ChangeMatchingStateRq'"
+	)
+	public void receiveChangeMatchingStateRq(ChangeMatchingStateRq changeMatchingStateRq) {
+		log.info("Received message: " + changeMatchingStateRq);
+		orderHandler.handleRq(changeMatchingStateRq);
 	}
 }
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OpeningPriceEvent.java
similarity index 63%
rename from TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java
rename to TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OpeningPriceEvent.java
index 3b48365..bd6092e 100644
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OpeningPriceEvent.java
@@ -9,8 +9,8 @@ import lombok.NoArgsConstructor;
 @EqualsAndHashCode(callSuper = false)
 @AllArgsConstructor
 @NoArgsConstructor
-public class OrderAcceptedEvent extends Event {
-
-	private long requestId;
-	private long orderId;
+public class OpeningPriceEvent extends Event {
+    private String securityIsin;
+    private int openingPrice;
+    private int tradableQuantity;
 }
diff --git a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/SecurityStateChangedEvent.java
similarity index 57%
rename from TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java
rename to TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/SecurityStateChangedEvent.java
index 74586ef..fc91868 100644
--- a/TinyME/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/SecurityStateChangedEvent.java
@@ -1,6 +1,6 @@
 package ir.ramtung.tinyme.messaging.event;
 
-import java.util.List;
+import ir.ramtung.tinyme.messaging.request.MatchingState;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -10,9 +10,7 @@ import lombok.NoArgsConstructor;
 @EqualsAndHashCode(callSuper = false)
 @AllArgsConstructor
 @NoArgsConstructor
-public class OrderRejectedEvent extends Event {
-
-	private long requestId;
-	private long orderId;
-	private List<String> errors;
+public class SecurityStateChangedEvent extends Event {
+    private String securityIsin;
+    private MatchingState state;    
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/TradeEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/TradeEvent.java
new file mode 100644
index 0000000..a44e41a
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/TradeEvent.java
@@ -0,0 +1,28 @@
+package ir.ramtung.tinyme.messaging.event;
+
+import ir.ramtung.tinyme.domain.entity.Trade;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+@Data
+@EqualsAndHashCode(callSuper = false)
+@AllArgsConstructor
+@NoArgsConstructor
+public class TradeEvent extends Event {
+    private String securityIsin;
+    private int price;
+    private int quantity;
+    private long buyId;
+    private long sellId;
+
+    public TradeEvent(Trade trade) {
+        super();
+        this.securityIsin = trade.getSecurity().getIsin();
+        this.price = trade.getPrice();
+        this.quantity = trade.getQuantity();
+        this.buyId = trade.getBuy().getOrderId();
+        this.sellId = trade.getSell().getOrderId();
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
index 2227983..eda8abb 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
@@ -12,10 +12,9 @@ import lombok.NoArgsConstructor;
 
 @Getter
 @NoArgsConstructor
-public abstract class BaseOrderRq {
+public abstract class BaseOrderRq extends BaseRq {
 
 	protected long requestId;
-	protected String securityIsin;
 	protected Side side;
 	protected long orderId;
 
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseRq.java
new file mode 100644
index 0000000..682b4ce
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseRq.java
@@ -0,0 +1,8 @@
+package ir.ramtung.tinyme.messaging.request;
+
+import lombok.Getter;
+
+@Getter
+public abstract class BaseRq {
+    protected String securityIsin;
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/ChangeMatchingStateRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/ChangeMatchingStateRq.java
new file mode 100644
index 0000000..1663470
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/ChangeMatchingStateRq.java
@@ -0,0 +1,15 @@
+package ir.ramtung.tinyme.messaging.request;
+
+
+import lombok.Getter;
+
+@Getter
+public class ChangeMatchingStateRq extends BaseRq {
+
+    private final MatchingState targetState;
+
+    public ChangeMatchingStateRq(String securityIsin, MatchingState targetState) {
+        this.securityIsin = securityIsin;
+        this.targetState = targetState;
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/MatchingState.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/MatchingState.java
new file mode 100644
index 0000000..ea1a9cb
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/MatchingState.java
@@ -0,0 +1,8 @@
+package ir.ramtung.tinyme.messaging.request;
+
+public enum MatchingState {
+
+    CONTINUOUS,
+
+    AUCTION
+}
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
index ea4418d..89e9d4f 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
@@ -55,7 +55,7 @@ public class MatcherTest {
 	void new_sell_order_matches_completely_with_part_of_the_first_buy() {
 		Order order = new Order(11, security, Side.SELL, 100, 15600, broker, shareholder);
 		Trade trade = new Trade(security, 15700, 100, orders.get(0), order);
-		List<Trade> trades = matcher.match(order);
+		List<Trade> trades = matcher.continuousMatch(order);
 		assertThat(order.getQuantity()).isEqualTo(0);
 		assertThat(trades).containsExactly(trade);
 		assertThat(security.getOrderBook().getBuyQueue().getFirst().getQuantity()).isEqualTo(204);
@@ -65,7 +65,7 @@ public class MatcherTest {
 	void new_sell_order_matches_partially_with_the_first_buy() {
 		Order order = new Order(11, security, Side.SELL, 500, 15600, broker, shareholder);
 		Trade trade = new Trade(security, 15700, 304, orders.get(0), order);
-		List<Trade> trades = matcher.match(order);
+		List<Trade> trades = matcher.continuousMatch(order);
 		assertThat(order.getQuantity()).isEqualTo(196);
 		assertThat(trades).containsExactly(trade);
 		assertThat(security.getOrderBook().getBuyQueue().getFirst().getOrderId()).isEqualTo(2);
@@ -74,7 +74,7 @@ public class MatcherTest {
 	@Test
 	void new_buy_order_does_not_match() {
 		Order order = new Order(11, security, Side.BUY, 2000, 15500, broker, shareholder);
-		List<Trade> trades = matcher.match(order);
+		List<Trade> trades = matcher.continuousMatch(order);
 		assertThat(order).isEqualTo(order);
 		assertThat(trades).isEmpty();
 	}
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
index e2476c6..f600339 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
@@ -6,14 +6,15 @@ import static org.mockito.Mockito.*;
 import ir.ramtung.tinyme.config.MockedJMSTestConfig;
 import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.service.ApplicationServices;
-import ir.ramtung.tinyme.domain.service.Matcher;
 import ir.ramtung.tinyme.domain.service.OrderHandler;
 import ir.ramtung.tinyme.messaging.EventPublisher;
 import ir.ramtung.tinyme.messaging.Message;
 import ir.ramtung.tinyme.messaging.TradeDTO;
 import ir.ramtung.tinyme.messaging.event.*;
+import ir.ramtung.tinyme.messaging.request.ChangeMatchingStateRq;
 import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import ir.ramtung.tinyme.messaging.request.MatchingState;
 import ir.ramtung.tinyme.repository.BrokerRepository;
 import ir.ramtung.tinyme.repository.SecurityRepository;
 import ir.ramtung.tinyme.repository.ShareholderRepository;
@@ -85,7 +86,7 @@ public class OrderHandlerTest {
 
 	@Test
 	void new_order_invalid_fields() {
-		orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC", -1, null, null, -1, -1, 1, 1, -1, -1));
+		orderHandler.handleRq(EnterOrderRq.createNewOrderRq(0, "ABC", -1, null, null, -1, -1, 1, 1, -1, -1));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors())
@@ -101,7 +102,7 @@ public class OrderHandlerTest {
 
 	@Test
 	void new_order_invalid_repos() {
-		orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "-1", 1, null, Side.BUY, 1, 1, -1, -1, 0, 1));
+		orderHandler.handleRq(EnterOrderRq.createNewOrderRq(0, "-1", 1, null, Side.BUY, 1, 1, -1, -1, 0, 1));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors())
@@ -112,7 +113,7 @@ public class OrderHandlerTest {
 	void new_order_invalid_quantity_and_price_due_to_lot_and_tick_size() {
 		Security security2 = Security.builder().isin("ABC2").lotSize(3).tickSize(3).build();
 		securityRepository.addSecurity(security2);
-		orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC2", 1, null, Side.BUY, 4, 4, 1, 1, 0, 1));
+		orderHandler.handleRq(EnterOrderRq.createNewOrderRq(0, "ABC2", 1, null, Side.BUY, 4, 4, 1, 1, 0, 1));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors())
@@ -125,7 +126,7 @@ public class OrderHandlerTest {
 		broker1.increaseCreditBy(100 * 100);
 		security.getOrderBook().enqueue(inQueueOrder);
 
-		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 2, null, Side.BUY, 1, 1, 1, 1, 0, 0));
+		orderHandler.handleRq(EnterOrderRq.createUpdateOrderRq(0, "ABC", 2, null, Side.BUY, 1, 1, 1, 1, 0, 0));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors()).containsOnly(Message.ORDER_ID_NOT_FOUND);
@@ -137,7 +138,7 @@ public class OrderHandlerTest {
 		broker1.increaseCreditBy(100 * 100);
 		security.getOrderBook().enqueue(inQueueOrder);
 
-		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 1, 0));
+		orderHandler.handleRq(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 1, 0));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors()).containsOnly(Message.INVALID_PEAK_SIZE);
@@ -149,7 +150,7 @@ public class OrderHandlerTest {
 		broker1.increaseCreditBy(100 * 100);
 		security.getOrderBook().enqueue(inQueueOrder);
 
-		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 0));
+		orderHandler.handleRq(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 0));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors()).containsOnly(Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER);
@@ -161,7 +162,7 @@ public class OrderHandlerTest {
 		broker1.increaseCreditBy(100 * 100);
 		security.getOrderBook().enqueue(inQueueOrder);
 
-		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 1));
+		orderHandler.handleRq(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 1));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors()).containsOnly(Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY);
@@ -173,7 +174,7 @@ public class OrderHandlerTest {
 		broker1.increaseCreditBy(100 * 100);
 		security.getOrderBook().enqueue(inQueueOrder);
 
-		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, -1));
+		orderHandler.handleRq(new DeleteOrderRq(1, "ABC", Side.BUY, -1));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors()).containsOnly(Message.INVALID_ORDER_ID);
@@ -185,7 +186,7 @@ public class OrderHandlerTest {
 		broker1.increaseCreditBy(100 * 100);
 		security.getOrderBook().enqueue(inQueueOrder);
 
-		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "-1", null, -1));
+		orderHandler.handleRq(new DeleteOrderRq(1, "-1", null, -1));
 		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
 
 		assertThat(outputEvent.getErrors())
@@ -199,7 +200,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		shareholder.incPosition(security, 9);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -229,7 +230,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		shareholder.incPosition(security, 9);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				1,
 				"ABC",
@@ -255,7 +256,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 
 		broker1.increaseCreditBy(250 - 1);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -284,7 +285,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		shareholder.incPosition(security, 10);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				1,
 				"ABC",
@@ -310,7 +311,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 
 		broker1.increaseCreditBy(300);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -337,7 +338,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 
 		shareholder.incPosition(security, 20);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -365,7 +366,7 @@ public class OrderHandlerTest {
 		shareholder.incPosition(security, 300);
 		security.getOrderBook().enqueue(matchingBuyOrder);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -395,7 +396,7 @@ public class OrderHandlerTest {
 	@Test
 	void new_order_queued_with_no_trade() {
 		shareholder.incPosition(security, 300);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -437,7 +438,7 @@ public class OrderHandlerTest {
 			matchingBuyOrder2,
 			incomingSellOrder.snapshotWithQuantity(700)
 		);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				incomingSellOrder.getSecurity().getIsin(),
@@ -475,10 +476,10 @@ public class OrderHandlerTest {
 
 		EventPublisher mockEventPublisher = mock(EventPublisher.class, withSettings().verboseLogging());
 		OrderHandler myOrderHandler = new OrderHandler(
-			new ApplicationServices(securityRepository, brokerRepository, shareholderRepository, new Matcher()),
+			new ApplicationServices(securityRepository, brokerRepository, shareholderRepository),
 			mockEventPublisher
 		);
-		myOrderHandler.handleEnterOrder(
+		myOrderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				incomingSellOrder.getSecurity().getIsin(),
@@ -503,7 +504,7 @@ public class OrderHandlerTest {
 		Order queuedOrder = new Order(200, security, Side.SELL, 500, 15450, broker1, shareholder);
 		shareholder.incPosition(security, 1000);
 		security.getOrderBook().enqueue(queuedOrder);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				1,
 				"ABC",
@@ -531,7 +532,7 @@ public class OrderHandlerTest {
 		security.getOrderBook().enqueue(matchingOrder);
 		security.getOrderBook().enqueue(beforeUpdate);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				1,
 				"ABC",
@@ -568,7 +569,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		shareholder.incPosition(security, 350);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				1,
 				"ABC",
@@ -606,7 +607,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		shareholder.decPosition(security, 99_500);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -644,7 +645,7 @@ public class OrderHandlerTest {
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		shareholder.decPosition(security, 99_500);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				"ABC",
@@ -675,8 +676,8 @@ public class OrderHandlerTest {
 		shareholder.incPosition(security, 10);
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 
-		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
-		orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
+		orderHandler.handleRq(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
+		orderHandler.handleRq(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
 
 		verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
 		verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
@@ -686,7 +687,7 @@ public class OrderHandlerTest {
 
 	@Test
 	void invalid_stop_limit_price() {
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				2,
 				security.getIsin(),
@@ -704,7 +705,7 @@ public class OrderHandlerTest {
 		);
 		verify(eventPublisher).publish(new OrderRejectedEvent(2, 3, List.of(Message.INVALID_STOP_PRICE)));
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				2,
 				security.getIsin(),
@@ -725,7 +726,7 @@ public class OrderHandlerTest {
 				new OrderRejectedEvent(2, 3, List.of(Message.STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY))
 			);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				2,
 				security.getIsin(),
@@ -751,7 +752,7 @@ public class OrderHandlerTest {
 
 		StopLimitOrder slo = new StopLimitOrder(20, security, Side.BUY, 10, 15, broker1, shareholder, 100);
 		security.getOrderBook().enqueue(slo);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				2,
 				security.getIsin(),
@@ -771,7 +772,7 @@ public class OrderHandlerTest {
 
 		Order order = new Order(21, security, Side.BUY, 10, 15, broker1, shareholder);
 		security.getOrderBook().enqueue(order);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -800,8 +801,8 @@ public class OrderHandlerTest {
 		shareholder.incPosition(security, 10);
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 
-		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
-		orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
+		orderHandler.handleRq(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
+		orderHandler.handleRq(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
 
 		verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
 		verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
@@ -811,7 +812,7 @@ public class OrderHandlerTest {
 		security.getOrderBook().enqueue(new Order(1000, security, Side.SELL, 1, price, broker1, shareholder));
 		broker1.increaseCreditBy(price);
 		shareholder.incPosition(security, 1);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1000,
 				security.getIsin(),
@@ -833,12 +834,12 @@ public class OrderHandlerTest {
 		shareholder.incPosition(security, 85);
 		this.stopLimitOrders =
 			Arrays.asList(
-				new StopLimitOrder(6, security, Side.SELL, 15, 400, broker1, shareholder, 500),
-				new StopLimitOrder(7, security, Side.SELL, 15, 300, broker1, shareholder, 400),
-				new StopLimitOrder(8, security, Side.SELL, 15, 200, broker1, shareholder, 300),
-				new StopLimitOrder(6, security, Side.BUY, 15, 700, broker2, shareholder, 600),
-				new StopLimitOrder(7, security, Side.BUY, 15, 800, broker2, shareholder, 700),
-				new StopLimitOrder(8, security, Side.BUY, 15, 900, broker2, shareholder, 800)
+				new StopLimitOrder(6, security, Side.SELL, 15, 400, broker1, shareholder, 500, 10),
+				new StopLimitOrder(7, security, Side.SELL, 15, 300, broker1, shareholder, 400, 11),
+				new StopLimitOrder(8, security, Side.SELL, 15, 200, broker1, shareholder, 300, 12),
+				new StopLimitOrder(6, security, Side.BUY, 15, 700, broker2, shareholder, 600, 10),
+				new StopLimitOrder(7, security, Side.BUY, 15, 800, broker2, shareholder, 700, 11),
+				new StopLimitOrder(8, security, Side.BUY, 15, 900, broker2, shareholder, 800, 12)
 			);
 		shareholder.incPosition(security, 45);
 		broker2.increaseCreditBy(36000);
@@ -865,11 +866,18 @@ public class OrderHandlerTest {
 		create_stop_limit_scenario();
 		shareholder.incPosition(security, 45);
 
+		List<TradeDTO> limitOrderTradesDto = Arrays.asList(
+			new TradeDTO("ABC", 500, 10, 5, 9),
+			new TradeDTO("ABC", 500, 10, 5, 9),
+			new TradeDTO("ABC", 500, 10, 5, 9),
+			new TradeDTO("ABC", 500, 10, 5, 9),
+			new TradeDTO("ABC", 500, 5, 5, 9)
+		);
 		Trade firstTrade = new Trade(security, 400, 10, stopLimitOrders.get(0), orders.get(3));
 		Trade secondTrade = new Trade(security, 300, 10, stopLimitOrders.get(1), orders.get(2));
 		Trade thirdTrade = new Trade(security, 200, 10, stopLimitOrders.get(2), orders.get(1));
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				security.getIsin(),
@@ -886,14 +894,17 @@ public class OrderHandlerTest {
 			)
 		);
 
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 9));
+		verify(eventPublisher).publish(new OrderExecutedEvent(1, 9, limitOrderTradesDto));
+
 		verify(eventPublisher).publish(new OrderActivatedEvent(6));
-		verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(firstTrade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(10, 6, List.of(new TradeDTO(firstTrade))));
 
 		verify(eventPublisher).publish(new OrderActivatedEvent(7));
-		verify(eventPublisher).publish(new OrderExecutedEvent(7, List.of(new TradeDTO(secondTrade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(11, 7, List.of(new TradeDTO(secondTrade))));
 
 		verify(eventPublisher).publish(new OrderActivatedEvent(8));
-		verify(eventPublisher).publish(new OrderExecutedEvent(8, List.of(new TradeDTO(thirdTrade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(12, 8, List.of(new TradeDTO(thirdTrade))));
 	}
 
 	@Test
@@ -902,11 +913,12 @@ public class OrderHandlerTest {
 
 		broker2.increaseCreditBy(6000);
 
+		TradeDTO limitOrderTradeDto = new TradeDTO(security.getIsin(), 600, 10, 9, 1);
 		Trade firstTrade = new Trade(security, 700, 10, stopLimitOrders.get(3), orders.get(6));
 		Trade secondTrade = new Trade(security, 800, 10, stopLimitOrders.get(4), orders.get(7));
 		Trade thirdTrade = new Trade(security, 900, 10, stopLimitOrders.get(5), orders.get(8));
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				1,
 				security.getIsin(),
@@ -923,14 +935,17 @@ public class OrderHandlerTest {
 			)
 		);
 
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 9));
+		verify(eventPublisher).publish(new OrderExecutedEvent(1, 9, List.of(limitOrderTradeDto)));
+
 		verify(eventPublisher).publish(new OrderActivatedEvent(6));
-		verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(firstTrade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(10, 6, List.of(new TradeDTO(firstTrade))));
 
 		verify(eventPublisher).publish(new OrderActivatedEvent(7));
-		verify(eventPublisher).publish(new OrderExecutedEvent(7, List.of(new TradeDTO(secondTrade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(11, 7, List.of(new TradeDTO(secondTrade))));
 
 		verify(eventPublisher).publish(new OrderActivatedEvent(8));
-		verify(eventPublisher).publish(new OrderExecutedEvent(8, List.of(new TradeDTO(thirdTrade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(12, 8, List.of(new TradeDTO(thirdTrade))));
 	}
 
 	@Test
@@ -964,12 +979,12 @@ public class OrderHandlerTest {
 			200
 		);
 		shareholder.incPosition(security, 500 - 1);
-		orderHandler.handleEnterOrder(orderRq);
+		orderHandler.handleRq(orderRq);
 		OrderRejectedEvent output = captureOrderRejectedEvent();
 		assertThat(output.getErrors()).containsOnly(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS);
 
 		shareholder.incPosition(security, 1);
-		orderHandler.handleEnterOrder(orderRq);
+		orderHandler.handleRq(orderRq);
 		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 3));
 	}
 
@@ -990,12 +1005,12 @@ public class OrderHandlerTest {
 			200
 		);
 		broker1.increaseCreditBy(500 * 250 - 1);
-		orderHandler.handleEnterOrder(orderRq);
+		orderHandler.handleRq(orderRq);
 		OrderRejectedEvent output = captureOrderRejectedEvent();
 		assertThat(output.getErrors()).containsOnly(Message.BUYER_HAS_NOT_ENOUGH_CREDIT);
 
 		broker1.increaseCreditBy(1);
-		orderHandler.handleEnterOrder(orderRq);
+		orderHandler.handleRq(orderRq);
 		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 3));
 	}
 
@@ -1005,7 +1020,7 @@ public class OrderHandlerTest {
 		StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 10, 400, broker1, shareholder, 500);
 		security.getOrderBook().enqueue(order);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -1030,7 +1045,7 @@ public class OrderHandlerTest {
 		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
 		security.getOrderBook().enqueue(order);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -1055,7 +1070,7 @@ public class OrderHandlerTest {
 		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
 		security.getOrderBook().enqueue(order);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -1081,7 +1096,7 @@ public class OrderHandlerTest {
 		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
 		security.getOrderBook().enqueue(order);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -1108,7 +1123,7 @@ public class OrderHandlerTest {
 		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 550);
 		security.getOrderBook().enqueue(order);
 
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -1139,7 +1154,7 @@ public class OrderHandlerTest {
 		security.getOrderBook().enqueue(stopLimitOrder);
 
 		Trade trade = new Trade(security, 600, 1, order, stopLimitOrder);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createUpdateOrderRq(
 				3,
 				security.getIsin(),
@@ -1157,13 +1172,13 @@ public class OrderHandlerTest {
 		);
 		verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
 		verify(eventPublisher).publish(new OrderActivatedEvent(6));
-		verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(trade))));
+		verify(eventPublisher).publish(new OrderExecutedEvent(3, 6, List.of(new TradeDTO(trade))));
 	}
 
 	@Test
 	void new_stop_limit_order_with_submitted_stop_price_no_trade() {
 		broker1.increaseCreditBy(600);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				3,
 				security.getIsin(),
@@ -1194,7 +1209,7 @@ public class OrderHandlerTest {
 		security.getOrderBook().enqueue(stopLimitOrder);
 
 		broker1.increaseCreditBy(600);
-		orderHandler.handleEnterOrder(
+		orderHandler.handleRq(
 			EnterOrderRq.createNewOrderRq(
 				3,
 				security.getIsin(),
@@ -1213,4 +1228,448 @@ public class OrderHandlerTest {
 		verify(eventPublisher).publish(new OrderAcceptedEvent(3, 6));
 		verify(eventPublisher).publish(new OrderActivatedEvent(6));
 	}
+
+	@Test
+	void change_state_without_any_trade_happens() {
+		// CONTINUOUS to CONTINUOUS
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.CONTINUOUS));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.CONTINUOUS));
+
+		// CONTINUOUS to AUCTION
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+
+		reset(eventPublisher);
+
+		// AUCTION to AUCTION
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+
+		// AUCTION to CONTINUOUS
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.CONTINUOUS));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.CONTINUOUS));
+	}
+
+	@Test
+	void add_stop_limit_order_in_auction_state() {
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		broker1.increaseCreditBy(600);
+		orderHandler.handleRq(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				1,
+				600,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				400
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderRejectedEvent(1, 1, List.of(Message.STOP_PRICE_IN_AUCTION_STATE)));
+	}
+
+	@Test
+	void add_min_exec_quantity_order_in_auction_state() {
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		broker1.increaseCreditBy(600);
+		orderHandler.handleRq(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				30,
+				20,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				10,
+				0
+			)
+		);
+
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(1, 1, List.of(Message.MINIMUM_EXECUTION_IN_AUCTION_STATE)));
+	}
+
+	@Test
+	void update_stop_limit_order_in_auction_state() {
+		broker1.increaseCreditBy(600);
+		StopLimitOrder order = new StopLimitOrder(1, security, Side.BUY, 1, 600, broker1, shareholder, 500);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		orderHandler.handleRq(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				1,
+				600,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				200
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderRejectedEvent(1, 1, List.of(Message.STOP_PRICE_IN_AUCTION_STATE)));
+	}
+
+	@Test
+	void update_min_exec_quantity_order_in_auction_state() {
+		broker1.increaseCreditBy(600);
+		Order order = new Order(1, security, Side.BUY, 20, 10, 30, broker1, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		orderHandler.handleRq(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				20,
+				20,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				10,
+				0
+			)
+		);
+
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(1, 1, List.of(Message.MINIMUM_EXECUTION_IN_AUCTION_STATE)));
+	}
+
+	@Test
+	void add_new_order_in_auction_state() {
+		shareholder.incPosition(security, 30);
+		Order order = new Order(2, security, Side.SELL, 30, 0, 20, broker2, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		broker1.increaseCreditBy(600);
+
+		orderHandler.handleRq(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				30,
+				20,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				0
+			)
+		);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 1));
+		verify(eventPublisher).publish(new OpeningPriceEvent(security.getIsin(), 20, 30));
+		verify(eventPublisher, never()).publish(any(OrderExecutedEvent.class));
+	}
+
+	@Test
+	void add_new_iceberg_order_in_auction_state() {
+		broker1.increaseCreditBy(600);
+		Order order = new Order(1, security, Side.BUY, 30, 0, 20, broker1, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		shareholder.incPosition(security, 30);
+
+		orderHandler.handleRq(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.SELL,
+				30,
+				20,
+				broker2.getBrokerId(),
+				shareholder.getShareholderId(),
+				5,
+				0,
+				0
+			)
+		);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 1));
+		verify(eventPublisher).publish(new OpeningPriceEvent(security.getIsin(), 20, 30));
+		verify(eventPublisher, never()).publish(any(OrderExecutedEvent.class));
+	}
+
+	@Test
+	void update_order_in_auction_state() {
+		broker1.increaseCreditBy(600);
+		Order order = new Order(1, security, Side.BUY, 20, 0, 30, broker1, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		shareholder.incPosition(security, 20);
+		order = new Order(2, security, Side.SELL, 10, 0, 10, broker2, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		orderHandler.handleRq(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				security.getIsin(),
+				2,
+				LocalDateTime.now(),
+				Side.SELL,
+				20,
+				30,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderUpdatedEvent(1, 2));
+		verify(eventPublisher).publish(new OpeningPriceEvent(security.getIsin(), 30, 20));
+		verify(eventPublisher, never()).publish(any(OrderActivatedEvent.class));
+	}
+
+	@Test
+	void update_iceberg_order_in_auction_state() {
+		broker1.increaseCreditBy(625);
+		IcebergOrder icebergOrder = new IcebergOrder(1, security, Side.BUY, 10, 0, 20, broker1, shareholder, 10);
+		security.getOrderBook().enqueue(icebergOrder);
+
+		shareholder.incPosition(security, 25);
+		Order order = new Order(2, security, Side.SELL, 25, 0, 25, broker2, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		orderHandler.handleRq(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				security.getIsin(),
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				25,
+				25,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				5,
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderUpdatedEvent(1, 1));
+		verify(eventPublisher).publish(new OpeningPriceEvent(security.getIsin(), 25, 25));
+		verify(eventPublisher, never()).publish(any(OrderActivatedEvent.class));
+	}
+
+	@Test
+	void auction_to_auction_makes_trades_but_does_not_activate_any_stop_limit_order() {
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+		reset(eventPublisher);
+
+		broker1.increaseCreditBy(600);
+		// add a buy order
+		Order orderBuy = new Order(1, security, Side.BUY, 10, 0, 10, broker1, shareholder);
+		security.getOrderBook().enqueue(orderBuy);
+
+		// add slo a buy order
+		StopLimitOrder slo = new StopLimitOrder(2, security, Side.BUY, 10, 25, broker1, shareholder, 35);
+		security.getOrderBook().enqueue(slo);
+
+		shareholder.incPosition(security, 20);
+		// add a sell order
+		Order orderSell = new Order(3, security, Side.SELL, 10, 0, 10, broker2, shareholder);
+		security.getOrderBook().enqueue(orderSell);
+		// add a slo sell order
+		slo = new StopLimitOrder(4, security, Side.SELL, 10, 5, broker1, shareholder, 8);
+		security.getOrderBook().enqueue(slo);
+
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		verify(eventPublisher).publish(new TradeEvent(security.getIsin(), 10, 10, 1, 3));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher, never()).publish(any(OrderActivatedEvent.class));
+	}
+
+	@Test
+	void auction_to_continuous_makes_trades_but_does_not_activate_any_stop_limit_order() {
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+
+		broker1.increaseCreditBy(600);
+		// add a buy order
+		Order orderBuy = new Order(1, security, Side.BUY, 10, 0, 10, broker1, shareholder);
+		security.getOrderBook().enqueue(orderBuy);
+
+		// add slo a buy order
+		StopLimitOrder slo = new StopLimitOrder(2, security, Side.BUY, 10, 25, broker1, shareholder, 35);
+		security.getOrderBook().enqueue(slo);
+
+		shareholder.incPosition(security, 20);
+		// add a sell order
+		Order orderSell = new Order(3, security, Side.SELL, 10, 0, 10, broker2, shareholder);
+		security.getOrderBook().enqueue(orderSell);
+		// add a slo sell order
+		slo = new StopLimitOrder(4, security, Side.SELL, 10, 5, broker1, shareholder, 8);
+		security.getOrderBook().enqueue(slo);
+
+		// change state to continuous
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.CONTINUOUS));
+
+		verify(eventPublisher).publish(new TradeEvent(security.getIsin(), 10, 10, 1, 3));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.CONTINUOUS));
+		verify(eventPublisher, never()).publish(any(OrderActivatedEvent.class));
+		verify(eventPublisher, never()).publish(any(OrderExecutedEvent.class));
+	}
+
+	@Test
+	void auction_to_auction_makes_trades_and_activate_any_stop_limit_order() {
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+		reset(eventPublisher);
+
+		broker1.increaseCreditBy(600);
+		// add a buy order
+		Order orderBuy = new Order(1, security, Side.BUY, 10, 0, 20, broker1, shareholder);
+		security.getOrderBook().enqueue(orderBuy);
+
+		// add slo a buy order
+		StopLimitOrder slo = new StopLimitOrder(2, security, Side.BUY, 10, 30, broker1, shareholder, 15);
+		security.getOrderBook().enqueue(slo);
+
+		shareholder.incPosition(security, 20);
+		// add a sell order
+		Order orderSell = new Order(3, security, Side.SELL, 10, 0, 20, broker2, shareholder);
+		security.getOrderBook().enqueue(orderSell);
+		// add a slo sell order
+		slo = new StopLimitOrder(4, security, Side.SELL, 10, 20, broker1, shareholder, 25);
+		security.getOrderBook().enqueue(slo);
+
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		verify(eventPublisher).publish(new TradeEvent(security.getIsin(), 20, 10, 1, 3));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new OrderActivatedEvent(2));
+		verify(eventPublisher).publish(new OrderActivatedEvent(4));
+		verify(eventPublisher, never()).publish(any(OrderExecutedEvent.class));
+	}
+
+	@Test
+	void auction_to_continuous_makes_trades_and_activate_any_stop_limit_order() {
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+		reset(eventPublisher);
+
+		broker1.increaseCreditBy(600);
+		// add a buy order
+		Order orderBuy = new Order(1, security, Side.BUY, 10, 0, 20, broker1, shareholder);
+		security.getOrderBook().enqueue(orderBuy);
+
+		// add slo a buy order
+		StopLimitOrder sloBuy = new StopLimitOrder(2, security, Side.BUY, 10, 30, broker1, shareholder, 15);
+		security.getOrderBook().enqueue(sloBuy);
+
+		shareholder.incPosition(security, 20);
+		// add a sell order
+		Order orderSell = new Order(3, security, Side.SELL, 10, 0, 20, broker2, shareholder);
+		security.getOrderBook().enqueue(orderSell);
+		// add a slo sell order
+		StopLimitOrder sloSell = new StopLimitOrder(4, security, Side.SELL, 10, 20, broker1, shareholder, 25, 7);
+		security.getOrderBook().enqueue(sloSell);
+
+		// change state to continuous
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.CONTINUOUS));
+
+		verify(eventPublisher).publish(new TradeEvent(security.getIsin(), 20, 10, 1, 3));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.CONTINUOUS));
+		verify(eventPublisher).publish(new OrderActivatedEvent(2));
+		verify(eventPublisher).publish(new OrderActivatedEvent(4));
+
+		Trade trade = new Trade(security, 30, 10, sloBuy, sloSell);
+		verify(eventPublisher).publish(new OrderExecutedEvent(7, 4, List.of(new TradeDTO(trade))));
+	}
+
+	@Test
+	void delete_stop_limit_order_in_auction_state() {
+		broker1.increaseCreditBy(600);
+
+		// add slo a buy order
+		StopLimitOrder sloBuy = new StopLimitOrder(1, security, Side.BUY, 10, 30, broker1, shareholder, 15);
+		security.getOrderBook().enqueue(sloBuy);
+
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+
+		// delete order
+		orderHandler.handleRq(new DeleteOrderRq(1, security.getIsin(), Side.BUY, 1));
+
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(1, 1, List.of(Message.CAN_NOT_DELETE_SLO_IN_AUCTION_STATE)));
+		verify(eventPublisher, never()).publish(any(OrderDeletedEvent.class));
+		verify(eventPublisher, never()).publish(any(OpeningPriceEvent.class));
+	}
+
+	@Test
+	void delete_order_in_auction_state() {
+		// change state to auction
+		orderHandler.handleRq(new ChangeMatchingStateRq(security.getIsin(), MatchingState.AUCTION));
+		verify(eventPublisher).publish(new SecurityStateChangedEvent(security.getIsin(), MatchingState.AUCTION));
+
+		broker1.increaseCreditBy(1000);
+		// add a buy order
+		Order orderBuy = new Order(1, security, Side.BUY, 20, 0, 50, broker1, shareholder);
+		security.getOrderBook().enqueue(orderBuy);
+
+		shareholder.incPosition(security, 30);
+		// add a sell order
+		Order orderSell = new Order(2, security, Side.SELL, 20, 0, 50, broker2, shareholder);
+		security.getOrderBook().enqueue(orderSell);
+		// add an iceberg sell order
+		IcebergOrder icebergOrderSell = new IcebergOrder(3, security, Side.SELL, 10, 0, 20, broker2, shareholder, 5);
+		security.getOrderBook().enqueue(icebergOrderSell);
+
+		orderHandler.handleRq(new DeleteOrderRq(2, security.getIsin(), Side.SELL, 2));
+		verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
+		verify(eventPublisher).publish(new OpeningPriceEvent(security.getIsin(), 550, 0));
+
+		orderHandler.handleRq(new DeleteOrderRq(3, security.getIsin(), Side.SELL, 3));
+		verify(eventPublisher).publish(new OrderDeletedEvent(3, 3));
+		verify(eventPublisher, times(2)).publish(new OpeningPriceEvent(security.getIsin(), 550, 0));
+
+		verify(eventPublisher, never()).publish(any(OrderRejectedEvent.class));
+	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
index 20338cd..b942b83 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
@@ -53,7 +53,7 @@ class SecurityTest {
 	@Test
 	void reducing_quantity_does_not_change_priority() {
 		Order updateOrder = new Order(3, security, Side.BUY, 440, 15450, broker, shareholder);
-		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder));
 		assertThat(security.getOrderBook().getBuyQueue().get(2).getQuantity()).isEqualTo(440);
 		assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
 	}
@@ -61,7 +61,7 @@ class SecurityTest {
 	@Test
 	void increasing_quantity_changes_priority() {
 		Order updateOrder = new Order(3, security, Side.BUY, 450, 15450, broker, shareholder);
-		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder));
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(450);
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
 	}
@@ -69,24 +69,24 @@ class SecurityTest {
 	@Test
 	void changing_price_changes_priority() {
 		Order updateOrder = new Order(1, security, Side.BUY, 300, 15450, broker, shareholder);
-		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder));
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(300);
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getPrice()).isEqualTo(15450);
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(1);
 		assertThat(security.getOrderBook().getBuyQueue().get(0).getOrderId()).isEqualTo(2);
 	}
 
-	@Test
-	void changing_price_causes_trades_to_happen() {
-		Order updateOrder = new Order(6, security, Side.SELL, 350, 15700, broker, shareholder);
-		assertThatNoException()
-			.isThrownBy(() -> assertThat(security.updateOrder(updateOrder, matcher).getFirst().trades()).isNotEmpty());
-	}
+	// @Test
+	// void changing_price_causes_trades_to_happen() {
+	// 	Order updateOrder = new Order(6, security, Side.SELL, 350, 15700, broker, shareholder);
+	// 	assertThatNoException()
+	// 		.isThrownBy(() -> assertThat(security.updateOrder(updateOrder).getFirst().trades()).isNotEmpty());
+	// }
 
 	@Test
 	void updating_non_existing_order_fails() {
 		Order updateOrder = new Order(6, security, Side.BUY, 350, 15700, broker, shareholder);
-		assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.updateOrder(updateOrder));
 	}
 
 	@Test
@@ -116,7 +116,7 @@ class SecurityTest {
 		broker.increaseCreditBy(35_841_250);
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		Order updateOrder = new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 150);
-		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder));
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(150);
 		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
 	}
@@ -136,7 +136,7 @@ class SecurityTest {
 		broker.increaseCreditBy(35_841_250);
 		orders.forEach(order -> security.getOrderBook().enqueue(order));
 		Order updateOrder = new IcebergOrder(3, security, Side.BUY, 300, 15450, broker, shareholder, 100);
-		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder));
 		assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
 	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
index a247d2b..11be199 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
@@ -3,15 +3,20 @@ package ir.ramtung.tinyme.domain.entity;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
+import ir.ramtung.tinyme.domain.entity.security_stats.AuctionStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.ExecuteStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SecurityStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SituationalStats;
+import ir.ramtung.tinyme.domain.entity.security_stats.SituationalStatsType;
+import ir.ramtung.tinyme.domain.entity.security_stats.StateStats;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
-import ir.ramtung.tinyme.domain.service.Matcher;
+
 import java.time.LocalDateTime;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
@@ -28,9 +33,6 @@ public class SecurityTest {
 	private ScenarioGenerator scenarioGenerator;
 	LocalDateTime entryTime = LocalDateTime.of(2001, 9, 11, 2, 14, 0);
 
-	@Autowired
-	private Matcher matcher;
-
 	// --------------------------------------------------------------------------------
 	// Helper classes
 	// --------------------------------------------------------------------------------
@@ -104,14 +106,51 @@ public class SecurityTest {
 			assertThat(actualStopPrice).isEqualTo(stopPrice);
 		}
 
-		private void assertMatchResult(MatchResult result, MatchingOutcome outcome, long orderId, int numOfTrades) {
-			MatchingOutcome actualOutcome = result.outcome();
-			long actualOrderId = result.remainder().getOrderId();
-			int actualNumOfTrades = result.trades().size();
+		private void assertAuctionExecuteStats(ExecuteStats stats, int numOfTrades) {
+			int actualNumOfTrades = stats.getTrades().size();
+			assertThat(actualNumOfTrades).isEqualTo(numOfTrades);
+		}
 
-			assertThat(actualOutcome).isEqualTo(outcome);
+		private void assertContinuousExecuteStats(ExecuteStats stats, long orderId, int numOfTrades) {
+			long actualOrderId = stats.getOrderId();
 			assertThat(actualOrderId).isEqualTo(orderId);
-			assertThat(actualNumOfTrades).isEqualTo(numOfTrades);
+			assertAuctionExecuteStats(stats, numOfTrades);	
+		}
+
+		private void assertAuctionStats(AuctionStats stats, int openingPrice, int tradableQuantity) {
+			int actualOpeningPrice = stats.getOpeningPrice();
+			int acutalTradableQuantity = stats.getTradableQuantity();
+
+			assertThat(actualOpeningPrice).isEqualTo(openingPrice);
+			assertThat(acutalTradableQuantity).isEqualTo(tradableQuantity);
+		}
+
+		private void assertSituationalStats(SituationalStats stats, SituationalStatsType type, long orderId) {
+			SituationalStatsType actualType = stats.getType();
+			long actualOrderId = stats.getOrderId();
+
+			assertThat(actualType).isEqualTo(type);
+			assertThat(actualOrderId).isEqualTo(orderId);
+		}
+
+		private void assertStateStats(StateStats stateStats, SecurityState from, SecurityState to) {
+			SecurityState actualFrom = stateStats.getFrom();
+			SecurityState actualTo = stateStats.getTo();
+
+			assertThat(actualFrom).isEqualTo(from);
+			assertThat(actualTo).isEqualTo(to);
+		}
+
+		private void assertTrade(Trade trade, long sellId, long buyId, int price, int quantity) {
+			long actualSellId = trade.getSell().getOrderId();
+			long actualBuyId = trade.getBuy().getOrderId();
+			int actualPrice = trade.getPrice();
+			int actualQuantity = trade.getQuantity();
+
+			assertThat(actualSellId).isEqualTo(sellId);
+			assertThat(actualBuyId).isEqualTo(buyId);
+			assertThat(actualPrice).isEqualTo(price);
+			assertThat(actualQuantity).isEqualTo(quantity);
 		}
 
 		private void assertOrderInQueue(
@@ -198,12 +237,12 @@ public class SecurityTest {
 			security.deleteOrder(Side.BUY, 8);
 		}
 
-		public MatchResult decrease_sell_order_quantity() {
+		public SecurityResponse decrease_sell_order_quantity() {
 			Order order = new Order(1, security, Side.SELL, 4, 600, sellerBroker, sellerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_ice_order_quantity() {
+		public SecurityResponse decrease_sell_ice_order_quantity() {
 			IcebergOrder order = new IcebergOrder(
 				5,
 				security,
@@ -214,26 +253,26 @@ public class SecurityTest {
 				sellerShareholder,
 				10
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_buy_order_quantity() {
+		public SecurityResponse decrease_buy_order_quantity() {
 			Order order = new Order(3, security, Side.BUY, 7, 300, buyerBroker, buyerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_buy_ice_order_quantity() {
+		public SecurityResponse decrease_buy_ice_order_quantity() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 7, 500, buyerBroker, buyerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_sell_order_quantity() {
+		public SecurityResponse increase_sell_order_quantity() {
 			Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 5);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_sell_ice_order_quantity() {
+		public SecurityResponse increase_sell_ice_order_quantity() {
 			IcebergOrder order = new IcebergOrder(
 				5,
 				security,
@@ -245,15 +284,15 @@ public class SecurityTest {
 				10
 			);
 			sellerShareholder.incPosition(security, 15);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_sell_order_quantity_but_not_enough_position() {
+		public SecurityResponse increase_sell_order_quantity_but_not_enough_position() {
 			Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_sell_ice_order_quantity_but_not_enough_position() {
+		public SecurityResponse increase_sell_ice_order_quantity_but_not_enough_position() {
 			IcebergOrder order = new IcebergOrder(
 				5,
 				security,
@@ -264,79 +303,79 @@ public class SecurityTest {
 				sellerShareholder,
 				10
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_quantity() {
+		public SecurityResponse increase_buy_order_quantity() {
 			Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(6000);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_quantity() {
+		public SecurityResponse increase_buy_ice_order_quantity() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(7500);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_quantity_but_not_enough_credit() {
+		public SecurityResponse increase_buy_order_quantity_but_not_enough_credit() {
 			Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_quantity_but_not_enough_credit() {
+		public SecurityResponse increase_buy_ice_order_quantity_but_not_enough_credit() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_order_price_no_trading_happens() {
+		public SecurityResponse decrease_sell_order_price_no_trading_happens() {
 			Order order = new Order(3, security, Side.SELL, 10, 650, sellerBroker, sellerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_ice_order_price_no_trading_happens() {
+		public SecurityResponse decrease_sell_ice_order_price_no_trading_happens() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 600, sellerBroker, sellerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_order_price_and_completely_traded() {
+		public SecurityResponse decrease_sell_order_price_and_completely_traded() {
 			Order order = new Order(3, security, Side.SELL, 10, 450, sellerBroker, sellerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_ice_order_price_and_completely_traded() {
+		public SecurityResponse decrease_sell_ice_order_price_and_completely_traded() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 450, sellerBroker, sellerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_order_price_and_partially_traded() {
+		public SecurityResponse decrease_sell_order_price_and_partially_traded() {
 			Order order = new Order(3, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 40);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_sell_ice_order_price_and_partially_traded() {
+		public SecurityResponse decrease_sell_ice_order_price_and_partially_traded() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder, 10);
 			sellerShareholder.incPosition(security, 5);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_buy_order_price() {
+		public SecurityResponse decrease_buy_order_price() {
 			Order order = new Order(3, security, Side.BUY, 10, 150, buyerBroker, buyerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_buy_ice_order_price() {
+		public SecurityResponse decrease_buy_ice_order_price() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 200, buyerBroker, buyerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_sell_order_price() {
+		public SecurityResponse increase_sell_order_price() {
 			Order order = new Order(3, security, Side.SELL, 10, 950, sellerBroker, sellerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_sell_ice_order_price() {
+		public SecurityResponse increase_sell_ice_order_price() {
 			IcebergOrder order = new IcebergOrder(
 				5,
 				security,
@@ -347,138 +386,138 @@ public class SecurityTest {
 				sellerShareholder,
 				10
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_price_no_trading_happens() {
+		public SecurityResponse increase_buy_order_price_no_trading_happens() {
 			Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(1500);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_price_no_trading_happens() {
+		public SecurityResponse increase_buy_ice_order_price_no_trading_happens() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(2250);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_price_no_trading_happens_and_not_enough_credit() {
+		public SecurityResponse increase_buy_order_price_no_trading_happens_and_not_enough_credit() {
 			Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit() {
+		public SecurityResponse increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_price_and_completely_traded() {
+		public SecurityResponse increase_buy_order_price_and_completely_traded() {
 			Order order = new Order(2, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(5000);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_price_and_completely_traded() {
+		public SecurityResponse increase_buy_ice_order_price_and_completely_traded() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 1000, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(12500);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_price_and_partially_traded() {
+		public SecurityResponse increase_buy_order_price_and_partially_traded() {
 			Order order = new Order(3, security, Side.BUY, 25, 700, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(13500);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_price_and_partially_traded() {
+		public SecurityResponse increase_buy_ice_order_price_and_partially_traded() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(80000);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_order_price_and_trade_happens_but_not_enough_credit() {
+		public SecurityResponse increase_buy_order_price_and_trade_happens_but_not_enough_credit() {
 			Order order = new Order(3, security, Side.BUY, 25, 800, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(13500);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback() {
+		public SecurityResponse increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(57000);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult add_sell_order_no_trades_happens() {
+		public SecurityResponse add_sell_order_no_trades_happens() {
 			Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 15);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_no_trades_happens() {
+		public SecurityResponse add_sell_ice_order_no_trades_happens() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
 			sellerShareholder.incPosition(security, 20);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_and_not_enough_position() {
+		public SecurityResponse add_sell_order_and_not_enough_position() {
 			Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_and_not_enough_position() {
+		public SecurityResponse add_sell_ice_order_and_not_enough_position() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_and_completely_traded() {
+		public SecurityResponse add_sell_order_and_completely_traded() {
 			Order order = new Order(8, security, Side.SELL, 13, 400, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 13);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_and_completely_traded() {
+		public SecurityResponse add_sell_ice_order_and_completely_traded() {
 			IcebergOrder order = new IcebergOrder(8, security, Side.SELL, 67, 100, sellerBroker, sellerShareholder, 9);
 			sellerShareholder.incPosition(security, 67);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_and_partially_traded() {
+		public SecurityResponse add_sell_order_and_partially_traded() {
 			Order order = new Order(7, security, Side.SELL, 60, 500, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 60);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
+		public SecurityResponse add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
 			IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 3);
 			sellerShareholder.incPosition(security, 60);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
+		public SecurityResponse add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
 			IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 7);
 			sellerShareholder.incPosition(security, 60);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_matches_with_all_buyer_queue_and_finished() {
+		public SecurityResponse add_sell_order_matches_with_all_buyer_queue_and_finished() {
 			Order order = new Order(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 85);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_finished() {
+		public SecurityResponse add_sell_ice_order_matches_with_all_buyer_queue_and_finished() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder, 10);
 			sellerShareholder.incPosition(security, 85);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_matches_with_all_buyer_queue_and_not_finished() {
+		public SecurityResponse add_sell_order_matches_with_all_buyer_queue_and_not_finished() {
 			Order order = new Order(6, security, Side.SELL, 120, 100, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 120);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished() {
+		public SecurityResponse add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -490,16 +529,16 @@ public class SecurityTest {
 				10
 			);
 			sellerShareholder.incPosition(security, 100);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_with_min_execution_quantity_and_next_go_to_queue() {
+		public SecurityResponse add_sell_order_with_min_execution_quantity_and_next_go_to_queue() {
 			Order order = new Order(6, security, Side.SELL, 50, 10, 500, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 50);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
+		public SecurityResponse add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -512,16 +551,16 @@ public class SecurityTest {
 				10
 			);
 			sellerShareholder.incPosition(security, 50);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_not_enough_execution_cause_rollback() {
+		public SecurityResponse add_sell_order_not_enough_execution_cause_rollback() {
 			Order order = new Order(6, security, Side.SELL, 60, 50, 500, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 60);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_not_enough_execution_cause_rollback() {
+		public SecurityResponse add_sell_ice_order_not_enough_execution_cause_rollback() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -534,16 +573,16 @@ public class SecurityTest {
 				10
 			);
 			sellerShareholder.incPosition(security, 100);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_quantity_is_equal_to_min_execution_quantity() {
+		public SecurityResponse add_sell_order_quantity_is_equal_to_min_execution_quantity() {
 			Order order = new Order(6, security, Side.SELL, 50, 50, 300, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 50);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_ice_order_quantity_is_equal_to_min_execution_quantity() {
+		public SecurityResponse add_sell_ice_order_quantity_is_equal_to_min_execution_quantity() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -556,106 +595,106 @@ public class SecurityTest {
 				10
 			);
 			sellerShareholder.incPosition(security, 50);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_no_trades_happens() {
+		public SecurityResponse add_buy_order_no_trades_happens() {
 			Order order = new Order(6, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(6600);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_no_trades_happens() {
+		public SecurityResponse add_buy_ice_order_no_trades_happens() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
 			buyerBroker.increaseCreditBy(2250);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_but_not_enough_credit() {
+		public SecurityResponse add_buy_order_but_not_enough_credit() {
 			Order order = new Order(10, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(6000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_but_not_enough_credit() {
+		public SecurityResponse add_buy_ice_order_but_not_enough_credit() {
 			IcebergOrder order = new IcebergOrder(10, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
 			buyerBroker.increaseCreditBy(2000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_and_completely_traded() {
+		public SecurityResponse add_buy_order_and_completely_traded() {
 			Order order = new Order(8, security, Side.BUY, 13, 700, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(8100);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_and_completely_traded() {
+		public SecurityResponse add_buy_ice_order_and_completely_traded() {
 			IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 52, 1100, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(42000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_and_partially_traded() {
+		public SecurityResponse add_buy_order_and_partially_traded() {
 			Order order = new Order(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(7800);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
+		public SecurityResponse add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder, 2);
 			buyerBroker.increaseCreditBy(7800);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
+		public SecurityResponse add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 14, 600, buyerBroker, buyerShareholder, 5);
 			buyerBroker.increaseCreditBy(8400);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_not_enough_credit_causes_rollback() {
+		public SecurityResponse add_buy_order_not_enough_credit_causes_rollback() {
 			Order order = new Order(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(9000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_not_enough_credit_causes_rollback() {
+		public SecurityResponse add_buy_ice_order_not_enough_credit_causes_rollback() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(78000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_matches_with_all_seller_queue_and_finished() {
+		public SecurityResponse add_buy_order_matches_with_all_seller_queue_and_finished() {
 			Order order = new Order(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(75000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_finished() {
+		public SecurityResponse add_buy_ice_order_matches_with_all_seller_queue_and_finished() {
 			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(75000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_matches_with_all_seller_queue_and_not_finished() {
+		public SecurityResponse add_buy_order_matches_with_all_seller_queue_and_not_finished() {
 			Order order = new Order(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(90000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_not_finished() {
+		public SecurityResponse add_buy_ice_order_matches_with_all_seller_queue_and_not_finished() {
 			IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder, 10);
 			buyerBroker.increaseCreditBy(90000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_with_min_execution_quantity_and_next_go_to_queue() {
+		public SecurityResponse add_buy_order_with_min_execution_quantity_and_next_go_to_queue() {
 			Order order = new Order(6, security, Side.BUY, 22, 17, 700, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(14400);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
+		public SecurityResponse add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -668,16 +707,16 @@ public class SecurityTest {
 				10
 			);
 			buyerBroker.increaseCreditBy(21400);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_not_enough_execution_cause_rollback() {
+		public SecurityResponse add_buy_order_not_enough_execution_cause_rollback() {
 			Order order = new Order(6, security, Side.BUY, 60, 50, 600, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(36000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_not_enough_execution_cause_rollback() {
+		public SecurityResponse add_buy_ice_order_not_enough_execution_cause_rollback() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -690,16 +729,16 @@ public class SecurityTest {
 				10
 			);
 			buyerBroker.increaseCreditBy(80000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_order_quantity_is_equal_to_min_execution_quantity() {
+		public SecurityResponse add_buy_order_quantity_is_equal_to_min_execution_quantity() {
 			Order order = new Order(6, security, Side.BUY, 40, 40, 1000, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(40000);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_ice_order_quantity_is_equal_to_min_execution_quantity() {
+		public SecurityResponse add_buy_ice_order_quantity_is_equal_to_min_execution_quantity() {
 			IcebergOrder order = new IcebergOrder(
 				6,
 				security,
@@ -712,7 +751,7 @@ public class SecurityTest {
 				10
 			);
 			buyerBroker.increaseCreditBy(14600);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
 		public void add_two_buy_orders_with_same_price() {
@@ -740,8 +779,8 @@ public class SecurityTest {
 			);
 
 			buyerBroker.increaseCreditBy(6000);
-			security.addNewOrder(order1, matcher);
-			security.addNewOrder(order2, matcher);
+			security.addNewOrder(order1);
+			security.addNewOrder(order2);
 		}
 
 		public void add_two_buy_ice_orders_with_same_price() {
@@ -771,8 +810,8 @@ public class SecurityTest {
 			);
 
 			buyerBroker.increaseCreditBy(6000);
-			security.addNewOrder(order1, matcher);
-			security.addNewOrder(order2, matcher);
+			security.addNewOrder(order1);
+			security.addNewOrder(order2);
 		}
 
 		public void add_two_sell_orders_with_same_price() {
@@ -800,8 +839,8 @@ public class SecurityTest {
 			);
 
 			sellerShareholder.incPosition(security, 20);
-			security.addNewOrder(order1, matcher);
-			security.addNewOrder(order2, matcher);
+			security.addNewOrder(order1);
+			security.addNewOrder(order2);
 		}
 
 		public void add_two_sell_ice_orders_with_same_price() {
@@ -831,45 +870,45 @@ public class SecurityTest {
 			);
 
 			sellerShareholder.incPosition(security, 20);
-			security.addNewOrder(order1, matcher);
-			security.addNewOrder(order2, matcher);
+			security.addNewOrder(order1);
+			security.addNewOrder(order2);
 		}
 
-		public MatchResult add_sell_order_causes_rollback_for_buy_orders_with_same_price() {
+		public SecurityResponse add_sell_order_causes_rollback_for_buy_orders_with_same_price() {
 			this.add_two_buy_orders_with_same_price();
 			Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 300);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price() {
+		public SecurityResponse add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price() {
 			this.add_two_buy_ice_orders_with_same_price();
 			Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 300);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult change_buy_order_price_and_equals_it_with_another_order() {
+		public SecurityResponse change_buy_order_price_and_equals_it_with_another_order() {
 			Order order = new Order(4, security, Side.BUY, 10, 200, buyerBroker, buyerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult change_sell_order_price_and_equals_it_with_another_order() {
+		public SecurityResponse change_sell_order_price_and_equals_it_with_another_order() {
 			Order order = new Order(4, security, Side.SELL, 10, 700, sellerBroker, sellerShareholder);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult change_buy_ice_order_price_and_equals_it_with_another_order() {
+		public SecurityResponse change_buy_ice_order_price_and_equals_it_with_another_order() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 300, buyerBroker, buyerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult change_sell_ice_order_price_and_equals_it_with_another_order() {
+		public SecurityResponse change_sell_ice_order_price_and_equals_it_with_another_order() {
 			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 700, sellerBroker, sellerShareholder, 10);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult add_sell_stop_limit_order_but_not_enough_position() {
+		public SecurityResponse add_sell_stop_limit_order_but_not_enough_position() {
 			StopLimitOrder order = new StopLimitOrder(
 				6,
 				security,
@@ -880,10 +919,10 @@ public class SecurityTest {
 				sellerShareholder,
 				525
 			);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult add_buy_stop_limit_order_but_not_enough_credit() {
+		public SecurityResponse add_buy_stop_limit_order_but_not_enough_credit() {
 			StopLimitOrder order = new StopLimitOrder(
 				6,
 				security,
@@ -894,7 +933,7 @@ public class SecurityTest {
 				buyerShareholder,
 				575
 			);
-			return security.addNewOrder(order, matcher).getFirst();
+			return security.addNewOrder(order);
 		}
 
 		public void add_three_stop_limit_order_both_buy_and_sell() {
@@ -908,41 +947,41 @@ public class SecurityTest {
 			);
 			sellerShareholder.incPosition(security, 45);
 			buyerBroker.increaseCreditBy(36000);
-			orders.forEach(order -> security.addNewOrder(order, matcher));
+			orders.forEach(order -> security.addNewOrder(order));
 		}
 
-		public List<MatchResult> new_sell_order_activate_all_sell_stop_limit_orders() {
+		public SecurityResponse new_sell_order_activate_all_sell_stop_limit_orders() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			Order order = new Order(9, security, Side.SELL, 45, 500, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 45);
-			return security.addNewOrder(order, matcher);
+			return security.addNewOrder(order);
 		}
 
-		public List<MatchResult> new_buy_order_activate_all_buy_stop_limit_orders() {
+		public SecurityResponse new_buy_order_activate_all_buy_stop_limit_orders() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			Order order = new Order(9, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
 			buyerBroker.increaseCreditBy(6000);
-			return security.addNewOrder(order, matcher);
+			return security.addNewOrder(order);
 		}
 
-		public List<MatchResult> new_sell_order_activate_one_sell_stop_limit_order() {
+		public SecurityResponse new_sell_order_activate_one_sell_stop_limit_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			Order order = new Order(9, security, Side.SELL, 30, 500, sellerBroker, sellerShareholder);
 			sellerShareholder.incPosition(security, 30);
-			return security.addNewOrder(order, matcher);
+			return security.addNewOrder(order);
 		}
 
-		public List<MatchResult> new_buy_order_activate_one_buy_stop_limit_order() {
+		public SecurityResponse new_buy_order_activate_one_buy_stop_limit_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			Order order1 = new Order(10, security, Side.SELL, 10, 600, sellerBroker, sellerShareholder);
 			Order order2 = new Order(9, security, Side.BUY, 5, 600, buyerBroker, buyerShareholder);
 			sellerShareholder.incPosition(security, 10);
 			buyerBroker.increaseCreditBy(3000);
-			security.addNewOrder(order1, matcher);
-			return security.addNewOrder(order2, matcher);
+			security.addNewOrder(order1);
+			return security.addNewOrder(order2);
 		}
 
-		public List<MatchResult> new_sell_stop_limit_order_and_active_at_the_first() {
+		public SecurityResponse new_sell_stop_limit_order_and_active_at_the_first() {
 			StopLimitOrder order = new StopLimitOrder(
 				6,
 				security,
@@ -954,10 +993,10 @@ public class SecurityTest {
 				600
 			);
 			sellerShareholder.incPosition(security, 10);
-			return security.addNewOrder(order, matcher);
+			return security.addNewOrder(order);
 		}
 
-		public List<MatchResult> new_buy_stop_limit_order_and_active_at_the_first() {
+		public SecurityResponse new_buy_stop_limit_order_and_active_at_the_first() {
 			StopLimitOrder order = new StopLimitOrder(
 				6,
 				security,
@@ -969,10 +1008,10 @@ public class SecurityTest {
 				500
 			);
 			buyerBroker.increaseCreditBy(2100);
-			return security.addNewOrder(order, matcher);
+			return security.addNewOrder(order);
 		}
 
-		public MatchResult decrease_price_stop_limit_sell_order() {
+		public SecurityResponse decrease_price_stop_limit_sell_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -984,10 +1023,10 @@ public class SecurityTest {
 				sellerShareholder,
 				500
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_price_stop_limit_sell_order() {
+		public SecurityResponse increase_price_stop_limit_sell_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -999,10 +1038,10 @@ public class SecurityTest {
 				sellerShareholder,
 				500
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_quantity_stop_limit_sell_order() {
+		public SecurityResponse decrease_quantity_stop_limit_sell_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1014,10 +1053,10 @@ public class SecurityTest {
 				sellerShareholder,
 				500
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_quantity_stop_limit_sell_order() {
+		public SecurityResponse increase_quantity_stop_limit_sell_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1030,10 +1069,10 @@ public class SecurityTest {
 				500
 			);
 			sellerShareholder.incPosition(security, 5);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_quantity_stop_limit_sell_order_and_not_enough_position() {
+		public SecurityResponse increase_quantity_stop_limit_sell_order_and_not_enough_position() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1045,10 +1084,10 @@ public class SecurityTest {
 				sellerShareholder,
 				500
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_stop_price_stop_limit_sell_order() {
+		public SecurityResponse decrease_stop_price_stop_limit_sell_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1060,10 +1099,10 @@ public class SecurityTest {
 				sellerShareholder,
 				350
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_stop_price_stop_limit_sell_order_and_not_activated() {
+		public SecurityResponse increase_stop_price_stop_limit_sell_order_and_not_activated() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1075,10 +1114,10 @@ public class SecurityTest {
 				sellerShareholder,
 				525
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public List<MatchResult> increase_stop_price_stop_limit_sell_order_and_activated() {
+		public SecurityResponse increase_stop_price_stop_limit_sell_order_and_activated() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1090,10 +1129,10 @@ public class SecurityTest {
 				sellerShareholder,
 				555
 			);
-			return security.updateOrder(order, matcher);
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_price_stop_limit_buy_order() {
+		public SecurityResponse decrease_price_stop_limit_buy_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1105,10 +1144,10 @@ public class SecurityTest {
 				buyerShareholder,
 				600
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_price_stop_limit_buy_order() {
+		public SecurityResponse increase_price_stop_limit_buy_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1121,10 +1160,10 @@ public class SecurityTest {
 				600
 			);
 			buyerBroker.increaseCreditBy(750);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_price_stop_limit_buy_order_and_not_enough_credit() {
+		public SecurityResponse increase_price_stop_limit_buy_order_and_not_enough_credit() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1136,10 +1175,10 @@ public class SecurityTest {
 				buyerShareholder,
 				600
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_quantity_stop_limit_buy_order() {
+		public SecurityResponse decrease_quantity_stop_limit_buy_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1151,10 +1190,10 @@ public class SecurityTest {
 				buyerShareholder,
 				600
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_quantity_stop_limit_buy_order() {
+		public SecurityResponse increase_quantity_stop_limit_buy_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1167,10 +1206,10 @@ public class SecurityTest {
 				600
 			);
 			buyerBroker.increaseCreditBy(3500);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_quantity_stop_limit_buy_order_and_not_enough_credit() {
+		public SecurityResponse increase_quantity_stop_limit_buy_order_and_not_enough_credit() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1182,10 +1221,10 @@ public class SecurityTest {
 				buyerShareholder,
 				600
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public MatchResult decrease_stop_price_stop_limit_buy_order_and_not_activated() {
+		public SecurityResponse decrease_stop_price_stop_limit_buy_order_and_not_activated() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				7,
@@ -1197,10 +1236,10 @@ public class SecurityTest {
 				buyerShareholder,
 				575
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
-		public List<MatchResult> decrease_stop_price_stop_limit_buy_order_and_activated() {
+		public SecurityResponse decrease_stop_price_stop_limit_buy_order_and_activated() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1212,10 +1251,10 @@ public class SecurityTest {
 				buyerShareholder,
 				500
 			);
-			return security.updateOrder(order, matcher);
+			return security.updateOrder(order);
 		}
 
-		public MatchResult increase_stop_price_stop_limit_buy_order() {
+		public SecurityResponse increase_stop_price_stop_limit_buy_order() {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			StopLimitOrder order = new StopLimitOrder(
 				6,
@@ -1227,7 +1266,7 @@ public class SecurityTest {
 				buyerShareholder,
 				750
 			);
-			return security.updateOrder(order, matcher).getFirst();
+			return security.updateOrder(order);
 		}
 
 		public void delete_stop_limit_sell_order() {
@@ -1239,6 +1278,175 @@ public class SecurityTest {
 			this.add_three_stop_limit_order_both_buy_and_sell();
 			security.deleteOrder(Side.BUY, 7);
 		}
+
+		public SecurityResponse delete_buy_order_in_auction_state() {
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.deleteOrder(Side.BUY, 3);
+		}
+
+		public SecurityResponse delete_sell_order_in_auction_state() {
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.deleteOrder(Side.SELL, 3);
+		}
+
+		public SecurityResponse add_sell_order_in_auction_state_but_not_enough_position() {
+			Order order = new Order(6, security, Side.SELL, 10, 575, sellerBroker, sellerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.addNewOrder(order);
+		}
+
+		public SecurityResponse add_sell_order_in_auction_state() {
+			Order order = new Order(6, security, Side.SELL, 10, 100, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 10);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.addNewOrder(order);
+		}
+
+		public SecurityResponse add_buy_order_in_auction_state_but_not_enough_credit() {
+			Order order = new Order(6, security, Side.BUY, 10, 525, buyerBroker, buyerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.addNewOrder(order);
+		}
+
+		public SecurityResponse add_buy_order_in_auction_state() {
+			Order order = new Order(10, security, Side.BUY, 25, 750, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(18750);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.addNewOrder(order);
+		}
+
+		public SecurityResponse increase_sell_order_price_in_auction_state() {
+			Order order = new Order(1, security, Side.SELL, 10, 750, sellerBroker, sellerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse decrease_sell_order_price_in_auction_state() {
+			Order order = new Order(1, security, Side.SELL, 10, 300, sellerBroker, sellerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse increase_sell_order_quantity_in_auction_state_but_not_enough_position() {
+			Order order = new Order(1, security, Side.SELL, 15, 600, sellerBroker, sellerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse increase_sell_order_quantity_in_auction_state() {
+			Order order = new Order(1, security, Side.SELL, 15, 600, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 5);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse decrease_sell_order_quantity_in_auction_state() {
+			Order order = new Order(1, security, Side.SELL, 5, 600, sellerBroker, sellerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse increase_buy_order_price_in_auction_state_but_not_enough_credit() {
+			Order order = new Order(1, security, Side.BUY, 10, 200, buyerBroker, buyerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse increase_buy_order_price_in_auction_state() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 820, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(14400);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse decrease_buy_order_price_in_auction_state() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 400, buyerBroker, buyerShareholder, 10);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse increase_buy_order_quantity_in_auction_state_but_not_enough_credit() {
+			Order order = new Order(3, security, Side.BUY, 20, 300, buyerBroker, buyerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse increase_buy_order_quantity_in_auction_state() {
+			Order sellOrderToAdd = new Order(6, security, Side.SELL, 100, 250, sellerBroker, sellerShareholder);
+			Order buyOrderToUpdate = new Order(3, security, Side.BUY, 20, 300, buyerBroker, buyerShareholder);
+			sellerShareholder.incPosition(security, 100);
+			buyerBroker.increaseCreditBy(3000);
+			security.changeMatchingState(SecurityState.AUCTION);
+			security.addNewOrder(sellOrderToAdd);
+			return security.updateOrder(buyOrderToUpdate);
+		}
+
+		public SecurityResponse decrease_buy_order_quantity_in_auction_state() {
+			Order order = new Order(4, security, Side.BUY, 5, 400, buyerBroker, buyerShareholder);
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.updateOrder(order);
+		}
+
+		public SecurityResponse change_security_state_from_continuous_to_auction() {
+			return security.changeMatchingState(SecurityState.AUCTION);
+		}
+
+		public SecurityResponse change_security_state_from_continuous_to_continuous() {
+			return security.changeMatchingState(SecurityState.CONTINUOUS);
+		}
+
+		public SecurityResponse change_security_state_from_auction_to_continuous_with_no_trade() {
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.changeMatchingState(SecurityState.CONTINUOUS);
+		}
+
+		public SecurityResponse change_security_state_from_auction_to_auction_with_no_trade() {
+			security.changeMatchingState(SecurityState.AUCTION);
+			return security.changeMatchingState(SecurityState.AUCTION);
+		}
+
+		private void change_state_to_auction_and_add_order_for_each_side() {
+			security.changeMatchingState(SecurityState.AUCTION);
+			List<Order> orders = Arrays.asList(
+				new Order(10, security, Side.BUY, 15, 500, buyerBroker, buyerShareholder, entryTime.plusNanos(1)),	
+				new IcebergOrder(11, security, Side.BUY, 35, 0, 1000, buyerBroker, buyerShareholder, entryTime, 10),	
+				new Order(12, security, Side.BUY, 50, 1200, buyerBroker, buyerShareholder, entryTime),
+				new Order(13, security, Side.SELL, 30, 500, sellerBroker, sellerShareholder, entryTime),	
+				new Order(14, security, Side.SELL, 15, 1100, sellerBroker, sellerShareholder, entryTime),
+				new Order(15, security, Side.SELL, 15, 1000, sellerBroker, sellerShareholder, entryTime.plusNanos(1))
+			);
+			buyerBroker.increaseCreditBy(102_500);
+			sellerShareholder.incPosition(security, 60);
+			orders.forEach(order -> security.addNewOrder(order));
+		}
+
+		public SecurityResponse change_security_state_from_auction_to_continuous_with_trades() {
+			change_state_to_auction_and_add_order_for_each_side();
+			return security.changeMatchingState(SecurityState.CONTINUOUS);
+		}
+
+		public SecurityResponse change_security_state_from_auction_to_auction_with_trades() {
+			change_state_to_auction_and_add_order_for_each_side();
+			return security.changeMatchingState(SecurityState.AUCTION);
+		}
+
+		public SecurityResponse change_security_state_from_auction_to_continuous_with_trades_and_active_some_order() {
+			add_three_stop_limit_order_both_buy_and_sell();
+			Order newSlo = new StopLimitOrder(9, security, Side.BUY, 5, 1000, buyerBroker, buyerShareholder, 900);
+			buyerBroker.increaseCreditBy(5000);
+			security.addNewOrder(newSlo);
+			change_state_to_auction_and_add_order_for_each_side();
+			return security.changeMatchingState(SecurityState.CONTINUOUS);
+		}
+
+		public SecurityResponse change_security_state_from_auction_to_auction_with_trades_and_active_some_order() {
+			add_three_stop_limit_order_both_buy_and_sell();
+			Order newSlo = new StopLimitOrder(9, security, Side.BUY, 5, 1000, buyerBroker, buyerShareholder, 900);
+			buyerBroker.increaseCreditBy(5000);
+			security.addNewOrder(newSlo);
+			change_state_to_auction_and_add_order_for_each_side();
+			return security.changeMatchingState(SecurityState.AUCTION);
+		}
 	}
 
 	// --------------------------------------------------------------------------------
@@ -1511,8 +1719,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1547,8 +1756,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_ice_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_ice_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_ice_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1583,8 +1793,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_buy_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_buy_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_buy_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1620,8 +1831,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_buy_ice_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_buy_ice_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_buy_ice_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1657,8 +1869,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_sell_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_sell_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_sell_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1694,8 +1907,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_sell_ice_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_sell_ice_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);	
 	}
 
 	@Test
@@ -1731,8 +1945,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_sell_order_quantity_but_not_enough_position_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+		SecurityResponse response = scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);	
 	}
 
 	@Test
@@ -1767,8 +1982,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+		SecurityResponse response = scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
 	}
 
 	@Test
@@ -1803,8 +2019,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1839,8 +2056,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1875,8 +2093,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_quantity_but_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -1911,8 +2130,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -1949,8 +2169,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_order_price_no_trading_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -1985,8 +2206,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_ice_order_price_no_trading_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2021,8 +2243,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_order_price_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2067,8 +2290,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_ice_order_price_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2113,8 +2337,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_order_price_and_partially_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2159,8 +2384,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_sell_ice_order_price_and_partially_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2205,8 +2431,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_buy_order_price_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_buy_order_price();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_buy_order_price();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2242,8 +2469,9 @@ public class SecurityTest {
 
 	@Test
 	public void decrease_buy_ice_order_price_and_check_match_result() {
-		MatchResult res = scenarioGenerator.decrease_buy_ice_order_price();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.decrease_buy_ice_order_price();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2279,8 +2507,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_sell_order_price_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_sell_order_price();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_sell_order_price();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2315,8 +2544,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_sell_ice_order_price_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_sell_ice_order_price();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_sell_ice_order_price();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2351,8 +2581,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_price_no_trading_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2387,8 +2618,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_price_no_trading_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2423,8 +2655,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -2459,8 +2692,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -2495,8 +2729,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_price_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_price_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2542,8 +2777,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_price_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2589,8 +2825,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_price_and_partially_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_price_and_partially_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2636,8 +2873,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_price_and_partially_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
 	}
 
 	@Test
@@ -2682,8 +2920,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -2725,8 +2964,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -2773,8 +3013,9 @@ public class SecurityTest {
 	// TODO: add some test about updating a ice order that its display is not equal to its quantity
 
 	public void add_sell_order_no_trades_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_no_trades_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_no_trades_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -2812,8 +3053,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_no_trades_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_no_trades_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -2850,8 +3092,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_and_not_enough_position_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_and_not_enough_position();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+		SecurityResponse response = scenarioGenerator.add_sell_order_and_not_enough_position();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
 	}
 
 	@Test
@@ -2887,8 +3130,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_and_not_enough_position_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
 	}
 
 	@Test
@@ -2923,8 +3167,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -2968,8 +3213,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3012,8 +3258,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_and_partially_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_and_partially_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_and_partially_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3057,8 +3304,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3104,8 +3352,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3151,8 +3400,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3196,8 +3446,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3240,8 +3491,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3285,8 +3537,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_check() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3330,8 +3583,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3375,8 +3629,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3420,8 +3675,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_not_enough_execution_cause_rollback_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+		SecurityResponse response = scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_EXECUTION);
 	}
 
 	@Test
@@ -3464,8 +3720,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_EXECUTION);
 	}
 
 	@Test
@@ -3509,8 +3766,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3554,8 +3812,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3599,8 +3858,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_no_trades_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_no_trades_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_no_trades_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3638,8 +3898,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_no_trades_happens_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_no_trades_happens();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3676,8 +3937,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_but_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_but_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.add_buy_order_but_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -3714,8 +3976,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_but_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -3752,8 +4015,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3798,8 +4062,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_and_completely_traded_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_and_completely_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -3843,8 +4108,9 @@ public class SecurityTest {
 	}
 
 	public void add_buy_order_and_partially_traded_and_check_match_check() {
-		MatchResult res = scenarioGenerator.add_buy_order_and_partially_traded();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_and_partially_traded();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	public void add_buy_order_and_partially_traded_and_check_buyer_credit() {
@@ -3881,8 +4147,9 @@ public class SecurityTest {
 	}
 
 	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_check() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
@@ -3919,8 +4186,9 @@ public class SecurityTest {
 	}
 
 	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_check() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
@@ -3957,8 +4225,9 @@ public class SecurityTest {
 	}
 
 	public void add_buy_order_not_enough_credit_causes_rollback_and_check_match_check() {
-		MatchResult res = scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
@@ -3994,8 +4263,9 @@ public class SecurityTest {
 	}
 
 	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_match_check() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
@@ -4035,8 +4305,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4081,8 +4352,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4127,8 +4399,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4172,8 +4445,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4217,8 +4491,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4262,8 +4537,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4307,8 +4583,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_not_enough_execution_cause_rollback_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+		SecurityResponse response = scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_EXECUTION);
 	}
 
 	@Test
@@ -4350,8 +4627,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_EXECUTION);
 	}
 
 	@Test
@@ -4395,8 +4673,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4442,8 +4721,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+		SecurityResponse response = scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
 	}
 
 	@Test
@@ -4504,8 +4784,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+		SecurityResponse response = scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_EXECUTION);
 	}
 
 	@Test
@@ -4518,8 +4799,9 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+		SecurityResponse response = scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_EXECUTION);
 	}
 
 	@Test
@@ -4607,10 +4889,12 @@ public class SecurityTest {
 	}
 
 	@Test
-	public void new_sell_stop_limit_order_and_active_at_the_first_and_check_match_results() {
-		List<MatchResult> results = scenarioGenerator.new_sell_stop_limit_order_and_active_at_the_first();
-		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
+	public void new_sell_stop_limit_order_and_active_at_the_first_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.new_sell_stop_limit_order_and_active_at_the_first();
+
+		assertThat(((SituationalStats) response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
+		assertThat(((SituationalStats) response.getStats().get(1)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(2), 6, 1);
 	}
 
 	@Test
@@ -4621,10 +4905,12 @@ public class SecurityTest {
 	}
 
 	@Test
-	public void new_buy_stop_limit_order_and_active_at_the_first_and_check_match_results() {
-		List<MatchResult> results = scenarioGenerator.new_buy_stop_limit_order_and_active_at_the_first();
-		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
+	public void new_buy_stop_limit_order_and_active_at_the_first_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.new_buy_stop_limit_order_and_active_at_the_first();
+
+		assertThat(((SituationalStats) response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
+		assertThat(((SituationalStats) response.getStats().get(1)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(2), 6, 1);
 	}
 
 	@Test
@@ -4636,14 +4922,16 @@ public class SecurityTest {
 
 	@Test
 	public void add_sell_stop_limit_order_but_not_enough_position_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_sell_stop_limit_order_but_not_enough_position();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+		SecurityResponse response = scenarioGenerator.add_sell_stop_limit_order_but_not_enough_position();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
 	}
 
 	@Test
 	public void add_buy_stop_limit_order_but_not_enough_credit_and_check_match_result() {
-		MatchResult res = scenarioGenerator.add_buy_stop_limit_order_but_not_enough_credit();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.add_buy_stop_limit_order_but_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -4694,12 +4982,17 @@ public class SecurityTest {
 	}
 
 	@Test
-	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_match_results() {
-		List<MatchResult> results = scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 9, 5);
-		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
-		assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 1);
-		assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+
+		assertThat(((SituationalStats) response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(1), 9, 5);
+		assertThat(((SituationalStats) response.getStats().get(2)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(3), 6, 1);
+		assertThat(((SituationalStats) response.getStats().get(4)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(5), 7, 1);
+		assertThat(((SituationalStats) response.getStats().get(6)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(7), 8, 1);
 	}
 
 	@Test
@@ -4760,12 +5053,17 @@ public class SecurityTest {
 	}
 
 	@Test
-	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_match_results() {
-		List<MatchResult> results = scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 9, 1);
-		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
-		assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 1);
-		assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+
+		assertThat(((SituationalStats) response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(1), 9, 1);
+		assertThat(((SituationalStats) response.getStats().get(2)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(3), 6, 1);
+		assertThat(((SituationalStats) response.getStats().get(4)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(5), 7, 1);
+		assertThat(((SituationalStats) response.getStats().get(6)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(7), 8, 1);
 	}
 
 	@Test
@@ -4876,8 +5174,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_quantity_stop_limit_sell_order_and_not_enough_position_and_check_match_result() {
-		MatchResult res = scenarioGenerator.increase_quantity_stop_limit_sell_order_and_not_enough_position();
-		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+		SecurityResponse response = scenarioGenerator.increase_quantity_stop_limit_sell_order_and_not_enough_position();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
 	}
 
 	@Test
@@ -4895,10 +5194,12 @@ public class SecurityTest {
 	}
 
 	@Test
-	public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_match_results() {
-		List<MatchResult> results = scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
-		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 2);
+	public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
+		
+		assertThat(((SituationalStats) response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertThat(((SituationalStats) response.getStats().get(1)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(2), 6, 2);
 	}
 
 	@Test
@@ -4940,8 +5241,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_price_stop_limit_buy_order_and_not_enough_credit() {
-		MatchResult result = scenarioGenerator.increase_price_stop_limit_buy_order_and_not_enough_credit();
-		assertThat(result.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_price_stop_limit_buy_order_and_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -4971,8 +5273,9 @@ public class SecurityTest {
 
 	@Test
 	public void increase_quantity_stop_limit_buy_order_and_not_enough_credit_and_check_match_result() {
-		MatchResult result = scenarioGenerator.increase_quantity_stop_limit_buy_order_and_not_enough_credit();
-		assertThat(result.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+		SecurityResponse response = scenarioGenerator.increase_quantity_stop_limit_buy_order_and_not_enough_credit();
+		SituationalStats situationalStats = (SituationalStats) response.getStats().getFirst();
+		assertThat(situationalStats.getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
 	}
 
 	@Test
@@ -4983,12 +5286,16 @@ public class SecurityTest {
 	}
 
 	@Test
-	public void decrease_stop_price_stop_limit_buy_order_and_activated_and_check_match_results() {
-		List<MatchResult> results = scenarioGenerator.decrease_stop_price_stop_limit_buy_order_and_activated();
-		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 2);
-		assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 2);
-		assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
+	public void decrease_stop_price_stop_limit_buy_order_and_activated_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.decrease_stop_price_stop_limit_buy_order_and_activated();
+
+		assertThat(((SituationalStats) response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertThat(((SituationalStats) response.getStats().get(1)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(2), 6, 2);
+		assertThat(((SituationalStats) response.getStats().get(3)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(4), 7, 2);
+		assertThat(((SituationalStats) response.getStats().get(5)).getType()).isEqualTo(SituationalStatsType.ORDER_ACTIVATED);
+		assertPack.assertContinuousExecuteStats((ExecuteStats) response.getStats().get(6), 8, 1);
 	}
 
 	@Test
@@ -5018,4 +5325,701 @@ public class SecurityTest {
 		assertPack.exceptedBuyerCredit = 12000;
 		assertPack.assertBuyerCredit();
 	}
+
+	@Test
+	public void delete_buy_order_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.delete_buy_order_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.DELETE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void delete_buy_order_in_auction_state_and_check_buy_queue() {
+		scenarioGenerator.delete_buy_order_in_auction_state();
+		assertThat(security.isThereOrderWithId(Side.BUY, 3)).isFalse();
+	}
+
+	@Test
+	public void delete_buy_order_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.delete_buy_order_in_auction_state();
+		assertPack.exceptedBuyerCredit = 3000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_buy_order_in_auction_state_and_check_buyer_position() {
+		scenarioGenerator.delete_buy_order_in_auction_state();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_buy_order_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.delete_buy_order_in_auction_state();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_buy_order_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.delete_buy_order_in_auction_state();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_sell_order_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.delete_sell_order_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.DELETE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void delete_sell_order_in_auction_state_and_check_buy_queue() {
+		scenarioGenerator.delete_sell_order_in_auction_state();
+		assertThat(security.isThereOrderWithId(Side.SELL, 3)).isFalse();
+	}
+
+	@Test
+	public void delete_sell_order_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.delete_sell_order_in_auction_state();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_sell_order_in_auction_state_and_check_buyer_position() {
+		scenarioGenerator.delete_sell_order_in_auction_state();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_sell_order_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.delete_sell_order_in_auction_state();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_sell_order_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.delete_sell_order_in_auction_state();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_in_auction_state_but_not_enough_position_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.add_sell_order_in_auction_state_but_not_enough_position();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void add_sell_order_in_auction_state_but_not_enough_position_and_check_sell_queue() {
+		scenarioGenerator.add_sell_order_in_auction_state_but_not_enough_position();
+		assertThat(security.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_order_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.add_sell_order_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
+		assertPack.assertAuctionStats(((AuctionStats)response.getStats().get(1)), 500, 10);
+	}
+
+	@Test
+	public void add_sell_order_in_auction_state_and_check_sell_queue() {
+		scenarioGenerator.add_sell_order_in_auction_state();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 10, 100);
+	}
+
+	@Test
+	public void add_sell_order_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_in_auction_state();
+		assertPack.exceptedSellerPosition = 95;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_in_auction_state();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_in_auction_state_but_not_enough_credit_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.add_buy_order_in_auction_state_but_not_enough_credit();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void add_buy_order_in_auction_state_but_not_enough_credit_and_check_buy_queue() {
+		scenarioGenerator.add_buy_order_in_auction_state_but_not_enough_credit();
+		assertThat(security.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	@Test
+	public void add_buy_order_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.add_buy_order_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.ADD_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 700, 20);
+	}
+	
+	@Test
+	public void add_buy_order_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_in_auction_state();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_in_auction_state_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_in_auction_state();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_in_auction_state();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_in_auction_state();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_price_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_sell_order_price_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void increase_sell_order_price_in_auction_state_and_check_sell_queue() {
+		scenarioGenerator.increase_sell_order_price_in_auction_state();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 1, 10, 750);
+	}
+
+	@Test
+	public void decrease_sell_order_price_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.decrease_sell_order_price_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 500, 10);
+	}
+
+	@Test
+	public void decrease_sell_order_price_in_auction_state_and_check_sell_queue() {
+		scenarioGenerator.decrease_sell_order_price_in_auction_state();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 300);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void decrease_sell_order_price_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_order_price_in_auction_state();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_in_auction_state_but_not_enough_position_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_sell_order_quantity_in_auction_state_but_not_enough_position();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_POSITIONS);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_in_auction_state_but_not_enough_position_and_check_sell_queue() {
+		scenarioGenerator.increase_sell_order_quantity_in_auction_state_but_not_enough_position();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_sell_order_quantity_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_in_auction_state_and_check_sell_queue() {
+		scenarioGenerator.increase_sell_order_quantity_in_auction_state();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 15, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.increase_sell_order_quantity_in_auction_state();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.decrease_sell_order_quantity_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_in_auction_state_and_check_sell_queue() {
+		scenarioGenerator.decrease_sell_order_quantity_in_auction_state();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 5, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_but_not_enough_credit_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_in_auction_state_but_not_enough_credit();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_but_not_enough_credit_and_check_buy_queue() {
+		scenarioGenerator.increase_buy_order_price_in_auction_state_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_buy_order_price_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 800, 30);
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_and_check_buy_queue() {
+		scenarioGenerator.increase_buy_order_price_in_auction_state();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 820, 10, 10);	
+		assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);	
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_price_in_auction_state();
+		assertPack.assertBuyerCredit();	
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_price_in_auction_state();
+		assertPack.assertBuyerPosition();	
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_price_in_auction_state();
+		assertPack.assertSellerCredit();	
+	}
+
+	@Test
+	public void increase_buy_order_price_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_price_in_auction_state();
+		assertPack.assertSellerPosition();	
+	}
+
+	@Test
+	public void decrease_buy_order_price_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.decrease_buy_order_price_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void decrease_buy_order_price_in_auction_state_and_check_buy_queue() {
+		scenarioGenerator.decrease_buy_order_price_in_auction_state();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 5, 45, 400, 10, 10);
+	}
+
+	@Test
+	public void decrease_buy_order_price_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.decrease_buy_order_price_in_auction_state();
+		assertPack.exceptedBuyerCredit = 4500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_buy_order_price_in_auction_state_and_check_buyer_position() {
+		scenarioGenerator.decrease_buy_order_price_in_auction_state();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_buy_order_price_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.decrease_buy_order_price_in_auction_state();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_buy_order_price_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.decrease_buy_order_price_in_auction_state();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_but_not_enough_credit_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_buy_order_quantity_in_auction_state_but_not_enough_credit();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.NOT_ENOUGH_CREDIT);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_but_not_enough_credit_and_check_buy_queue() {
+		scenarioGenerator.increase_buy_order_quantity_in_auction_state_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);	
+	}
+	
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.increase_buy_order_quantity_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 300, 75);
+		assertThat(response.getStats().size()).isEqualTo(2);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_and_check_buy_queue() {
+		scenarioGenerator.increase_buy_order_quantity_in_auction_state();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 20, 300);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_and_check_sell_queue() {
+		scenarioGenerator.increase_buy_order_quantity_in_auction_state();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 100, 250);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 1, 10, 600);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_quantity_in_auction_state();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_quantity_in_auction_state();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_quantity_in_auction_state();
+		assertPack.exceptedSellerPosition = 185;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_in_auction_state_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.decrease_buy_order_quantity_in_auction_state();
+		assertThat(((SituationalStats)response.getStats().getFirst()).getType()).isEqualTo(SituationalStatsType.UPDATE_ORDER);
+		assertPack.assertAuctionStats((AuctionStats)response.getStats().get(1), 550, 0);
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_in_auction_state_and_check_buy_queue() {
+		scenarioGenerator.decrease_buy_order_quantity_in_auction_state();
+		assertPack.assertOrderInQueue(Side.BUY, 1, 4, 5, 400);	
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_in_auction_state_and_check_buyer_credit() {
+		scenarioGenerator.decrease_buy_order_quantity_in_auction_state();
+		assertPack.exceptedBuyerCredit = 2000;
+		assertPack.assertBuyerCredit();	
+	}
+	
+	@Test
+	public void decrease_buy_order_quantity_in_auction_state_and_check_seller_position() {
+		scenarioGenerator.decrease_buy_order_quantity_in_auction_state();
+		assertPack.assertSellerPosition();	
+	}
+
+	@Test
+	public void change_security_state_from_continuous_to_auction_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_continuous_to_auction();
+		assertPack.assertStateStats((StateStats)response.getStats().getFirst(), SecurityState.CONTINUOUS, SecurityState.AUCTION);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void change_security_state_from_continuous_to_continuous_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_continuous_to_continuous();
+		assertPack.assertStateStats((StateStats)response.getStats().getFirst(), SecurityState.CONTINUOUS, SecurityState.CONTINUOUS);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_no_trade_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_continuous_with_no_trade();
+		assertPack.assertStateStats((StateStats)response.getStats().getFirst(), SecurityState.AUCTION, SecurityState.CONTINUOUS);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_no_trade_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_auction_with_no_trade();
+		assertPack.assertStateStats((StateStats)response.getStats().getFirst(), SecurityState.AUCTION, SecurityState.AUCTION);
+		assertThat(response.getStats().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_trades() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		List<Trade> trades = ((ExecuteStats)response.getStats().getFirst()).getTrades();
+
+		assertPack.assertTrade(trades.get(0), 13, 12, 1000, 30);
+		assertPack.assertTrade(trades.get(1), 1, 12, 1000, 10);
+		assertPack.assertTrade(trades.get(2), 2, 12, 1000, 10);
+		assertPack.assertTrade(trades.get(3), 3, 11, 1000, 10);
+		assertPack.assertTrade(trades.get(4), 4, 11, 1000, 10);
+		assertPack.assertTrade(trades.get(5), 5, 11, 1000, 10);
+		assertPack.assertTrade(trades.get(6), 15, 11, 1000, 5);
+		assertThat(trades.size()).isEqualTo(7);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.assertStateStats((StateStats)response.getStats().getLast(), SecurityState.AUCTION, SecurityState.CONTINUOUS);
+		assertThat(response.getStats().size()).isEqualTo(2);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_sell_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 15, 10, 1000);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 5, 35, 1000, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 14, 15, 1100);
+		assertThat(security.getOrderBook().getSellQueue().size()).isEqualTo(3);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_buy_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 10, 15, 500);
+		assertThat(security.getOrderBook().getBuyQueue().size()).isEqualTo(6);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_buyer_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.exceptedBuyerCredit = 10000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_buyer_position() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_seller_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.exceptedSellerCredit = 85_000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_check_seller_position() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades();
+		assertPack.exceptedSellerPosition = 60;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_trades() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		List<Trade> trades = ((ExecuteStats)response.getStats().getFirst()).getTrades();
+
+		assertPack.assertTrade(trades.get(0), 13, 12, 1000, 30);
+		assertPack.assertTrade(trades.get(1), 1, 12, 1000, 10);
+		assertPack.assertTrade(trades.get(2), 2, 12, 1000, 10);
+		assertPack.assertTrade(trades.get(3), 3, 11, 1000, 10);
+		assertPack.assertTrade(trades.get(4), 4, 11, 1000, 10);
+		assertPack.assertTrade(trades.get(5), 5, 11, 1000, 10);
+		assertPack.assertTrade(trades.get(6), 15, 11, 1000, 5);
+		assertThat(trades.size()).isEqualTo(7);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.assertStateStats((StateStats)response.getStats().getLast(), SecurityState.AUCTION, SecurityState.AUCTION);
+		assertThat(response.getStats().size()).isEqualTo(2);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_sell_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 15, 10, 1000);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 5, 35, 1000, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 14, 15, 1100);
+		assertThat(security.getOrderBook().getSellQueue().size()).isEqualTo(3);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_buy_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 10, 15, 500);
+		assertThat(security.getOrderBook().getBuyQueue().size()).isEqualTo(6);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_buyer_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.exceptedBuyerCredit = 10000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_buyer_position() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_seller_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.exceptedSellerCredit = 85_000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_check_seller_position() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades();
+		assertPack.exceptedSellerPosition = 60;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		List<SecurityStats> stats = response.getStats();
+
+		assertPack.assertAuctionExecuteStats((ExecuteStats)stats.getFirst(), 7);
+		assertPack.assertStateStats((StateStats)stats.get(1), SecurityState.AUCTION, SecurityState.CONTINUOUS);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(2), SituationalStatsType.ORDER_ACTIVATED, 6);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(3), SituationalStatsType.ORDER_ACTIVATED, 7);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(4), SituationalStatsType.ORDER_ACTIVATED, 8);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(5), SituationalStatsType.ORDER_ACTIVATED, 9);
+		assertPack.assertContinuousExecuteStats((ExecuteStats)stats.get(6), 9, 1);
+		assertThat(stats.size()).isEqualTo(7);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_sell_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 15, 5, 1000);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 5, 35, 1000, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 14, 15, 1100);
+		assertThat(security.getOrderBook().getSellQueue().size()).isEqualTo(3);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_buy_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 900);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 7, 15, 800);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 6, 15, 700);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 10, 15, 500);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_buyer_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		assertPack.exceptedBuyerCredit = 10000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_buyer_position() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		assertPack.exceptedBuyerPosition = 90;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_seller_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		assertPack.exceptedSellerCredit = 90_000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_continuous_with_trades_and_active_some_order_and_check_seller_position() {
+		scenarioGenerator.change_security_state_from_auction_to_continuous_with_trades_and_active_some_order();
+		assertPack.exceptedSellerPosition = 100;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_security_response() {
+		SecurityResponse response = scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		List<SecurityStats> stats = response.getStats();
+
+		assertPack.assertAuctionExecuteStats((ExecuteStats)stats.getFirst(), 7);
+		assertPack.assertStateStats((StateStats)stats.get(1), SecurityState.AUCTION, SecurityState.AUCTION);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(2), SituationalStatsType.ORDER_ACTIVATED, 6);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(3), SituationalStatsType.ORDER_ACTIVATED, 7);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(4), SituationalStatsType.ORDER_ACTIVATED, 8);
+		assertPack.assertSituationalStats((SituationalStats)stats.get(5), SituationalStatsType.ORDER_ACTIVATED, 9);
+		assertThat(stats.size()).isEqualTo(6);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_sell_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 15, 10, 1000);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 5, 35, 1000, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 14, 15, 1100);
+		assertThat(security.getOrderBook().getSellQueue().size()).isEqualTo(3);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_buy_queue() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 9, 5, 1000);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 8, 15, 900);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 7, 15, 800);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 6, 15, 700);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 5, 10, 15, 500);
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_buyer_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		assertPack.exceptedBuyerCredit = 10000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_buyer_position() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_seller_credit() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		assertPack.exceptedSellerCredit = 85_000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void change_security_state_from_auction_to_auction_with_trades_and_active_some_order_and_check_seller_position() {
+		scenarioGenerator.change_security_state_from_auction_to_auction_with_trades_and_active_some_order();
+		assertPack.exceptedSellerPosition = 105;
+		assertPack.assertSellerPosition();
+	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
index cbbf480..894ef0f 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
@@ -58,6 +58,6 @@ public class RequestDispatcherTest {
 			0
 		);
 		jmsTemplate.convertAndSend(requestQueue, rq);
-		verify(mockOrderHandler, timeout(1000)).handleEnterOrder(rq);
+		verify(mockOrderHandler, timeout(1000)).handleRq(rq);
 	}
 }
