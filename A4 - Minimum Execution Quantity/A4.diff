diff --git a/A5 - Stop Limit Order/Description/SE1S03-A5-Description.pdf b/A5 - Stop Limit Order/Description/SE1S03-A5-Description.pdf
new file mode 100644
index 0000000..e7d6d95
--- /dev/null
+++ b/A5 - Stop Limit Order/Description/SE1S03-A5-Description.pdf	
@@ -0,0 +1,100 @@
+‫دانشکده مهندسی برق و کامپیوتر‬
+
+‫مهندسی نر ‌مافزار ‪۱‬‬
+
+‫مدرس‪ :‬رامتین خسروی‬
+‫بهار ‪۱۴۰۳‬‬
+
+                                                          ‫تکلیف پنج‬
+
+                               ‫سفارش‌های توقفی محدود‬
+
+‫هدف این تکلیف‪ ،‬شبی ‌هسازی یکی از حالاتی است که در دنیای واقعی رخ می‌دهد‪ .‬حالتی که در آن به دلیل‬
+‫شرایط محصول مجبور هستید در مدت زمان کمی یک ویژگی به محصول اضافه کنید که بر روی معماری تأثیر‬
+‫دارد ولی شرایط زمانی تحویل محدود کننده هستند و نم ‌یتوان کیفیت مورد نظر در محصول را با در نظر‬
+‫گرفتن شرایط زمانی پیاده‌سازی کرد‪ .‬در این تکلیف شما یک ویژگی مهم به نام سفارش توقفی محدود باید به‬
+
+                                                                                                        ‫پروژه اضافه کنید‪.‬‬
+
+                                                              ‫شرح تکلیف‬
+
+‫یک سفارش توقفی محدود (‪ )stop limit order‬نوعی سفارش محدود است که به صورت غیرفعال وارد‬
+‫سیستم می‌شود و زمانی که قیمت آخرین معامله از یک قیمت آستانه یا قیمت توقف (‪ )stop price‬که در‬
+‫هنگام ورود سفارش مشخص شده است عبور کند‪ ،‬به صورت یک سفارش جدید فعال می‌شود‪ .‬عبور از‬
+‫قیمت توقف برای سفارش‌های خرید بدین معنی است که قیمت آخرین معامله بیش‌تر یا مساوی قیمت‬
+‫توقف باشد‪ .‬برای سفارش‌های فروش‪ ،‬عبور از قیمت توقف به معنی آن است که قیمت آخرین معامله کمتر‬
+‫یا مساوی قیمت توقف باشد‪ .‬برای فهم بهتر این نوع سفارش م ‌یتوانید این مثال را ببینید‪ .‬همچنین این‬
+
+                                             ‫توضیح می‌تواند برای درک بهتر سفارش‌های توقفی کمک کننده باشد‪.‬‬
+
+‫پس از ورود یک سفارش عادی به سیستم‪ ،‬اگر سفارش منجر به معامله شود‪ ،‬قیمت آخرین معامله از‬
+‫مجموعه معاملات به عنوان قیمت آخرین معامله در نظر گرفته م ‌یشود‪ .‬فرآیند فعال‌سازی سفارش‌های‬
+‫توقفی پس از اتمام کامل پردازش هر سفارش ورودی صورت م ‌یگیرد‪ .‬دقت کنید که سفارش‌های توقفی در‬
+‫لحظه ورود به سیستم نیز می‌توانند فعا ‌لسازی شوند‪ .‬این اتفاق در صورتی رخ می‌دهد که برای سفارش‌های‬
+‫خرید قیمت توقف کمتر از قیمت آخرین معامله ثبت شده در سیستم باشد‪ .‬برای سفار ‌ شهای فروش در‬
+‫صورتی که قیمت توقف بیشتر از قیمت آخرین معامله ثبت شده در سیستم باشد‪ ،‬فعال‌سازی سفارش جدید‬
+‫صورت م ‌یگیرد‪ .‬برای سفار ‌ شهای با قیمت توقف برابر‪ ،‬زمان ورود مشخص کننده ترتیب فعال‌سازی است‪.‬‬
+‫همواره فرض می‌گردد که پیش از ورود اولین سفارش توقفی به سیستم‪ ،‬معاملاتی انجام شده‌اند و در نتیجه‬
+
+                                                                              ‫قیمت آخرین معامله تعریف شده است‪.‬‬
+
+                                                    ‫ایجاد یک سفارش توقفی محدود جدید‬
+
+‫فرض می‌شود در درخواس ‌تهای ورودی یک فیلد جدید به نام ‪ stopPrice‬به انتهای‬
+‫‪ ir.ramtung.tinyme.messaging.request.EnterOrderRq‬اضافه م ‌یکنید‪ .‬در صورتی که مقدار این فیلد‬
+
+                                                               ‫غیرصفر باشد سفارش را از نوع توقفی فرض م ‌یکنیم‪.‬‬
+
+‫برای سفار ‌ شهای توقفی مقدار کمینه قابل اجرا (‪ )minimum execution quantity‬قابل تنظیم نیست و‬
+‫همچنین سفارش‌های توقفی نم ‌یتوانند سفارش آیس‌برگ باشند‪ .‬از آنجا که سفارش توقفی در هنگام فعال‬
+‫شدن (ورود به سیستم به عنوان سفارش جدید بعد از عبور از قیمت توقف) باید سفار ‌ شهای معتبری باشند‪،‬‬
+‫بررس ‌یهای مربوط به اعتبار و دارایی در هنگام ثبت سفارش (ورود سفارش به عنوان سفارش غیرفعال) انجام‬
+
+                                            ‫می‌شوند و در هنگام فعال‌سازی سفارش بررسی اضافه‌تری نیاز نیست‪.‬‬
+
+‫در هنگام ثبت سفارش توقفی یک رخداد پذیرش سفارش (‪ )OrderAcceptedEvent‬تولید م ‌یشود که به‬
+‫معنی آن است که سفارش توقفی در سیستم پذیرفته شده است‪ .‬در صورتی که یک سفارش توقفی‬
+‫فعا ‌لسازی شود‪ ،‬یک رخداد فعال‌سازی سفارش (‪ )OrderActivatedEvent‬تولید می‌شود و در صورتی که‬
+
+   ‫فعا ‌لسازی منجر به معامله شود با یک رخداد اجرای سفارش (‪ )OrderExecutedEvent‬همراه خواهد شد‪.‬‬
+
+                                                        ‫به روزرسانی سفارش توقفی محدود‬
+
+                                    ‫در به‌روزرسانی سفارش‌های توقفی فقط مقادیر زیر قابل به‌روزرسانی هستند‪:‬‬
+                                                                                                           ‫● قیمت‬
+                                                                                                            ‫● حجم‬
+
+                                                                                                    ‫● قیمت توقف‬
+‫برای ب ‌هروزرسانی سفارش‌های توقفی‪ ،‬در صورتی که در درخواست ورودی قیمت توقف ذکر شده باشد‪،‬‬
+‫درخواست به‌روز‌رسانی برای سفارش‌های توقفی غیرفعال قلمداد می‌شود و در صورتی که سفارش توقفی‬
+‫متناظر با این درخواست فعا ‌لسازی شده باشد و در صف سفارشات قرار گرفته باشد یا سفارش مورد نظر‬
+‫اصلاً توقفی نبوده باشد‪ ،‬درخواست رد می‌شود‪ .‬پس از فعا ‌لسازی سفار ‌ شهای توقفی ب ‌هروزرسانی آ ‌نها مانند‬
+
+                                                        ‫ب ‌هروزرسانی یک سفارش عادی در صف می‌تواند صورت گیرد‪.‬‬
+‫حذف سفارش‌های توقفی دارای مسیر جدایی نسبت به سفارش‌های عادی نیست و هر درخواست حذف هم‬
+                          ‫در سفار ‌ شهای توقفی فعال‌ نشده و هم در سفارش در صف مورد بررسی قرار می‌گیرد‪.‬‬
+
+‫برای انجام این تکلیف توسعه بر روی مخزن خصوصی ایجاد شده در تکلیف قبلی ادامه دهید‪ .‬دقت شود که‬
+       ‫در صورتی که موفق به تحویل کل کارکردهای این تکلیف نشوید کل نمره تکلیف را از دست خواهید داد‪.‬‬
+
+                                                             ‫نحوه ارزیابی‬
+
+                                                      ‫پاسخ‌های شما به این تکلیف از جنب ‌ههای زیر ارزیابی م ‌یشود‪.‬‬
+                                                                                    ‫● درستی عملکرد (‪ ۷۰‬درصد)‬
+
+                                                                  ‫● کدهای آزمون در جنب ‌ههای زیر (‪ ۳۰‬درصد)‬
+                                                             ‫○ سناریوهای مختلف اجرا آزموده شوند‬
+                               ‫○ هر آزمایه یک هدف داشته باشد‪ ،‬یعنی وجود یک خطا را بیازماید‬
+                       ‫○ نام آزمایه‌ها را طوری انتخاب کنید که هدف آن را به طور واضح بیان کند‬
+
+                                                             ‫نحوه تحویل‬
+
+‫برای تحویل تکلیف‪ ،‬لازم است که ‪ SHA‬آخرین کامیت مخزن پروژه تیم (روی گیت‌هاب) و همینطور لینک‬
+‫مخزن ‪ GitHub‬در محل مشخ ‌ صشده در ا ‌یلرن وارد شود‪ .‬یادآوری م ‌ینماید برای تکلی ‌فهای گروهی امکان‬
+‫تحویل با تأخیر وجود ندارد‪ .‬به همین خاطر توصیه م ‌یشود توسعه خود را در بخ ‌ شهای کوچک انجام دهید‬
+
+                                                   ‫و پس از اطمینان از صحت آن بخش‪ ،‬آن را در مخزن ‪ push‬کنید‪.‬‬
+
+‫دقت کنید این تکلیف تحویل حضوری خواهد داشت‪ .‬حضور تمام اعضای گروه هنگام تحویل ضروری است و‬
+                                                               ‫اعضای غایب نمره این تکلیف را از دست خواهند داد‪.‬‬
+
diff --git a/A5 - Stop Limit Order/Description/doc.txt b/A5 - Stop Limit Order/Description/doc.txt
new file mode 100644
index 0000000..d1abfaf
--- /dev/null
+++ b/A5 - Stop Limit Order/Description/doc.txt	
@@ -0,0 +1 @@
+https://docs.google.com/document/d/1SaVul98mfeCLmSn4ml7b0aGUoZbWQcyFNAmNdN5BWzE/edit
\ No newline at end of file
diff --git a/A5 - Stop Limit Order/HELP.md b/A5 - Stop Limit Order/HELP.md
new file mode 100644
index 0000000..dedbd81
--- /dev/null
+++ b/A5 - Stop Limit Order/HELP.md	
@@ -0,0 +1,11 @@
+### Reference Documentation
+
+For further reference, please consider the following sections:
+
+
+
+### Guides
+
+The following guides illustrate how to use some features concretely:
+
+- [Naming Branches](https://stackoverflow.com/questions/273695/what-are-some-examples-of-commonly-used-practices-for-naming-git-branches/6065944#6065944)
diff --git a/TinyME_v2.0/pom.xml b/TinyME_v2.0/pom.xml
index b024b68..08a4281 100644
--- a/TinyME_v2.0/pom.xml
+++ b/TinyME_v2.0/pom.xml
@@ -11,9 +11,9 @@
 	</parent>
 	<groupId>ir.ramtung</groupId>
 	<artifactId>tinyme</artifactId>
-	<version>0.0.1-SNAPSHOT</version>
+	<version>2.1-SNAPSHOT</version>
 	<name>TinyME</name>
-	<description>Base project for Advanced Software Design (ASDF03)</description>
+	<description>A Tiny Implementation of a Matching Engine</description>
 	<properties>
 		<java.version>21</java.version>
 	</properties>
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
index 68ed336..e2c39d5 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
@@ -14,39 +14,48 @@ public class IcebergOrder extends Order {
     int peakSize;
     int displayedQuantity;
 
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, LocalDateTime entryTime, int peakSize, int displayedQuantity, OrderStatus status) {
-        super(orderId, security, side, quantity, price, broker, shareholder, entryTime, status);
+    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
+    Shareholder shareholder, LocalDateTime entryTime, int peakSize, int displayedQuantity, OrderStatus status) {
+        super(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, status);
         this.peakSize = peakSize;
         this.displayedQuantity = displayedQuantity;
     }
 
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, LocalDateTime entryTime, int peakSize, OrderStatus status) {
-        this(orderId, security, side, quantity, price, broker, shareholder, entryTime, peakSize, Math.min(peakSize, quantity), status);
+    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
+    Shareholder shareholder, LocalDateTime entryTime, int peakSize, OrderStatus status) {
+        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, Math.min(peakSize, quantity), status);
     }
 
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, LocalDateTime entryTime, int peakSize) {
-        this(orderId, security, side, quantity, price, broker, shareholder, entryTime, peakSize, OrderStatus.NEW);
+    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
+    Shareholder shareholder, LocalDateTime entryTime, int peakSize) {
+        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, OrderStatus.NEW);
     }
 
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, int peakSize) {
-        super(orderId, security, side, quantity, price, broker, shareholder);
+    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
+    Shareholder shareholder, int peakSize) {
+        super(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder);
         this.peakSize = peakSize;
         this.displayedQuantity = Math.min(peakSize, quantity);
     }
 
+    public IcebergOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, 
+    Shareholder shareholder, int peakSize) {
+        this(orderId, security, side, quantity, 0, price, broker, shareholder, peakSize);
+    }
+
     @Override
     public Order snapshot() {
-        return new IcebergOrder(orderId, security, side, quantity, price, broker, shareholder, entryTime, peakSize, this.status);
+        return new IcebergOrder(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, OrderStatus.SNAPSHOT);
     }
 
     @Override
     public Order snapshotWithQuantity(int newQuantity) {
-        return new IcebergOrder(orderId, security, side, newQuantity, price, broker, shareholder, entryTime, peakSize, this.status);
+        return new IcebergOrder(orderId, security, side, newQuantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, this.status);
     }
 
     @Override
     public int getQuantity() {
-        if (status == OrderStatus.NEW)
+        if (status != OrderStatus.QUEUED)
             return super.getQuantity();
         return displayedQuantity;
     }
@@ -62,7 +71,7 @@ public class IcebergOrder extends Order {
 
     @Override
     public void decreaseQuantity(int amount) {
-        if (status == OrderStatus.NEW) {
+        if (status != OrderStatus.QUEUED) {
             super.decreaseQuantity(amount); 
             return;
         }
@@ -72,13 +81,12 @@ public class IcebergOrder extends Order {
         quantity -= amount;
         displayedQuantity -= amount;
         if(displayedQuantity == 0) {
+            status = OrderStatus.DONE;
             security.deleteOrder(side, orderId);
             if (quantity != 0) {
                 replenish();
                 security.getOrderBook().enqueue(this);
             }
-            else
-                status = OrderStatus.DONE;
         }
         // TODO
         // clean up this shit
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
index 10ee5c5..4f5b5cf 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
@@ -21,6 +21,10 @@ public final class MatchResult {
         return new MatchResult(MatchingOutcome.NOT_ENOUGH_POSITIONS, null, new LinkedList<>());
     }
 
+    public static MatchResult notEnoughExecution() {
+        return new MatchResult(MatchingOutcome.NOT_ENOUGH_EXECUTION, null, new LinkedList<>());
+    }
+
     private MatchResult(MatchingOutcome outcome, Order remainder, LinkedList<Trade> trades) {
         this.outcome = outcome;
         this.remainder = remainder;
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
index 9b19087..73191ed 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
@@ -3,5 +3,6 @@ package ir.ramtung.tinyme.domain.entity;
 public enum MatchingOutcome {
     EXECUTED,
     NOT_ENOUGH_CREDIT,
-    NOT_ENOUGH_POSITIONS
+    NOT_ENOUGH_POSITIONS,
+    NOT_ENOUGH_EXECUTION
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
index 1074842..d56fbb6 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
@@ -1,6 +1,9 @@
 package ir.ramtung.tinyme.domain.entity;
 
+import ir.ramtung.tinyme.domain.exception.CantQueueOrderException;
 import ir.ramtung.tinyme.domain.exception.InvalidPeakSizeException;
+import ir.ramtung.tinyme.domain.exception.NotEnoughExecutionException;
+import ir.ramtung.tinyme.domain.exception.UpdateMinimumExecutionQuantityException;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
@@ -17,6 +20,7 @@ public class Order {
     protected Security security;
     protected Side side;
     protected int quantity;
+    protected int minimumExecutionQuantity;
     protected int price;
     protected Broker broker;
     protected Shareholder shareholder;
@@ -25,11 +29,13 @@ public class Order {
     @Builder.Default
     protected OrderStatus status = OrderStatus.NEW;
 
-    public Order(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, LocalDateTime entryTime, OrderStatus status) {
+    public Order(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, Shareholder shareholder, 
+    LocalDateTime entryTime, OrderStatus status) {
         this.orderId = orderId;
         this.security = security;
         this.side = side;
         this.quantity = quantity;
+        this.minimumExecutionQuantity = minimumExecutionQuantity;
         this.price = price;
         this.entryTime = entryTime;
         this.broker = broker;
@@ -37,28 +43,25 @@ public class Order {
         this.status = status;
     }
 
-    public Order(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, LocalDateTime entryTime) {
-        this.orderId = orderId;
-        this.security = security;
-        this.side = side;
-        this.quantity = quantity;
-        this.price = price;
-        this.entryTime = entryTime;
-        this.broker = broker;
-        this.shareholder = shareholder;
-        this.status = OrderStatus.NEW;
+    public Order(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, Shareholder shareholder, 
+    LocalDateTime entryTime) {
+        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, OrderStatus.NEW);
+    }
+
+    public Order(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, Shareholder shareholder) {
+        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, LocalDateTime.now());
     }
 
     public Order(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder) {
-        this(orderId, security, side, quantity, price, broker, shareholder, LocalDateTime.now());
+        this(orderId, security, side, quantity, 0, price, broker, shareholder);
     }
 
     public Order snapshot() {
-        return new Order(orderId, security, side, quantity, price, broker, shareholder, entryTime, this.status);
+        return new Order(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, OrderStatus.SNAPSHOT);
     }
 
     public Order snapshotWithQuantity(int newQuantity) {
-        return new Order(orderId, security, side, newQuantity, price, broker, shareholder, entryTime, this.status);
+        return new Order(orderId, security, side, newQuantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, this.status);
         // TODO
         // this exists just for unit tests and should remove
     }
@@ -84,7 +87,6 @@ public class Order {
     public void rollback(Order firstVersion) {
         this.quantity = firstVersion.quantity;
         if (status == OrderStatus.DONE) {
-            status = OrderStatus.QUEUED; 
             security.getOrderBook().enqueue(this);
         }   
     }
@@ -94,6 +96,8 @@ public class Order {
     }
 
     public boolean queuesBefore(Order order) {
+        // if (price == order.getPrice())
+        //     return entryTime.isBefore(order.getEntryTime()); // FIXME: this makes conflict with some tests in domain/securityTest
         if (order.getSide() == Side.BUY) {
             return price > order.getPrice();
         } else {
@@ -102,6 +106,8 @@ public class Order {
     }
 
     public void queue() {
+        if (this.status == OrderStatus.QUEUED)
+            throw new CantQueueOrderException();
         status = OrderStatus.QUEUED;
     }
 
@@ -115,7 +121,7 @@ public class Order {
             broker.decreaseCreditBy(tempOrder.getValue());
         }
         else
-            this.status = OrderStatus.NEW;
+            this.status = OrderStatus.UPDATING;
         this.quantity = tempOrder.quantity;
         this.price = tempOrder.price;
     }
@@ -131,6 +137,23 @@ public class Order {
             throw new InvalidPeakSizeException();
     }
 
+    public void checkNewMinimumExecutionQuantity(int minimumExecutionQuantity) {
+        if (this.minimumExecutionQuantity != minimumExecutionQuantity)
+            throw new UpdateMinimumExecutionQuantityException();
+    }
+
+    public void checkExecutionQuantity(int quantitySome) {
+        if (this.status != OrderStatus.NEW)
+            return;
+        if (quantitySome < this.minimumExecutionQuantity)
+            throw new NotEnoughExecutionException();
+    }
+
+    public void addYourselfToQueue() {
+        if (this.quantity != 0)
+            this.security.getOrderBook().enqueue(this);
+    }
+
     public void delete() {
         if (side == Side.BUY)
             broker.increaseCreditBy(getValue());
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
index 9bae52d..ebf1e40 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
@@ -19,7 +19,7 @@ public class OrderBook {
     }
 
     public void enqueue(Order order) {
-        if(order.getSide() == Side.BUY)
+        if(order.getSide() == Side.BUY && order.getStatus() != OrderStatus.LOADING)
             order.getBroker().decreaseCreditBy(order.getValue());
         
         List<Order> queue = getQueue(order.getSide());
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
index 0e2cf50..2e9224c 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
@@ -2,7 +2,9 @@ package ir.ramtung.tinyme.domain.entity;
 
 public enum OrderStatus {
     NEW,
+    UPDATING,
     QUEUED,
     SNAPSHOT,
+    LOADING,
     DONE
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
index a898dcc..fa649b6 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
@@ -1,6 +1,5 @@
 package ir.ramtung.tinyme.domain.entity;
 
-import ir.ramtung.tinyme.domain.exception.CantRollbackTradeException;
 import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
@@ -18,6 +17,8 @@ public class Trade {
     private Order buy;
     private Order sell;
     private Order sellFirstVersion;
+    private Order buyFirstVersion;
+    private boolean isBuyQueued;
 
     public Trade(Security security, int price, int quantity, Order order1, Order order2) {
         this.security = security;
@@ -27,18 +28,24 @@ public class Trade {
             this.buy = order1;
             this.sell = order2;
             this.sellFirstVersion = order2.snapshot();
-        } else {
+            this.buyFirstVersion = order1.snapshot();
+        } 
+        else {
             this.buy = order2;
             this.sell = order1;
             this.sellFirstVersion = order1.snapshot();
+            this.buyFirstVersion = order2.snapshot();
         }
+        this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
         // TODO
         // this exists just for unit tests and should remove
     }
 
-    public Trade(Security security, int price, int quantity, Order order1, Order order2, Order sellFirstVersion) {
+    public Trade(Security security, int price, int quantity, Order order1, Order order2, Order sellFirstVersion, Order buyFirstVersion, boolean isBuyQueued) {
         this(security, price, quantity, order1, order2);
         this.sellFirstVersion = sellFirstVersion;
+        this.buyFirstVersion = buyFirstVersion;
+        this.isBuyQueued = isBuyQueued;
     }
 
     public Trade(Order order1, Order order2) {
@@ -49,11 +56,15 @@ public class Trade {
             this.buy = order1;
             this.sell = order2;
             this.sellFirstVersion = order2.snapshot();
-        } else {
+            this.buyFirstVersion = order1.snapshot();
+        } 
+        else {
             this.buy = order2;
             this.sell = order1;
             this.sellFirstVersion = order1.snapshot();
+            this.buyFirstVersion = order2.snapshot();
         }
+        this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
     }
 
     public long getTradedValue() {
@@ -97,7 +108,7 @@ public class Trade {
     }
 
     public void confirm() {
-        if (buy.getStatus() == OrderStatus.NEW) {
+        if (!isBuyQueued) {
             if (!buyerHasEnoughCredit()) 
                 throw new NotEnoughCreditException();
             decreaseBuyersCredit();
@@ -110,13 +121,26 @@ public class Trade {
     }
 
     public void rollback() {
-        if (buy.getStatus() != OrderStatus.NEW)
-            throw new CantRollbackTradeException();
-    
+        if (isBuyQueued)
+            buyQueuedRollback();
+        else
+            sellQueuedRollback();
+    }
+
+    private void sellQueuedRollback() {
         increaseBuyersCredit();
         decreaseSellersCredit();
         decreaseBuyersPosition();
         increaseSellersPosition();
         sell.rollback(sellFirstVersion);
     }
+    
+    private void buyQueuedRollback() {
+        if (buy.getStatus() == OrderStatus.DONE)
+            increaseBuyersCredit();
+        decreaseSellersCredit();
+        decreaseBuyersPosition();
+        increaseSellersPosition();
+        buy.rollback(buyFirstVersion);
+    }
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java
new file mode 100644
index 0000000..cb60f40
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java
@@ -0,0 +1,12 @@
+package ir.ramtung.tinyme.domain.exception;
+
+public class CantQueueOrderException extends RuntimeException {
+
+    public CantQueueOrderException(String msg) {
+        super(msg);
+    }
+    
+    public CantQueueOrderException() {
+        super();
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java
new file mode 100644
index 0000000..6cd4f41
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java
@@ -0,0 +1,12 @@
+package ir.ramtung.tinyme.domain.exception;
+
+public class NotEnoughExecutionException extends RuntimeException {
+
+    public NotEnoughExecutionException(String msg) {
+        super(msg);
+    }
+    
+    public NotEnoughExecutionException() {
+        super();
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java
new file mode 100644
index 0000000..7259ea8
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java
@@ -0,0 +1,12 @@
+package ir.ramtung.tinyme.domain.exception;
+
+public class UpdateMinimumExecutionQuantityException extends RuntimeException {
+
+    public UpdateMinimumExecutionQuantityException(String msg) {
+        super(msg);
+    }
+
+    public UpdateMinimumExecutionQuantityException() {
+        super();
+    }
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
index 70eeb17..3c86d0f 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
@@ -2,6 +2,7 @@ package ir.ramtung.tinyme.domain.service;
 
 import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
+import ir.ramtung.tinyme.domain.exception.NotEnoughExecutionException;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
 
 import org.springframework.stereotype.Service;
@@ -42,27 +43,27 @@ public class Matcher {
     }
 
     public MatchResult execute(Order order) {
+        List<Trade> trades = new LinkedList<>();
         try {
-            List<Trade> trades = match(order);
-            addOrderToQueue(order, trades);
+            trades = match(order);
+            order.checkExecutionQuantity(someOfExecutionQuantity(trades));
+            order.addYourselfToQueue();
             return MatchResult.executed(order, trades);
         }
         catch (NotEnoughCreditException exp) {
+            rollbackTrades(trades);
             return MatchResult.notEnoughCredit();
         }
-    }
-
-    private void addOrderToQueue(Order order, List<Trade> trades) {
-        if (order.getTotalQuantity() == 0)
-            return;
-        try {
-            order.getSecurity().getOrderBook().enqueue(order);   
-        }
-        catch (NotEnoughCreditException exp) {
+        catch (NotEnoughExecutionException exp) {
             rollbackTrades(trades);
-            throw exp;
+            return MatchResult.notEnoughExecution();
         }
-        // TODO
-        // this is just painkiller, it should be treated properly
+    }
+
+    private int someOfExecutionQuantity(List<Trade> trades) {
+        int quantitySome = 0;
+        for (Trade trade: trades) 
+            quantitySome += trade.getQuantity();
+        return quantitySome;
     }
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
index 953a4da..3751f85 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
@@ -4,6 +4,7 @@ import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.exception.InvalidIcebergPeakSizeException;
 import ir.ramtung.tinyme.domain.exception.InvalidPeakSizeException;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
+import ir.ramtung.tinyme.domain.exception.UpdateMinimumExecutionQuantityException;
 import ir.ramtung.tinyme.messaging.Message;
 import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
 import ir.ramtung.tinyme.messaging.EventPublisher;
@@ -62,12 +63,17 @@ public class OrderHandler {
         Security security = securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin());
         
         if (enterOrderRq.getPeakSize() == 0)
-            return new Order(enterOrderRq.getOrderId(), security, enterOrderRq.getSide(),
-                    enterOrderRq.getQuantity(), enterOrderRq.getPrice(), broker, shareholder, enterOrderRq.getEntryTime());
+            return new Order(
+                            enterOrderRq.getOrderId(), security, enterOrderRq.getSide(),
+                            enterOrderRq.getQuantity(), enterOrderRq.getMinimumExecutionQuantity(), 
+                            enterOrderRq.getPrice(), broker, shareholder, enterOrderRq.getEntryTime()
+                        );
         else
-            return new IcebergOrder(enterOrderRq.getOrderId(), security, enterOrderRq.getSide(),
-                    enterOrderRq.getQuantity(), enterOrderRq.getPrice(), broker, shareholder,
-                    enterOrderRq.getEntryTime(), enterOrderRq.getPeakSize());
+            return new IcebergOrder(
+                            enterOrderRq.getOrderId(), security, enterOrderRq.getSide(),
+                            enterOrderRq.getQuantity(), enterOrderRq.getMinimumExecutionQuantity(), 
+                            enterOrderRq.getPrice(), broker, shareholder, enterOrderRq.getEntryTime(), enterOrderRq.getPeakSize()
+                        );
     }
 
     private void publishEnterOrderMatchResult(MatchResult matchResult, EnterOrderRq enterOrderRq) {
@@ -88,6 +94,8 @@ public class OrderHandler {
             events.add(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
         else if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_POSITIONS) 
             events.add(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
+        else if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_EXECUTION)
+            events.add(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
         return events;
     }
 
@@ -115,8 +123,8 @@ public class OrderHandler {
 
     private void validateEnterOrderRq(EnterOrderRq enterOrderRq) {
         generalEnterOrderValidation(enterOrderRq);
-            if (enterOrderRq.getRequestType() == OrderEntryType.UPDATE_ORDER)
-                validateUpdateOrderRq(enterOrderRq, securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin()));
+        if (enterOrderRq.getRequestType() == OrderEntryType.UPDATE_ORDER)
+            validateUpdateOrderRq(enterOrderRq, securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin()));
     }
 
     private void generalEnterOrderValidation(EnterOrderRq enterOrderRq) {
@@ -131,10 +139,6 @@ public class OrderHandler {
             errors.add(Message.UNKNOWN_BROKER_ID);
         if (!shareholderRepository.isThereShareholderWithId(enterOrderRq.getShareholderId())) 
             errors.add(Message.UNKNOWN_SHAREHOLDER_ID);
-        if (!enterOrderRq.isPeakSizeValid())
-            //TODO 
-            // it can be part of validateYourFields, is order of errors matter ?
-            errors.add(Message.INVALID_PEAK_SIZE);
         if (!errors.isEmpty())
             throw new InvalidRequestException(errors);
     }
@@ -143,16 +147,20 @@ public class OrderHandler {
         try {
             Order order = security.findByOrderId(updateOrderRq.getSide(), updateOrderRq.getOrderId());
             order.checkNewPeakSize(updateOrderRq.getPeakSize());
+            order.checkNewMinimumExecutionQuantity(updateOrderRq.getMinimumExecutionQuantity());
         }
         catch (NotFoundException exp) {
             throw new InvalidRequestException(Message.ORDER_ID_NOT_FOUND);
         }
         catch (InvalidIcebergPeakSizeException exp) {
-            throw new InvalidRequestException(Message.CANNOT_SPECIFY_PEAK_SIZE_FOR_A_NON_ICEBERG_ORDER);
+            throw new InvalidRequestException(Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER);
         }
         catch (InvalidPeakSizeException exp) {
             throw new InvalidRequestException(Message.INVALID_PEAK_SIZE);
         }
+        catch (UpdateMinimumExecutionQuantityException exp){
+            throw new InvalidRequestException(Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY);
+        }
     }
 
     private void validateDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
index 7e8ebd9..853e315 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
@@ -7,11 +7,16 @@ public class Message {
     public static final String UNKNOWN_SECURITY_ISIN = "Unknown security ISIN";
     public static final String ORDER_ID_NOT_FOUND = "Order ID not found in the order book";
     public static final String INVALID_PEAK_SIZE = "Iceberg order peak size is out of range";
-    public static final String CANNOT_SPECIFY_PEAK_SIZE_FOR_A_NON_ICEBERG_ORDER = "Cannot specify peak size for a non-iceberg order";
+    public static final String CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER = "Cannot specify 0 peak size for a iceberg order";
     public static final String UNKNOWN_BROKER_ID = "Unknown broker ID";
     public static final String UNKNOWN_SHAREHOLDER_ID = "Unknown shareholder ID";
     public static final String BUYER_HAS_NOT_ENOUGH_CREDIT = "Buyer has not enough credit";
     public static final String QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE = "Quantity is not a multiple of security lot size";
     public static final String PRICE_NOT_MULTIPLE_OF_TICK_SIZE = "Price is not a multiple of security tick size";
     public static final String SELLER_HAS_NOT_ENOUGH_POSITIONS = "Seller has not enough positions";
+    public static final String INVALID_MINIMUM_EXECUTION_QUANTITY = "Invalid minimum execution quantity";
+    public static final String CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY = "Cannot update minimum execution quantity";
+    public static final String MINIMUM_EXECUTION_QUANTITY_NOT_MET = "The minimum execution quantity was not met";
+    public static final String SIDE_CAN_NOT_BE_NULL = "side can not be null value";
+
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
similarity index 62%
rename from TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrder.java
rename to TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
index a2afa7a..1c330db 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
@@ -10,24 +10,35 @@ import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
 
 import ir.ramtung.tinyme.domain.entity.Side;
 import lombok.Getter;
+import lombok.NoArgsConstructor;
 
 @Getter
-public abstract class BaseOrder {
+@NoArgsConstructor
+public abstract class BaseOrderRq {
     protected long requestId;
     protected String securityIsin;
     protected Side side;
     protected long orderId;
     @JsonSerialize(using = LocalDateTimeSerializer.class)
     @JsonDeserialize(using = LocalDateTimeDeserializer.class)
-    protected LocalDateTime entryTime;
+    protected LocalDateTime entryTime = LocalDateTime.now();
 
-    protected BaseOrder(long requestId, String securityIsin, Side side, long orderId) {
+    protected BaseOrderRq(long requestId, String securityIsin, Side side, long orderId) {
         this.requestId = requestId;
         this.securityIsin = securityIsin;
         this.side = side;
         this.orderId = orderId;
-        this.entryTime = LocalDateTime.now();
     }
     
+    protected String getAllPropertiesString() {
+        return (
+            "requestId=" + requestId + ", " +
+            "securityIsin=" + securityIsin + ", " +
+            "side=" + side + ", " +
+            "orderId=" + orderId + ", " +
+            "entryTime=" + entryTime
+        );
+    } 
+
     public abstract List<String> validateYourFields();
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
index 7aca79a..333e986 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
@@ -5,18 +5,27 @@ import java.util.List;
 
 import ir.ramtung.tinyme.domain.entity.Side;
 import ir.ramtung.tinyme.messaging.Message;
+import lombok.NoArgsConstructor;
 
-public class DeleteOrderRq extends BaseOrder{
+@NoArgsConstructor
+public class DeleteOrderRq extends BaseOrderRq{
 
     public DeleteOrderRq(long requestId, String securityIsin, Side side, long orderId) {
         super(requestId, securityIsin, side, orderId);
     }
 
+    @Override
+    public String toString() {
+        return "DeleteOrderRq(" + this.getAllPropertiesString() + ")";
+    }
+
     @Override
     public List<String> validateYourFields() {
         List<String> errors = new LinkedList<>();
         if (orderId <= 0)
             errors.add(Message.INVALID_ORDER_ID);
+        if(side == null)
+            errors.add(Message.SIDE_CAN_NOT_BE_NULL);
 
         return errors;
     }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
index 82021ed..eb4bd77 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
@@ -3,24 +3,28 @@ package ir.ramtung.tinyme.messaging.request;
 import ir.ramtung.tinyme.domain.entity.Side;
 import ir.ramtung.tinyme.messaging.Message;
 import lombok.Getter;
+import lombok.NoArgsConstructor;
 
 import java.time.LocalDateTime;
 import java.util.LinkedList;
 import java.util.List;
 
 @Getter
-public class EnterOrderRq extends BaseOrder{
+@NoArgsConstructor
+public class EnterOrderRq extends BaseOrderRq{
     private OrderEntryType requestType;
     private int quantity;
     private int price;
     private long brokerId;
     private long shareholderId;
     private int peakSize;
+    private int minimumExecutionQuantity;
     // TODO 
     // why update(amend) order should have brokerId and shareholder ?
     // the orderId isn't enough ?
 
-    private EnterOrderRq(OrderEntryType orderEntryType, long requestId, String securityIsin, long orderId, LocalDateTime entryTime, Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize) {
+    private EnterOrderRq(OrderEntryType orderEntryType, long requestId, String securityIsin, long orderId,
+    LocalDateTime entryTime, Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity) {
         super(requestId, securityIsin, side, orderId);
         this.requestType = orderEntryType;
         this.entryTime = entryTime;
@@ -29,14 +33,38 @@ public class EnterOrderRq extends BaseOrder{
         this.brokerId = brokerId;
         this.shareholderId = shareholderId;
         this.peakSize = peakSize;
+        this.minimumExecutionQuantity = minimumExecutionQuantity;
     }
 
-    public static EnterOrderRq createNewOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize) {
-        return new EnterOrderRq(OrderEntryType.NEW_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, brokerId, shareholderId, peakSize);
+    public static EnterOrderRq createNewOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, 
+    Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity) {
+        return new EnterOrderRq(OrderEntryType.NEW_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, 
+                                brokerId, shareholderId, peakSize, minimumExecutionQuantity);
     }
 
-    public static EnterOrderRq createUpdateOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize) {
-        return new EnterOrderRq(OrderEntryType.UPDATE_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, brokerId, shareholderId, peakSize);
+    public static EnterOrderRq createUpdateOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, 
+    Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity) {
+        return new EnterOrderRq(OrderEntryType.UPDATE_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, 
+                                brokerId, shareholderId, peakSize, minimumExecutionQuantity);
+    }
+
+    @Override
+    public String toString() {
+        return "EnterOrderRq(" + this.getAllPropertiesString() + ")";
+    }
+
+    @Override
+    protected String getAllPropertiesString() {
+        return (
+            super.getAllPropertiesString() + ", " +
+            "requestType=" + requestType + ", " +
+            "quantity=" + quantity + ", " +
+            "price=" + price + ", " +
+            "brokerId=" + brokerId + ", " +
+            "shareholderId=" + shareholderId + ", " +
+            "peakSize=" + peakSize + ", " +
+            "minimumExecutionQuantity=" + minimumExecutionQuantity
+        );
     }
 
     @Override
@@ -48,14 +76,22 @@ public class EnterOrderRq extends BaseOrder{
             errors.add(Message.ORDER_QUANTITY_NOT_POSITIVE);
         if (price <= 0)
             errors.add(Message.ORDER_PRICE_NOT_POSITIVE);
-
+        if (!isPeakSizeValid())
+            errors.add(Message.INVALID_PEAK_SIZE);
+        if (!isMinimumExecutionQuantityValid())
+            errors.add(Message.INVALID_MINIMUM_EXECUTION_QUANTITY);
+        if (this.side == null)
+            errors.add(Message.SIDE_CAN_NOT_BE_NULL);
         return errors;
     }
 
-    public boolean isPeakSizeValid() {
+    private boolean isPeakSizeValid() {
         return (peakSize >= 0) && (peakSize < quantity);
         //TODO 
         // peakSize <= quantity ??
     }
 
+    private boolean isMinimumExecutionQuantityValid() {
+        return (minimumExecutionQuantity >= 0) && (minimumExecutionQuantity <= quantity);
+    }
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
index 7f19b1e..8f18f61 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
@@ -134,11 +134,11 @@ public class DataLoader {
                 String[] line;
                 while ((line = csvReader.readNext()) != null) {
                     Security security = securityRepository.findSecurityByIsin(line[1]);
-                    Broker broker = brokerRepository.findBrokerById(Long.parseLong(line[5]));
-                    Shareholder shareholder = shareholderRepository.findShareholderById(Long.parseLong(line[6]));
-//orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
-//0       1    2    3        4     5        6             7         8        9
-                    int peakSize = Integer.parseInt(line[8]);
+                    Broker broker = brokerRepository.findBrokerById(Long.parseLong(line[6]));
+                    Shareholder shareholder = shareholderRepository.findShareholderById(Long.parseLong(line[7]));
+//orderId,isin,side,quantity,minimumExecutionQuantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
+//0       1    2    3        4                        5     6        7             8         9        10
+                    int peakSize = Integer.parseInt(line[9]);
                     Order order;
                     if (peakSize == 0) {
                         order = new Order(
@@ -147,10 +147,11 @@ public class DataLoader {
                                 Side.parse(line[2]),
                                 Integer.parseInt(line[3]),
                                 Integer.parseInt(line[4]),
+                                Integer.parseInt(line[5]),
                                 broker,
                                 shareholder,
-                                LocalDateTime.parse(line[7]),
-                                OrderStatus.QUEUED);
+                                LocalDateTime.parse(line[8]),
+                                OrderStatus.LOADING);
                     } else {
                         order = new IcebergOrder(
                                 Long.parseLong(line[0]),
@@ -158,12 +159,13 @@ public class DataLoader {
                                 Side.parse(line[2]),
                                 Integer.parseInt(line[3]),
                                 Integer.parseInt(line[4]),
+                                Integer.parseInt(line[5]),
                                 broker,
                                 shareholder,
-                                LocalDateTime.parse(line[7]),
-                                Integer.parseInt(line[8]),
+                                LocalDateTime.parse(line[8]),
                                 Integer.parseInt(line[9]),
-                                OrderStatus.QUEUED);
+                                Integer.parseInt(line[10]),
+                                OrderStatus.LOADING);
                     }
                     orders.addFirst(order);
                 }
diff --git a/TinyME_v2.0/src/main/resources/persistence/orderbook.csv b/TinyME_v2.0/src/main/resources/persistence/orderbook.csv
index 1d2d8e7..b8cdd87 100644
--- a/TinyME_v2.0/src/main/resources/persistence/orderbook.csv
+++ b/TinyME_v2.0/src/main/resources/persistence/orderbook.csv
@@ -1,16 +1,16 @@
-orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
-1,SEC1,BUY,304,15700,1,1,2024-02-23T10:59:54.970,0,0
-2,SEC1,BUY,43,15500,1,2,2024-02-23T10:59:55.970,0,0
-3,SEC1,BUY,445,15450,1,2,2024-02-23T10:59:56.970,0,0
-4,SEC1,BUY,526,15450,1,2,2024-02-23T10:59:57.970,0,0
-5,SEC1,BUY,1000,15400,1,1,2024-02-23T10:59:58.970,0,0
-6,SEC1,SELL,350,15800,2,3,2024-02-23T10:59:54.980,0,0
-7,SEC1,SELL,285,15810,2,3,2024-02-23T10:59:55.980,0,0
-8,SEC1,SELL,800,15810,3,4,2024-02-23T10:59:56.980,0,0
-9,SEC1,SELL,340,15820,3,4,2024-02-23T10:59:57.980,0,0
-10,SEC1,SELL,65,15820,2,3,2024-02-23T10:59:58.980,0,0
-11,SEC2,BUY,304,15700,1,1,2024-02-23T11:09:10.012,0,0
-12,SEC2,BUY,43,15500,2,1,2024-02-23T10:00:10.012,0,0
-13,SEC2,BUY,445,15450,2,2,2024-02-23T11:06:10.012,100,100
-14,SEC2,BUY,526,15450,3,3,2024-02-23T11:06:11.012,0,0
-15,SEC2,BUY,1000,15400,3,1,2024-02-23T11:06:12.012,0,0
+orderId,isin,side,quantity,minimumExecutionQuantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
+1,SEC1,BUY,304,0,15700,1,1,2024-02-23T10:59:54.970,0,0
+2,SEC1,BUY,43,0,15500,1,2,2024-02-23T10:59:55.970,0,0
+3,SEC1,BUY,445,0,15450,1,2,2024-02-23T10:59:56.970,0,0
+4,SEC1,BUY,526,0,15450,1,2,2024-02-23T10:59:57.970,0,0
+5,SEC1,BUY,1000,0,15400,1,1,2024-02-23T10:59:58.970,0,0
+6,SEC1,SELL,350,0,15800,2,3,2024-02-23T10:59:54.980,0,0
+7,SEC1,SELL,285,0,15810,2,3,2024-02-23T10:59:55.980,0,0
+8,SEC1,SELL,800,0,15810,3,4,2024-02-23T10:59:56.980,0,0
+9,SEC1,SELL,340,0,15820,3,4,2024-02-23T10:59:57.980,0,0
+10,SEC1,SELL,65,0,15820,2,3,2024-02-23T10:59:58.980,0,0
+11,SEC2,BUY,304,0,15700,1,1,2024-02-23T11:09:10.012,0,0
+12,SEC2,BUY,43,0,15500,2,1,2024-02-23T10:00:10.012,0,0
+13,SEC2,BUY,445,0,15450,2,2,2024-02-23T11:06:10.012,100,100
+14,SEC2,BUY,526,0,15450,3,3,2024-02-23T11:06:11.012,0,0
+15,SEC2,BUY,1000,0,15400,3,1,2024-02-23T11:06:12.012,0,0
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
index 3138f6b..3765401 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
@@ -8,6 +8,7 @@ import ir.ramtung.tinyme.messaging.EventPublisher;
 import ir.ramtung.tinyme.messaging.Message;
 import ir.ramtung.tinyme.messaging.TradeDTO;
 import ir.ramtung.tinyme.messaging.event.OrderAcceptedEvent;
+import ir.ramtung.tinyme.messaging.event.OrderDeletedEvent;
 import ir.ramtung.tinyme.messaging.event.OrderExecutedEvent;
 import ir.ramtung.tinyme.messaging.event.OrderRejectedEvent;
 import ir.ramtung.tinyme.messaging.event.OrderUpdatedEvent;
@@ -49,7 +50,14 @@ public class OrderHandlerTest {
     private Shareholder shareholder;
     private Broker broker1;
     private Broker broker2;
-    private Broker broker3;
+
+    OrderRejectedEvent captureOrderRejectedEvent() {
+        ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(OrderRejectedEvent.class);
+        verify(eventPublisher).publish(orderRejectedCaptor.capture());
+        OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
+
+        return outputEvent;
+    }
 
     @BeforeEach
     void setup() {
@@ -60,25 +68,237 @@ public class OrderHandlerTest {
         security = Security.builder().isin("ABC").build();
         securityRepository.addSecurity(security);
 
-        shareholder = Shareholder.builder().build();
-        shareholder.incPosition(security, 100_000);
+        shareholder = Shareholder.builder().shareholderId(1).build();
         shareholderRepository.addShareholder(shareholder);
 
         broker1 = Broker.builder().brokerId(1).build();
         broker2 = Broker.builder().brokerId(2).build();
-        broker3 = Broker.builder().brokerId(2).build();
         brokerRepository.addBroker(broker1);
         brokerRepository.addBroker(broker2);
-        brokerRepository.addBroker(broker3);
     }
+
+    @Test
+    void new_order_invalid_fields() {
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC", -1, null, null, -1, -1, 1, 1, -1, -1));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.INVALID_ORDER_ID,
+                Message.ORDER_QUANTITY_NOT_POSITIVE,
+                Message.ORDER_PRICE_NOT_POSITIVE,
+                Message.INVALID_PEAK_SIZE,
+                Message.INVALID_MINIMUM_EXECUTION_QUANTITY,
+                Message.SIDE_CAN_NOT_BE_NULL
+        );
+    }
+
+    @Test
+    void new_order_invalid_repos() {
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "-1", 1, null, Side.BUY, 1, 1, -1, -1, 0, 1));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.UNKNOWN_SECURITY_ISIN,
+                Message.UNKNOWN_BROKER_ID,
+                Message.UNKNOWN_SHAREHOLDER_ID
+        );
+    }
+
+    @Test
+    void new_order_invalid_quantity_and_price_due_to_lot_and_tick_size() {
+        Security security2 = Security.builder().isin("ABC2").lotSize(3).tickSize(3).build();
+        securityRepository.addSecurity(security2);
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC2", 1, null, Side.BUY, 4, 4, 1, 1, 0, 1));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE,
+                Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE
+        );
+    }
+
+    @Test
+    void update_order_id_not_found() {
+        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+        broker1.increaseCreditBy(100 * 100);
+        security.getOrderBook().enqueue(inQueueOrder);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 2, null, Side.BUY, 1, 1, 1, 1, 0, 0));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.ORDER_ID_NOT_FOUND
+        );
+    }
+    
+    @Test
+    void update_order_invalid_peaksize() {
+        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+        broker1.increaseCreditBy(100 * 100);
+        security.getOrderBook().enqueue(inQueueOrder);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 1, 0));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.INVALID_PEAK_SIZE
+        );
+    }
+    
+    @Test
+    void update_iceberg_order_invalid_peaksize() {
+        Order inQueueOrder = new IcebergOrder(1, security, Side.BUY, 100, 100, broker1, shareholder, 10);
+        broker1.increaseCreditBy(100 * 100);
+        security.getOrderBook().enqueue(inQueueOrder);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 0));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER
+        );
+    }
+    
+    @Test
+    void update_iceberg_order_invalid_min_exec() {
+        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+        broker1.increaseCreditBy(100 * 100);
+        security.getOrderBook().enqueue(inQueueOrder);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 1));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY
+        );
+    }
+    
+    @Test
+    void delete_order_invalid_order_id() {
+        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+        broker1.increaseCreditBy(100 * 100);
+        security.getOrderBook().enqueue(inQueueOrder);
+
+        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, -1));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.INVALID_ORDER_ID
+        );
+    }
+    
+    @Test
+    void delete_order_invalid_fields() {
+        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+        broker1.increaseCreditBy(100 * 100);
+        security.getOrderBook().enqueue(inQueueOrder);
+
+        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "-1", null, -1));
+        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+        
+        assertThat(outputEvent.getErrors()).containsOnly(
+                Message.INVALID_ORDER_ID,
+                Message.SIDE_CAN_NOT_BE_NULL,
+                Message.UNKNOWN_SECURITY_ISIN
+        );
+    }
+
+    @Test
+    void new_sell_order_without_enough_positions_is_rejected() {
+        List<Order> orders = Arrays.asList(
+                new Order(1, security, Side.BUY, 10, 10, broker1, shareholder)  
+        );
+        broker1.increaseCreditBy(100);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+        shareholder.incPosition(security, 9);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 10, 5, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
+
+        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
+    }
+
+    @Test
+    void update_sell_order_without_enough_positions_is_rejected() {
+        List<Order> orders = Arrays.asList(
+                new Order(1, security, Side.BUY, 10, 15, broker1, shareholder),
+                new Order(7, security, Side.SELL, 10, 16, broker2, shareholder)
+        );
+        broker1.increaseCreditBy(150);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+        shareholder.incPosition(security, 9);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 7, LocalDateTime.now(), Side.SELL, 10, 12, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
+
+        verify(eventPublisher).publish(new OrderRejectedEvent(1, 7, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
+    }
+
+    @Test
+    void new_buy_order_without_enough_credit_is_rejected() {
+        List<Order> orders = Arrays.asList(
+                new Order(1, security, Side.SELL, 10, 10, broker2, shareholder)  
+        );
+        shareholder.incPosition(security, 11);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+        
+        broker1.increaseCreditBy(250 - 1);
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 20, 15, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
+
+        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
+    }
+
+    @Test
+    void update_buy_order_without_enough_credit_is_rejected() {
+        List<Order> orders = Arrays.asList(
+                new Order(1, security, Side.BUY, 20, 15, broker1, shareholder),
+                new Order(7, security, Side.SELL, 10, 20, broker2, shareholder)
+        );
+        broker1.increaseCreditBy(400);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+        shareholder.incPosition(security, 10);
+
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 1, LocalDateTime.now(), Side.BUY, 20, 21, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
+
+        verify(eventPublisher).publish(new OrderRejectedEvent(1, 1, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
+    }
+
+    @Test
+    void new_buy_order_without_enough_minimum_execution_is_rejected() {
+        List<Order> orders = Arrays.asList(
+                new Order(1, security, Side.SELL, 10, 10, broker2, shareholder)  
+        );
+        shareholder.incPosition(security, 11);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+        
+        broker1.increaseCreditBy(300);
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 20, 15, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 11));
+
+        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
+    }
+
+    @Test
+    void new_sell_order_without_enough_minimum_execution_is_rejected() {
+        List<Order> orders = Arrays.asList(
+                new Order(1, security, Side.BUY, 10, 10, broker2, shareholder)  
+        );
+        broker2.increaseCreditBy(100);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+        
+        shareholder.incPosition(security, 20);
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 20, 15, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 11));
+
+        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
+    }
+
+
     @Test
     void new_order_matched_completely_with_one_trade() {
         Order matchingBuyOrder = new Order(100, security, Side.BUY, 1000, 15500, broker1, shareholder);
         Order incomingSellOrder = new Order(200, security, Side.SELL, 300, 15450, broker2, shareholder);
         broker1.increaseCreditBy(15_500_000);
+        shareholder.incPosition(security, 300);
         security.getOrderBook().enqueue(matchingBuyOrder);
 
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 2, shareholder.getShareholderId(), 0));
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 2, shareholder.getShareholderId(), 0, 50));
 
         Trade trade = new Trade(security, matchingBuyOrder.getPrice(), incomingSellOrder.getQuantity(),
                 matchingBuyOrder, incomingSellOrder);
@@ -88,14 +308,17 @@ public class OrderHandlerTest {
 
     @Test
     void new_order_queued_with_no_trade() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 2, shareholder.getShareholderId(), 0));
+        shareholder.incPosition(security, 300);
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 2, shareholder.getShareholderId(), 0, 0));
         verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
     }
+
     @Test
     void new_order_matched_partially_with_two_trades() {
         Order matchingBuyOrder1 = new Order(100, security, Side.BUY, 300, 15500, broker1, shareholder);
         Order matchingBuyOrder2 = new Order(110, security, Side.BUY, 300, 15500, broker1, shareholder);
         Order incomingSellOrder = new Order(200, security, Side.SELL, 1000, 15450, broker2, shareholder);
+        shareholder.incPosition(security, 1000);
         broker1.increaseCreditBy(9_300_000);
         security.getOrderBook().enqueue(matchingBuyOrder1);
         security.getOrderBook().enqueue(matchingBuyOrder2);
@@ -112,7 +335,7 @@ public class OrderHandlerTest {
                 incomingSellOrder.getTotalQuantity(),
                 incomingSellOrder.getPrice(),
                 incomingSellOrder.getBroker().getBrokerId(),
-                incomingSellOrder.getShareholder().getShareholderId(), 0));
+                incomingSellOrder.getShareholder().getShareholderId(), 0, 600));
 
         verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
         verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade1), new TradeDTO(trade2))));
@@ -122,6 +345,7 @@ public class OrderHandlerTest {
     void iceberg_order_behaves_normally_before_being_queued() {
         Order matchingBuyOrder = new Order(100, security, Side.BUY, 1000, 15500, broker1, shareholder);
         Order incomingSellOrder = new IcebergOrder(200, security, Side.SELL, 300, 15450, broker2, shareholder, 100);
+        shareholder.incPosition(security, 300);
         broker1.increaseCreditBy(15_500_000);
         security.getOrderBook().enqueue(matchingBuyOrder);
         Trade trade = new Trade(security, matchingBuyOrder.getPrice(), incomingSellOrder.getQuantity(),
@@ -137,50 +361,18 @@ public class OrderHandlerTest {
                 incomingSellOrder.getTotalQuantity(),
                 incomingSellOrder.getPrice(),
                 incomingSellOrder.getBroker().getBrokerId(),
-                incomingSellOrder.getShareholder().getShareholderId(), 100));
+                incomingSellOrder.getShareholder().getShareholderId(), 100, 150));
 
         verify(mockEventPublisher).publish(new OrderAcceptedEvent(1, 200));
         verify(mockEventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
     }
 
-    @Test
-    void invalid_new_order_with_multiple_errors() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "XXX", -1, LocalDateTime.now(), Side.SELL, 0, 0, -1, -1, 0));
-        ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(OrderRejectedEvent.class);
-        verify(eventPublisher).publish(orderRejectedCaptor.capture());
-        OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-        assertThat(outputEvent.getOrderId()).isEqualTo(-1);
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.UNKNOWN_SECURITY_ISIN,
-                Message.INVALID_ORDER_ID,
-                Message.ORDER_PRICE_NOT_POSITIVE,
-                Message.ORDER_QUANTITY_NOT_POSITIVE,
-                Message.INVALID_PEAK_SIZE,
-                Message.UNKNOWN_BROKER_ID,
-                Message.UNKNOWN_SHAREHOLDER_ID
-        );
-    }
-
-    @Test
-    void invalid_new_order_with_tick_and_lot_size_errors() {
-        Security aSecurity = Security.builder().isin("XXX").lotSize(10).tickSize(10).build();
-        securityRepository.addSecurity(aSecurity);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "XXX", 1, LocalDateTime.now(), Side.SELL, 12, 1001, 1, shareholder.getShareholderId(), 0));
-        ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(OrderRejectedEvent.class);
-        verify(eventPublisher).publish(orderRejectedCaptor.capture());
-        OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-        assertThat(outputEvent.getOrderId()).isEqualTo(1);
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE,
-                Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE
-        );
-    }
-
     @Test
     void update_order_causing_no_trades() {
         Order queuedOrder = new Order(200, security, Side.SELL, 500, 15450, broker1, shareholder);
+        shareholder.incPosition(security, 1000);
         security.getOrderBook().enqueue(queuedOrder);
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, 1, shareholder.getShareholderId(), 0));
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, 1, shareholder.getShareholderId(), 0, 0));
         verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
     }
 
@@ -189,95 +381,18 @@ public class OrderHandlerTest {
         Order matchingOrder = new Order(1, security, Side.BUY, 500, 15450, broker1, shareholder);
         Order beforeUpdate = new Order(200, security, Side.SELL, 1000, 15455, broker2, shareholder);
         Order afterUpdate = new Order(200, security, Side.SELL, 500, 15450, broker2, shareholder);
+        shareholder.incPosition(security, 1000);
         broker1.increaseCreditBy(7_725_000);
         security.getOrderBook().enqueue(matchingOrder);
         security.getOrderBook().enqueue(beforeUpdate);
 
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, broker2.getBrokerId(), shareholder.getShareholderId(), 0));
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, broker2.getBrokerId(), shareholder.getShareholderId(), 0, 0));
 
         Trade trade = new Trade(security, 15450, 500, matchingOrder, afterUpdate);
         verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
         verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
     }
 
-    @Test
-    void invalid_update_with_order_id_not_found() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, 1, shareholder.getShareholderId(), 0));
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, any()));
-    }
-
-    @Test
-    void invalid_update_with_multiple_errors() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "XXX", -1, LocalDateTime.now(), Side.SELL, 0, 0, -1, shareholder.getShareholderId(), 0));
-        ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(OrderRejectedEvent.class);
-        verify(eventPublisher).publish(orderRejectedCaptor.capture());
-        OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-        assertThat(outputEvent.getOrderId()).isEqualTo(-1);
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.UNKNOWN_SECURITY_ISIN,
-                Message.UNKNOWN_BROKER_ID,
-                Message.INVALID_ORDER_ID,
-                Message.ORDER_PRICE_NOT_POSITIVE,
-                Message.ORDER_QUANTITY_NOT_POSITIVE,
-                Message.INVALID_PEAK_SIZE
-        );
-    }
-
-    @Test
-    void invalid_delete_with_order_id_not_found() {
-        Broker buyBroker = Broker.builder().credit(16_500_000).build();
-        brokerRepository.addBroker(buyBroker);
-        Order queuedOrder = new Order(200, security, Side.BUY, 1000, 15500, buyBroker, shareholder);
-        security.getOrderBook().enqueue(queuedOrder);
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.SELL, 100));
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 100, List.of(Message.ORDER_ID_NOT_FOUND)));
-        assertThat(buyBroker.getCredit()).isEqualTo(1_000_000);
-    }
-
-    @Test
-    void invalid_delete_order_with_non_existing_security() {
-        Order queuedOrder = new Order(200, security, Side.BUY, 1000, 15500, broker1, shareholder);
-        broker1.increaseCreditBy(15_500_000);
-        security.getOrderBook().enqueue(queuedOrder);
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "XXX", Side.SELL, 200));
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.UNKNOWN_SECURITY_ISIN)));
-    }
-
-    @Test
-    void new_sell_order_without_enough_positions_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker3, shareholder),
-                new Order(2, security, Side.BUY, 430, 550, broker3, shareholder),
-                new Order(3, security, Side.BUY, 445, 545, broker3, shareholder),
-                new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-                new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-        );
-        broker3.increaseCreditBy(100_652_305);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.decPosition(security, 99_500);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 400, 590, broker1.getBrokerId(), shareholder.getShareholderId(), 0));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
-    }
-
-    @Test
-    void update_sell_order_without_enough_positions_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker3, shareholder),
-                new Order(2, security, Side.BUY, 430, 550, broker3, shareholder),
-                new Order(3, security, Side.BUY, 445, 545, broker3, shareholder),
-                new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-                new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-        );
-        broker3.increaseCreditBy(100_652_305);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.decPosition(security, 99_500);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 6, LocalDateTime.now(), Side.SELL, 450, 580, broker1.getBrokerId(), shareholder.getShareholderId(), 0));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 6, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
-    }
 
     @Test
     void update_sell_order_with_enough_positions_is_executed() {
@@ -285,40 +400,41 @@ public class OrderHandlerTest {
         shareholder1.incPosition(security, 100_000);
         shareholderRepository.addShareholder(shareholder1);
         List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker3, shareholder1),
-                new Order(2, security, Side.BUY, 430, 550, broker3, shareholder1),
-                new Order(3, security, Side.BUY, 445, 545, broker3, shareholder1),
-                new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
+                new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
+                new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
+                new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
+                new Order(6, security, Side.SELL, 350, 250, 580, broker1, shareholder),
                 new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
         );
-        broker3.increaseCreditBy(100_652_305);
+        broker1.increaseCreditBy(100_652_305);
         orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.decPosition(security, 99_500);
+        shareholder.incPosition(security, 350);
 
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 6, LocalDateTime.now(), Side.SELL, 250, 570, broker1.getBrokerId(), shareholder.getShareholderId(), 0));
+        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 6, LocalDateTime.now(), Side.SELL, 250, 570, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 250));
 
         verify(eventPublisher).publish(any(OrderExecutedEvent.class));
         assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000 + 250)).isTrue();
-        assertThat(shareholder.hasEnoughPositionsOn(security, 99_500 - 251)).isFalse();
+        assertThat(shareholder.hasEnoughPositionsOn(security, 101)).isFalse();
     }
 
     @Test
     void new_buy_order_does_not_check_for_position() {
+        shareholder.incPosition(security, 100_000);
         Shareholder shareholder1 = Shareholder.builder().build();
         shareholder1.incPosition(security, 100_000);
         shareholderRepository.addShareholder(shareholder1);
         List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker3, shareholder1),
-                new Order(2, security, Side.BUY, 430, 550, broker3, shareholder1),
-                new Order(3, security, Side.BUY, 445, 545, broker3, shareholder1),
+                new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
+                new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
+                new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
                 new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
                 new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
         );
-        broker3.increaseCreditBy(100_652_305);
+        broker1.increaseCreditBy(100_652_305);
         orders.forEach(order -> security.getOrderBook().enqueue(order));
         shareholder.decPosition(security, 99_500);
 
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 500, 570, broker3.getBrokerId(), shareholder.getShareholderId(), 0));
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 500, 570, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
 
         verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
         assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000)).isTrue();
@@ -327,24 +443,43 @@ public class OrderHandlerTest {
 
     @Test
     void update_buy_order_does_not_check_for_position() {
+        shareholder.incPosition(security, 100_000);
         Shareholder shareholder1 = Shareholder.builder().build();
         shareholder1.incPosition(security, 100_000);
         shareholderRepository.addShareholder(shareholder1);
         List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker3, shareholder1),
-                new Order(2, security, Side.BUY, 430, 550, broker3, shareholder1),
-                new Order(3, security, Side.BUY, 445, 545, broker3, shareholder1),
+                new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
+                new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
+                new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
                 new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
                 new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
         );
-        broker3.increaseCreditBy(100_652_305);
+        broker1.increaseCreditBy(100_652_305);
         orders.forEach(order -> security.getOrderBook().enqueue(order));
         shareholder.decPosition(security, 99_500);
 
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 3, LocalDateTime.now(), Side.BUY, 500, 545, broker3.getBrokerId(), shareholder1.getShareholderId(), 0));
+        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 3, LocalDateTime.now(), Side.BUY, 500, 545, broker1.getBrokerId(), shareholder1.getShareholderId(), 0, 0));
 
         verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
         assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000)).isTrue();
         assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
     }
-}
+
+
+    @Test
+    void delete_orders() {
+        List<Order> orders = Arrays.asList(
+                    new Order(1, security, Side.BUY, 10, 15, broker1, shareholder),
+                    new Order(2, security, Side.SELL, 10, 16, broker2, shareholder)
+        );
+        broker1.increaseCreditBy(150);
+        shareholder.incPosition(security, 10);
+        orders.forEach(order -> security.getOrderBook().enqueue(order));
+
+        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
+        orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
+
+        verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
+        verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
+    }
+}
\ No newline at end of file
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
index d7e0dcc..d58b30f 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
@@ -10,7 +10,6 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Import;
 
-import java.time.LocalDateTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -48,7 +47,7 @@ class SecurityTest {
 
     @Test
     void reducing_quantity_does_not_change_priority() {
-        Order updateOrder = new Order(3, security, Side.BUY, 440, 15450, broker, shareholder, LocalDateTime.now());
+        Order updateOrder = new Order(3, security, Side.BUY, 440, 15450, broker, shareholder);
         assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
         assertThat(security.getOrderBook().getBuyQueue().get(2).getQuantity()).isEqualTo(440);
         assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
@@ -56,7 +55,7 @@ class SecurityTest {
 
     @Test
     void increasing_quantity_changes_priority() {
-        Order updateOrder = new Order(3, security, Side.BUY, 450, 15450, broker, shareholder, LocalDateTime.now());
+        Order updateOrder = new Order(3, security, Side.BUY, 450, 15450, broker, shareholder);
         assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
         assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(450);
         assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
@@ -64,7 +63,7 @@ class SecurityTest {
 
     @Test
     void changing_price_changes_priority() {
-        Order updateOrder = new Order(1, security, Side.BUY, 300, 15450, broker, shareholder, LocalDateTime.now());
+        Order updateOrder = new Order(1, security, Side.BUY, 300, 15450, broker, shareholder);
         assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
         assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(300);
         assertThat(security.getOrderBook().getBuyQueue().get(3).getPrice()).isEqualTo(15450);
@@ -73,7 +72,7 @@ class SecurityTest {
     }
     @Test
     void changing_price_causes_trades_to_happen() {
-        Order updateOrder = new Order(6, security, Side.SELL, 350, 15700, broker, shareholder, LocalDateTime.now());
+        Order updateOrder = new Order(6, security, Side.SELL, 350, 15700, broker, shareholder);
         assertThatNoException().isThrownBy(() ->
                 assertThat(security.updateOrder(updateOrder, matcher).trades()).isNotEmpty()
         );
@@ -81,7 +80,7 @@ class SecurityTest {
 
     @Test
     void updating_non_existing_order_fails() {
-        Order updateOrder = new Order(6, security, Side.BUY, 350, 15700, broker, shareholder, LocalDateTime.now());
+        Order updateOrder = new Order(6, security, Side.BUY, 350, 15700, broker, shareholder);
         assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.updateOrder(updateOrder, matcher));
     }
 
@@ -110,7 +109,7 @@ class SecurityTest {
         );
         broker.increaseCreditBy(35_841_250);
         orders.forEach(order -> security.getOrderBook().enqueue(order));
-        Order updateOrder = new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, LocalDateTime.now(), 150);
+        Order updateOrder = new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 150);
         assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
         assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(150);
         assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
@@ -129,7 +128,7 @@ class SecurityTest {
         );
         broker.increaseCreditBy(35_841_250);
         orders.forEach(order -> security.getOrderBook().enqueue(order));
-        Order updateOrder = new IcebergOrder(3, security, Side.BUY, 300, 15450, broker, shareholder, LocalDateTime.now(), 100);
+        Order updateOrder = new IcebergOrder(3, security, Side.BUY, 300, 15450, broker, shareholder, 100);
         assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
         assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
     }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
index 382a8b2..6b8f1d1 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
@@ -3,6 +3,7 @@ package ir.ramtung.tinyme.domain.entity;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
+import java.time.LocalDateTime;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
@@ -24,73 +25,69 @@ public class SecurityTest {
     private Shareholder buyerShareholder;
     private OrderBook orderBook;
     private List<Order> orders;
+    private AssertingPack assertPack;
+    private ScenarioGenerator scenarioGenerator;
     @Autowired
     private Matcher matcher;
 
-    private static class AssertingPack {
-        private static Security security;
-        private static Broker sellerBroker;
-        private static Broker buyerBroker;
-        private static Shareholder sellerShareholder;
-        private static Shareholder buyerShareholder;
-        private static long exceptedSellerCredit;
-        private static long exceptedBuyerCredit;
-        private static Integer exceptedSellerPosition;
-        private static Integer exceptedBuyerPosition;
-        private static LinkedList<Order> sellQueue;
-        private static LinkedList<Order> buyQueue;
 
-        private static void initialize() {
-            exceptedSellerCredit = sellerBroker.getCredit();
-            exceptedBuyerCredit = buyerBroker.getCredit();
-            exceptedSellerPosition = sellerShareholder.getPositionBySecurity(security);
-            exceptedBuyerPosition = buyerShareholder.getPositionBySecurity(security);
+    // --------------------------------------------------------------------------------
+    // Helper classes
+    // --------------------------------------------------------------------------------
+
+    // Helper class to assert the state of the system
+    private class AssertingPack {
+        private long exceptedSellerCredit;
+        private long exceptedBuyerCredit;
+        private Integer exceptedSellerPosition;
+        private Integer exceptedBuyerPosition;
+        private LinkedList<Order> sellQueue;
+        private LinkedList<Order> buyQueue;
+
+        private AssertingPack() {
+            exceptedSellerCredit = SecurityTest.this.sellerBroker.getCredit();
+            exceptedBuyerCredit = SecurityTest.this.buyerBroker.getCredit();
+            exceptedSellerPosition = SecurityTest.this.sellerShareholder.getPositionBySecurity(security);
+            exceptedBuyerPosition = SecurityTest.this.buyerShareholder.getPositionBySecurity(security);
+            sellQueue = SecurityTest.this.orderBook.getSellQueue();
+            buyQueue = SecurityTest.this.orderBook.getBuyQueue();
         }
 
-        private static void assertSellerCredit() {
-            assertThat(sellerBroker.getCredit()).isEqualTo(exceptedSellerCredit);
+        private void assertSellerCredit() {
+            assertThat(SecurityTest.this.sellerBroker.getCredit()).isEqualTo(exceptedSellerCredit);
         }
 
-        private static void assertBuyerCredit() {
-            assertThat(buyerBroker.getCredit()).isEqualTo(exceptedBuyerCredit);
+        private void assertBuyerCredit() {
+            assertThat(SecurityTest.this.buyerBroker.getCredit()).isEqualTo(exceptedBuyerCredit);
         }
 
-        private static void assertSellerPosition() {
-            assertThat(sellerShareholder.getPositionBySecurity(security)).isEqualTo(exceptedSellerPosition);
+        private void assertSellerPosition() {
+            assertThat(SecurityTest.this.sellerShareholder.getPositionBySecurity(security)).isEqualTo(exceptedSellerPosition);
         }
 
-        private static void assertBuyerPosition() {
-            assertThat(buyerShareholder.getPositionBySecurity(security)).isEqualTo(exceptedBuyerPosition);
+        private void assertBuyerPosition() {
+            assertThat(SecurityTest.this.buyerShareholder.getPositionBySecurity(security)).isEqualTo(exceptedBuyerPosition);
         }
 
-        private static void assertCredits() {
-            assertSellerCredit();
-            assertBuyerCredit();
-        }
-
-        private static void assertPositions() {
-            assertSellerPosition();
-            assertBuyerPosition();
-        }
-
-        private static void assertAll() {
-            assertCredits();
-            assertPositions();
-        }
-
-        private static void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price) {
+        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int minexteQuantity, int price) {
             Order order = (side == Side.BUY) ? buyQueue.get(idx) : sellQueue.get(idx);
             long actualId = order.getOrderId();
             int actualquantity = order.getTotalQuantity();
             int actualPrice = order.getPrice();
+            int actualMinexteQuantity = order.getMinimumExecutionQuantity();
 
             assertThat(actualId).isEqualTo(orderId);
             assertThat(actualquantity).isEqualTo(quantity);
+            assertThat(actualMinexteQuantity).isEqualTo(minexteQuantity);
             assertThat(actualPrice).isEqualTo(price);
         }
 
-        private static void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price, int peakSize, int displayedQuantity) {
-            assertOrderInQueue(side, idx, orderId, quantity, price);
+        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price) {
+            assertOrderInQueue(side, idx, orderId, quantity, 0, price);
+        }
+
+        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int minexteQuantity, int price, int peakSize, int displayedQuantity) {
+            assertOrderInQueue(side, idx, orderId, quantity, minexteQuantity, price);
             Order order = (side == Side.BUY) ? buyQueue.get(idx) : sellQueue.get(idx);
             IcebergOrder iceOrder = (IcebergOrder) order;
             int actualPeakSize = iceOrder.getPeakSize(); 
@@ -99,8 +96,493 @@ public class SecurityTest {
             assertThat(actualPeakSize).isEqualTo(peakSize);
             assertThat(actualDisplayedQuantity).isEqualTo(displayedQuantity);
         }
+
+        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price, int peakSize, int displayedQuantity) {
+            assertOrderInQueue(side, idx, orderId, quantity, 0, price, peakSize, displayedQuantity);
+        }
+    }
+
+    // Helper class to generate scenarios
+    private class ScenarioGenerator {
+        public void delete_sell_order() {
+            security.deleteOrder(Side.SELL, 2);
+        }
+
+        public void delete_sell_ice_order() {
+            security.deleteOrder(Side.SELL, 5);
+        }
+
+        public void delete_buy_order() {
+            security.deleteOrder(Side.BUY, 3);
+        }
+
+        public void delete_buy_ice_order() {
+            security.deleteOrder(Side.BUY, 5);
+        }
+
+        public void delete_non_existing_sell_order() {
+            security.deleteOrder(Side.SELL, 6);
+        }
+
+        public void delete_non_existing_buy_order() {
+            security.deleteOrder(Side.BUY, 8);
+        }
+
+        public MatchResult decrease_sell_order_quantity() {
+            Order order = new Order(1, security, Side.SELL, 4, 600, sellerBroker, sellerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_sell_ice_order_quantity() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 30, 1000, sellerBroker, sellerShareholder, 10);
+            return security.updateOrder(order, matcher);   
+        }
+
+        public MatchResult decrease_buy_order_quantity() {
+            Order order = new Order(3, security, Side.BUY, 7, 300, buyerBroker, buyerShareholder);
+            return security.updateOrder(order, matcher);   
+        }
+
+        public MatchResult decrease_buy_ice_order_quantity() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 7, 500, buyerBroker, buyerShareholder, 10);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_sell_order_quantity() {
+            Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 5);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_sell_ice_order_quantity() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 60, 1000, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 15);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_sell_order_quantity_but_not_enough_position() {
+            Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_sell_ice_order_quantity_but_not_enough_position() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 60, 1000, sellerBroker, sellerShareholder, 10);
+            return security.updateOrder(order, matcher);            
+        }
+
+        public MatchResult increase_buy_order_quantity() {
+            Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(6000);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_quantity() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(7500);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_order_quantity_but_not_enough_credit() {
+            Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_quantity_but_not_enough_credit() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_sell_order_price_no_trading_happens() {
+            Order order = new Order(3, security, Side.SELL, 10, 650, sellerBroker, sellerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_sell_ice_order_price_no_trading_happens() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 600, sellerBroker, sellerShareholder, 10);
+            return security.updateOrder(order, matcher);   
+        }
+
+        public MatchResult decrease_sell_order_price_and_completely_traded() {
+            Order order = new Order(3, security, Side.SELL, 10, 450, sellerBroker, sellerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_sell_ice_order_price_and_completely_traded() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 450, sellerBroker, sellerShareholder, 10);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_sell_order_price_and_partially_traded() {
+            Order order = new Order(3, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 40);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_sell_ice_order_price_and_partially_traded() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 5);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult decrease_buy_order_price() {
+            Order order = new Order(3, security, Side.BUY, 10, 150, buyerBroker, buyerShareholder);
+            return security.updateOrder(order, matcher);   
+        }
+
+        public MatchResult decrease_buy_ice_order_price() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 200, buyerBroker, buyerShareholder, 10);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_sell_order_price() {
+            Order order = new Order(3, security, Side.SELL, 10, 950, sellerBroker, sellerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_sell_ice_order_price() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 1100, sellerBroker, sellerShareholder, 10);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_order_price_no_trading_happens() {
+            Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(1500);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_price_no_trading_happens() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(2250);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_order_price_no_trading_happens_and_not_enough_credit() {
+            Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_order_price_and_completely_traded() {
+            Order order = new Order(2, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(5000);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_price_and_completely_traded() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 1000, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(12500);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_order_price_and_partially_traded() {
+            Order order = new Order(3, security, Side.BUY, 25, 700, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(13500);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_price_and_partially_traded() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(80000);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_order_price_and_trade_happens_but_not_enough_credit() {
+            Order order = new Order(3, security, Side.BUY, 25, 800, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(13500);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback() {
+            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(57000);
+            return security.updateOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_no_trades_happens() {
+            Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 15);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_no_trades_happens() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
+            sellerShareholder.incPosition(security, 20);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_and_not_enough_position() {
+            Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_and_not_enough_position() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_and_completely_traded_and_check() {
+            Order order = new Order(8, security, Side.SELL, 13, 400, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 13);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_and_completely_traded() {
+            IcebergOrder order = new IcebergOrder(8, security, Side.SELL, 67, 100, sellerBroker, sellerShareholder, 9);
+            sellerShareholder.incPosition(security, 67);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_and_partially_traded() {
+            Order order = new Order(7, security, Side.SELL, 60, 500, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 60);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
+            IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 3);
+            sellerShareholder.incPosition(security, 60);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
+            IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 7);
+            sellerShareholder.incPosition(security, 60);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_matches_with_all_buyer_queue_and_finished() {
+            Order order = new Order(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 85);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_finished() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 85);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_matches_with_all_buyer_queue_and_not_finished() {
+            Order order = new Order(6, security, Side.SELL, 120, 100, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 120);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 100, 100, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 100);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_with_min_execution_quantity_and_next_go_to_queue() {
+            Order order = new Order(6, security, Side.SELL, 50, 10, 500, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 50);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 50, 10, 500, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 50);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_not_enough_execution_cause_rollback() {
+            Order order = new Order(6, security, Side.SELL, 60, 50, 500, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 60);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_not_enough_execution_cause_rollback() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 100, 70, 300, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 100);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_quantity_is_equal_to_min_execution_quantity() {
+            Order order = new Order(6, security, Side.SELL, 50, 50, 300, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 50);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_ice_order_quantity_is_equal_to_min_execution_quantity() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 50, 50, 300, sellerBroker, sellerShareholder, 10);
+            sellerShareholder.incPosition(security, 50);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_no_trades_happens() {
+            Order order = new Order(6, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(6600);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_no_trades_happens() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
+            buyerBroker.increaseCreditBy(2250);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_but_not_enough_credit() {
+            Order order = new Order(10, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(6000);
+            return  security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_but_not_enough_credit() {
+            IcebergOrder order = new IcebergOrder(10, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
+            buyerBroker.increaseCreditBy(2000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_and_completely_traded() {
+            Order order = new Order(8, security, Side.BUY, 13, 700, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(8100);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_and_completely_traded() {
+            IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 52, 1100, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(42000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_and_partially_traded() {
+            Order order = new Order(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(7800);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder, 2);
+            buyerBroker.increaseCreditBy(7800);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 14, 600, buyerBroker, buyerShareholder, 5);
+            buyerBroker.increaseCreditBy(8400);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_not_enough_credit_causes_rollback() {
+            Order order = new Order(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(9000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_not_enough_credit_causes_rollback() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(78000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_matches_with_all_seller_queue_and_finished() {
+            Order order = new Order(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(75000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_finished() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(75000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_matches_with_all_seller_queue_and_not_finished() {
+            Order order = new Order(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(90000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_not_finished() {
+            IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(90000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_with_min_execution_quantity_and_next_go_to_queue() {
+            Order order = new Order(6, security, Side.BUY, 22, 17, 700, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(14400);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 32, 20, 700, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(21400);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_not_enough_execution_cause_rollback() {
+            Order order = new Order(6, security, Side.BUY, 60, 50, 600, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(36000);
+            return security.addNewOrder(order, matcher);   
+        }
+
+        public MatchResult add_buy_ice_order_not_enough_execution_cause_rollback() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 100, 70, 800, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(80000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_order_quantity_is_equal_to_min_execution_quantity() {
+            Order order = new Order(6, security, Side.BUY, 40, 40, 1000, buyerBroker, buyerShareholder);
+            buyerBroker.increaseCreditBy(40000);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_buy_ice_order_quantity_is_equal_to_min_execution_quantity() {
+            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 22, 22, 800, buyerBroker, buyerShareholder, 10);
+            buyerBroker.increaseCreditBy(14600);
+            return security.addNewOrder(order, matcher);
+        }
+
+        
+        public void add_two_buy_orders_with_same_price() {
+            Order order1 = new Order(6, security, Side.BUY, 10, 0, 300, buyerBroker, 
+                                     buyerShareholder, LocalDateTime.now().minusHours(1));
+            Order order2 = new Order(7, security, Side.BUY, 10, 0, 300, buyerBroker, 
+                                     buyerShareholder, LocalDateTime.now().minusHours(2));
+
+            buyerBroker.increaseCreditBy(6000);
+            security.addNewOrder(order1, matcher);
+            security.addNewOrder(order2, matcher);
+        }
+
+        public void add_two_buy_ice_orders_with_same_price() {
+            IcebergOrder order1 = new IcebergOrder(6, security, Side.BUY, 10, 0, 300, buyerBroker, 
+                                                   buyerShareholder, LocalDateTime.now().plusHours(1), 10);
+            IcebergOrder order2 = new IcebergOrder(7, security, Side.BUY, 10, 0, 300, buyerBroker, 
+                                                   buyerShareholder, LocalDateTime.now().plusHours(2), 10);
+
+            buyerBroker.increaseCreditBy(6000);
+            security.addNewOrder(order1, matcher);
+            security.addNewOrder(order2, matcher);
+        }
+
+        public MatchResult add_sell_order_causes_rollback_for_buy_orders_with_same_price() {
+            this.add_two_buy_orders_with_same_price();
+            Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 300);
+            return security.addNewOrder(order, matcher);
+        }
+
+        public MatchResult add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price() {
+            this.add_two_buy_ice_orders_with_same_price();
+            Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
+            sellerShareholder.incPosition(security, 300);
+            return security.addNewOrder(order, matcher);
+        }
     }
 
+
+    // --------------------------------------------------------------------------------
+    // Test cases
+    // --------------------------------------------------------------------------------
+
     @BeforeEach
     void setup() {
         security = Security.builder().build();
@@ -124,826 +606,3256 @@ public class SecurityTest {
             new IcebergOrder(5, security, Side.SELL, 45, 1000, sellerBroker, sellerShareholder, 10)
         );
         orders.forEach(order -> orderBook.enqueue(order));
-        AssertingPack.security = this.security;
-        AssertingPack.sellerBroker = this.sellerBroker;
-        AssertingPack.buyerBroker = this.buyerBroker;
-        AssertingPack.sellerShareholder = this.sellerShareholder;
-        AssertingPack.buyerShareholder = this.buyerShareholder;
-        AssertingPack.sellQueue = orderBook.getSellQueue();
-        AssertingPack.buyQueue = orderBook.getBuyQueue();
-        AssertingPack.initialize();
+        assertPack = new AssertingPack();
+        scenarioGenerator = new ScenarioGenerator();
+    }
+
+    @Test
+    public void delete_sell_order_and_check_buyer_credit() {
+        scenarioGenerator.delete_sell_order();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void delete_sell_order_and_check_buyer_position() {
+        scenarioGenerator.delete_sell_order();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void delete_sell_order_and_check_seller_position() {
+        scenarioGenerator.delete_sell_order();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void delete_sell_order_and_check_seller_credit() {
+        scenarioGenerator.delete_sell_order();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void delete_sell_order_and_check_sell_side_in_queue() {
+        scenarioGenerator.delete_sell_order();
+        assertPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 800);
+    }
+
+    @Test
+    public void delete_sell_order_and_check_buy_side_in_queue() {
+        scenarioGenerator.delete_sell_order();
+        assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
+    }
+    
+    @Test
+    public void delete_sell_ice_order_and_check_buyer_credit() {
+        scenarioGenerator.delete_sell_ice_order();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void delete_sell_ice_order_and_check_buyer_position() {
+        scenarioGenerator.delete_sell_ice_order();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void delete_sell_ice_order_and_check_seller_position() {
+        scenarioGenerator.delete_sell_ice_order();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void delete_sell_ice_order_and_check_seller_credit() {
+        scenarioGenerator.delete_sell_ice_order();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void delete_sell_ice_order_and_check_buy_side_in_queue() {
+        scenarioGenerator.delete_sell_ice_order();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    }
+
+    @Test
+    public void delete_sell_ice_order_and_check_sell_side_in_queue() {
+        scenarioGenerator.delete_sell_ice_order();
+        assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> orderBook.getSellQueue().get(4));
+    }
+
+    @Test
+    public void delete_buy_order_and_check_buyer_credit() {
+        scenarioGenerator.delete_buy_order();
+        assertPack.exceptedBuyerCredit = 3000;
+        assertPack.assertBuyerCredit();
+    }
+    
+    @Test
+    public void delete_buy_order_and_check_buyer_position() {
+        scenarioGenerator.delete_buy_order();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void delete_buy_order_and_check_seller_credit() {
+        scenarioGenerator.delete_buy_order();
+        assertPack.assertSellerCredit();
+    }
+    
+    @Test
+    public void delete_buy_order_and_check_seller_position() {
+        scenarioGenerator.delete_buy_order();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void delete_buy_order_and_check_sell_side_in_queue() {
+        scenarioGenerator.delete_buy_order();
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+    }
+
+    @Test
+    public void delete_buy_order_and_check_buy_side_in_queue() {
+        scenarioGenerator.delete_buy_order();
+        assertPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
+    }
+
+    @Test
+    public void delete_buy_ice_order_and_check_buyer_credit() {
+        scenarioGenerator.delete_buy_ice_order();
+        assertPack.exceptedBuyerCredit = 22500;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void delete_buy_ice_order_and_check_buyer_position() {
+        scenarioGenerator.delete_buy_ice_order();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void delete_buy_ice_order_and_check_seller_credit() {
+        scenarioGenerator.delete_buy_ice_order();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void delete_buy_ice_order_and_check_seller_position() {
+        scenarioGenerator.delete_buy_ice_order();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void delete_buy_ice_order_and_check_sell_side_in_queue() {
+        scenarioGenerator.delete_buy_ice_order();
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+    }
+
+    @Test
+    public void delete_buy_ice_order_and_check_buy_side_in_queue() {
+        scenarioGenerator.delete_buy_ice_order();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    }
+
+    @Test
+    public void delete_non_existing_sell_order_and_check_buyer_credit() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void delete_non_existing_sell_order_and_check_buyer_position() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void delete_non_existing_sell_order_and_check_buy_side_in_queue() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+    }
+
+    @Test
+    public void delete_non_existing_sell_order_and_check_seller_credit() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void delete_non_existing_sell_order_and_check_seller_position() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void delete_non_existing_sell_order_and_check_sell_side_in_queue() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+    }
+
+    @Test
+    public void delete_non_existing_buy_order_and_check_buyer_credit() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void delete_non_existing_buy_order_and_check_buyer_position() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void delete_non_existing_buy_order_and_check_buy_side_in_queue() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+    }
+
+    @Test
+    public void delete_non_existing_buy_order_and_check_seller_credit() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void delete_non_existing_buy_order_and_check_seller_position() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void delete_non_existing_buy_order_and_check_sell_side_in_queue() {
+        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+    }
+
+    // TODO
+    // what if new quantity be zero? what should happen in that case?
+
+    @Test
+    public void decrease_sell_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_sell_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_order_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_quantity_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_order_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.decrease_sell_order_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 4, 600);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_ice_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_sell_ice_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_ice_order_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_ice_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_ice_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_quantity_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_ice_order_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.decrease_sell_ice_order_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 30, 1000, 10, 10);
+    }
+
+    @Test
+    public void decrease_buy_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_buy_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_buy_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.decrease_buy_order_quantity();
+        assertPack.exceptedBuyerCredit = 900;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_buy_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.decrease_buy_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_buy_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.decrease_buy_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_buy_order_quantity_and_check_seller_position() {
+        scenarioGenerator.decrease_buy_order_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_buy_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.decrease_buy_order_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 7, 300);
+    }
+
+    @Test
+    public void decrease_buy_ice_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_buy_ice_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_buy_ice_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.decrease_buy_ice_order_quantity();
+        assertPack.exceptedBuyerCredit = 19000;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.decrease_buy_ice_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.decrease_buy_ice_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_quantity_and_check_seller_position() {
+        scenarioGenerator.decrease_buy_ice_order_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.decrease_buy_ice_order_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 7, 500, 10, 7);
+    }
+    
+    @Test
+    public void increase_sell_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_sell_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_sell_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.increase_sell_order_quantity();
+        assertPack.assertBuyerCredit();
+    }
+    
+    @Test
+    public void increase_sell_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.increase_sell_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_sell_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.increase_sell_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+    
+    @Test
+    public void increase_sell_order_quantity_and_check_seller_position() {
+        scenarioGenerator.increase_sell_order_quantity();
+        assertPack.exceptedSellerPosition = 90;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_sell_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.increase_sell_order_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 15, 700);
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_and_check_matcu_result() {
+        MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_sell_ice_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.increase_sell_ice_order_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.increase_sell_ice_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.increase_sell_ice_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_and_check_seller_position() {
+        scenarioGenerator.increase_sell_ice_order_quantity();
+        assertPack.exceptedSellerPosition = 100;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.increase_sell_ice_order_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 60, 1000, 10, 10);
+    }
+
+    @Test
+    public void increase_sell_order_quantity_but_not_enough_position_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+    }
+
+    @Test
+    public void increase_sell_order_quantity_but_not_enough_position_and_check_buyer_credit() {
+        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_sell_order_quantity_but_not_enough_position_and_check_buyer_position() {
+        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_sell_order_quantity_but_not_enough_position_and_check_seller_credit() {
+        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_sell_order_quantity_but_not_enough_position_and_check_seller_position() {
+        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_sell_order_quantity_but_not_enough_position_and_check_order_in_queue() {
+        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+    }
+
+    @Test
+   public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+   }
+
+   @Test
+   public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_buyer_credit() {
+        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_buyer_position() {
+        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_seller_credit() {
+        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_seller_position() {
+        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_order_in_queue() {
+        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+    }
+
+    @Test
+    public void increase_buy_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_order_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 25, 400);
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_ice_order_quantity_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_ice_order_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_quantity();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_quantity();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 60, 500, 10, 10);
+    }
+
+    @Test
+    public void increase_buy_order_quantity_but_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+    
+    @Test
+    public void increase_buy_order_quantity_but_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_but_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_but_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_but_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_quantity_but_not_enough_credit_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    }
+
+    // TODO
+    // add peakSize scenarios after you are sure how they work
+
+    @Test
+    public void decrease_sell_order_price_no_trading_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_sell_order_price_no_trading_happens_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+        assertPack.assertBuyerCredit();
+    }
+    
+    @Test
+    public void decrease_sell_order_price_no_trading_happens_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_price_no_trading_happens_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_price_no_trading_happens_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_price_no_trading_happens_and_check_order_in_queue() {
+        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+        assertPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 650);
+    }
+    
+    @Test
+    public void decrease_sell_ice_order_price_no_trading_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_no_trading_happens_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_no_trading_happens_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_no_trading_happens_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_no_trading_happens_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test   
+    public void decrease_sell_ice_order_price_no_trading_happens_and_check_order_in_queue() {
+        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+        assertPack.assertOrderInQueue(Side.SELL, 1, 5, 45, 600, 10, 10);
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 10;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertPack.exceptedSellerCredit = 5000;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertPack.exceptedSellerPosition = 75;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 2, 4, 10, 900);
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 3)).isFalse();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 35, 500, 10, 10);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertPack.exceptedSellerCredit = 22500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertPack.exceptedSellerPosition = 40;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isFalse();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertPack.exceptedSellerCredit = 22500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertPack.exceptedSellerPosition = 80;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 5, 450);
+    }
+
+    @Test
+    public void decrease_sell_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_buyer_credit() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_buyer_position() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_seller_credit() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertPack.exceptedSellerCredit = 22500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_seller_position() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertPack.exceptedSellerPosition = 45;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 5, 450, 10, 5);
+    }
+
+    @Test
+    public void decrease_sell_ice_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    }
+
+    @Test
+    public void decrease_buy_order_price_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_buy_order_price();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test
+    public void decrease_buy_order_price_and_check_buyer_credit() {
+        scenarioGenerator.decrease_buy_order_price();
+        assertPack.exceptedBuyerCredit = 1500;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_buy_order_price_and_check_buyer_position() {
+        scenarioGenerator.decrease_buy_order_price();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_buy_order_price_and_check_seller_credit() {
+        scenarioGenerator.decrease_buy_order_price();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_buy_order_price_and_check_seller_position() {
+        scenarioGenerator.decrease_buy_order_price();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_buy_order_price_and_check_order_in_queue() {
+        scenarioGenerator.decrease_buy_order_price();
+        assertPack.assertOrderInQueue(Side.BUY, 3, 3, 10, 150);
+    }
+
+    @Test
+    public void decrease_buy_ice_order_price_and_check_match_result() {
+        MatchResult res = scenarioGenerator.decrease_buy_ice_order_price();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void decrease_buy_ice_order_price_and_check_buyer_credit() {
+        scenarioGenerator.decrease_buy_ice_order_price();
+        assertPack.exceptedBuyerCredit = 13500;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_price_and_check_buyer_position() {
+        scenarioGenerator.decrease_buy_ice_order_price();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_price_and_check_seller_credit() {
+        scenarioGenerator.decrease_buy_ice_order_price();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_price_and_check_seller_position() {
+        scenarioGenerator.decrease_buy_ice_order_price();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void decrease_buy_ice_order_price_and_check_order_in_queue() {
+        scenarioGenerator.decrease_buy_ice_order_price();
+        assertPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 200, 10, 10);
+    }
+
+    @Test
+    public void increase_sell_order_price_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_sell_order_price();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_sell_order_price_and_check_buyer_credit() {
+        scenarioGenerator.increase_sell_order_price();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_sell_order_price_and_check_buyer_position() {
+        scenarioGenerator.increase_sell_order_price();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_sell_order_price_and_check_seller_credit() {
+        scenarioGenerator.increase_sell_order_price();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_sell_order_price_and_check_seller_position() {
+        scenarioGenerator.increase_sell_order_price();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_sell_order_price_and_check_order_in_queue() {
+        scenarioGenerator.increase_sell_order_price();
+        assertPack.assertOrderInQueue(Side.SELL, 3, 3, 10, 950);
+    }
+
+    @Test
+    public void increase_sell_ice_order_price_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_sell_ice_order_price();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_sell_ice_order_price_and_check_buyer_credit() {
+        scenarioGenerator.increase_sell_ice_order_price();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_sell_ice_order_price_and_check_buyer_position() {
+        scenarioGenerator.increase_sell_ice_order_price();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_sell_ice_order_price_and_check_seller_credit() {
+        scenarioGenerator.increase_sell_ice_order_price();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_sell_ice_order_price_and_check_seller_position() {
+        scenarioGenerator.increase_sell_ice_order_price();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_sell_ice_order_price_and_check_order_in_queue() {
+        scenarioGenerator.increase_sell_ice_order_price();
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1100, 10, 10);
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens();
+        assertPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 250);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 550, 10, 10);
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_order_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    }
+
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertPack.exceptedBuyerCredit = 1000;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 10;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertPack.exceptedSellerCredit = 6000;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertPack.exceptedSellerPosition = 75;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    }
+
+    @Test
+    public void increase_buy_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.increase_buy_order_price_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 100);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertPack.exceptedSellerCredit = 35000;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertPack.exceptedSellerPosition = 40;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 40, 1000, 10, 5);
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isTrue();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+    }
+    
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertPack.exceptedBuyerPosition = 20;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertPack.exceptedSellerCredit = 13000;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertPack.exceptedSellerPosition = 65;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 2)).isFalse();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+    }
+
+    @Test
+    public void increase_buy_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.increase_buy_order_price_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 3, 5, 700);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertPack.exceptedBuyerCredit = 22500;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertPack.exceptedSellerCredit = 75000;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertPack.exceptedSellerPosition = 0;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertThat(orderBook.getSellQueue().size()).isZero();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 5, 1000, 10, 5);
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertPack.exceptedBuyerCredit = 13500;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_sell_side_in_queue() {
+        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isTrue();
+    }
+
+    @Test
+    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buy_side_in_queue() {
+        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_match_result() {
+        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_bueyr_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertPack.exceptedBuyerCredit = 57000;
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buyer_position() {
+        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_seller_credit() {
+        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_seller_position() {
+        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+        assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
+        assertPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+    }
+
+    @Test
+    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
+    }
+
+    // TODO
+    // add some test about updating a ice order that its display is not equal to its quantity
+    
+    public void add_sell_order_no_trades_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_no_trades_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_order_no_trades_happens_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_no_trades_happens();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_no_trades_happens_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_no_trades_happens();
+        assertPack.assertBuyerPosition();
+    }
+    
+    @Test
+    public void add_sell_order_no_trades_happens_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_no_trades_happens();
+        assertPack.assertSellerCredit();
+    }
+    
+    @Test
+    public void add_sell_order_no_trades_happens_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_no_trades_happens();
+        assertPack.exceptedSellerPosition = 100;
+        assertPack.assertSellerPosition();
+    }
+    
+    @Test
+    public void add_sell_order_no_trades_happens_and_check_order_in_queue() {
+        scenarioGenerator.add_sell_order_no_trades_happens();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 1, 6, 15, 650);
+        assertPack.assertOrderInQueue(Side.SELL, 2, 2, 10, 700);
+    }
+    
+    @Test
+    public void add_sell_ice_order_no_trades_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_no_trades_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_ice_order_no_trades_happens_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_no_trades_happens();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_no_trades_happens_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_no_trades_happens();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_no_trades_happens_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_no_trades_happens();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_no_trades_happens_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_no_trades_happens();
+        assertPack.exceptedSellerPosition = 105;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_no_trades_happens_and_check_order_in_queue() {
+        scenarioGenerator.add_sell_ice_order_no_trades_happens();
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+        assertPack.assertOrderInQueue(Side.SELL, 5, 6, 20, 1000, 7, 7);
+    }
+
+    @Test
+    public void add_sell_order_and_not_enough_position_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_and_not_enough_position();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+    }
+
+    @Test
+    public void add_sell_order_and_not_enough_position_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_and_not_enough_position();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_and_not_enough_position_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_and_not_enough_position();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_and_not_enough_position_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_and_not_enough_position();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_and_not_enough_position_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_and_not_enough_position();
+        assertPack.exceptedSellerPosition = 85;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_and_not_enough_position_and_check_order_in_queue() {
+        scenarioGenerator.add_sell_order_and_not_enough_position();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_not_enough_position_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+    }
+
+    @Test
+    public void add_sell_ice_order_and_not_enough_position_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_not_enough_position_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_not_enough_position_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_not_enough_position_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_not_enough_position_and_check_order_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6));
+    }
+
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertPack.exceptedBuyerPosition = 13;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertPack.exceptedSellerCredit = 6500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertPack.exceptedSellerPosition = 85;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
+    }
+
+    @Test
+    public void add_sell_order_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_and_completely_traded_and_check();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 32, 500, 10, 7);
+    }
+
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 67;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertPack.exceptedSellerCredit = 29900;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 2, 8, 200);
+    }
+
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_and_partially_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_and_partially_traded();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_and_partially_traded();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_and_partially_traded();
+        assertPack.exceptedSellerCredit = 22500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_and_partially_traded();
+        assertPack.exceptedSellerPosition = 100;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 7, 15, 500);
+    }
+
+    @Test
+    public void add_sell_order_and_partially_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_and_partially_traded();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.exceptedBuyerPosition = 55;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.exceptedSellerCredit = 26500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.exceptedSellerPosition = 90;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 3, 3);
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.exceptedBuyerPosition = 55;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.exceptedSellerCredit = 26500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.exceptedSellerPosition = 90;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 7, 5);
+    }
+
+    @Test
+    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.exceptedSellerCredit = 32500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.exceptedSellerPosition = 85;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+        assertThat(orderBook.getBuyQueue().size()).isZero();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.exceptedSellerCredit = 32500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+        assertThat(orderBook.getBuyQueue().size()).isZero();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.exceptedSellerCredit = 32500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.exceptedSellerPosition = 120;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 35, 100);
+    }
+
+    @Test
+    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+        assertThat(orderBook.getBuyQueue().size()).isZero();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_check() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.exceptedSellerCredit = 32500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.exceptedSellerPosition = 100;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 15, 100, 10, 10);
+    }
+
+    @Test
+    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+        assertThat(orderBook.getBuyQueue().size()).isZero();
+    }
+
+    @Test 
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test 
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerCredit = 22500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerPosition = 90;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 5, 10, 500);
+    }
+    
+    @Test
+    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    }
+
+    @Test 
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test 
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedBuyerPosition = 45;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerCredit = 22500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerPosition = 90;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 5, 10, 500, 10, 5);
+    }
+
+    @Test
+    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    }
+
+    @Test 
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+    }    
+    
+    @Test 
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertPack.assertSellerCredit();
+    }
+    
+    @Test
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertPack.exceptedSellerPosition = 145;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    }
+
+    @Test
+    public void add_sell_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    }
+
+    @Test 
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+    }
+    
+    @Test 
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertPack.exceptedSellerPosition = 185;
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+    }
+
+    @Test
+    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+    }
+
+    @Test 
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test 
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedBuyerPosition = 50;
+        assertPack.assertBuyerPosition();
+    }
+
+    @Test
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedSellerCredit = 24500;
+        assertPack.assertSellerCredit();
+    }
+
+    @Test
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertSellerPosition();
+    }
+
+    @Test
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    }
+
+    @Test
+    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 5, 400);
+    }
+
+    @Test 
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test 
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedBuyerPosition = 50;
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void delete_sell_order() {
-        security.deleteOrder(Side.SELL, 2);
-        
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 800);
-        AssertingPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedSellerCredit = 24500;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void delete_sell_ice_order() {
-        security.deleteOrder(Side.SELL, 5);
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.assertAll();
-        assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> orderBook.getSellQueue().get(4));
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    @Test
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
     }
 
     @Test
-    public void delete_buy_order() {
-        security.deleteOrder(Side.BUY, 3);
-        
-        AssertingPack.exceptedBuyerCredit = 3000;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
+    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 5, 400);
     }
 
     @Test
-    public void delete_buy_ice_order() {
-        security.deleteOrder(Side.BUY, 5);
+    public void add_buy_order_no_trades_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_no_trades_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_order_no_trades_happens_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_no_trades_happens();
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 22500;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    @Test
+    public void add_buy_order_no_trades_happens_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_no_trades_happens();
+        assertPack.exceptedBuyerPosition = 0;
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void delete_non_existing_order() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.deleteOrder(Side.SELL, 6));
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.deleteOrder(Side.BUY, 8));
-        AssertingPack.assertAll();
+    public void add_buy_order_no_trades_happens_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_no_trades_happens();
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void decrease_sell_order_quantity() {
-        Order order = new Order(1, security, Side.SELL, 4, 600, sellerBroker, sellerShareholder);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_no_trades_happens_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_no_trades_happens();
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 4, 600);
-        // TODO
-        // what if new quantity be zero? what should happend in that case?
+    @Test
+    public void add_buy_order_no_trades_happens_and_check_order_in_queue() {
+        scenarioGenerator.add_buy_order_no_trades_happens();
+        assertPack.assertOrderInQueue(Side.BUY, 4, 2, 10, 200);
+        assertPack.assertOrderInQueue(Side.BUY, 3, 6, 22, 300);
+        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
     }
 
-    @Test 
-    public void decrease_sell_ice_order_quantity() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 30, 1000, sellerBroker, sellerShareholder, 10);
-        security.updateOrder(order, matcher);
+    @Test
+    public void add_buy_ice_order_no_trades_happens_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_no_trades_happens();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_ice_order_no_trades_happens_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_no_trades_happens();
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 30, 1000, 10, 10);
+    @Test
+    public void add_buy_ice_order_no_trades_happens_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_no_trades_happens();
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void decrease_buy_order_quantity() {
-        Order order = new Order(3, security, Side.BUY, 7, 300, buyerBroker, buyerShareholder);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_no_trades_happens_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_no_trades_happens();
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 900;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 3, 7, 300);
+    @Test
+    public void add_buy_ice_order_no_trades_happens_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_no_trades_happens();
+        assertPack.assertSellerPosition();
     }
 
-    @Test 
-    public void decrease_buy_ice_order_quantity() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 7, 500, sellerBroker, sellerShareholder, 10);
-        security.updateOrder(order, matcher);
+    @Test
+    public void add_buy_ice_order_no_trades_happens_and_check_order_in_queue() {
+        scenarioGenerator.add_buy_ice_order_no_trades_happens();
+        assertPack.assertOrderInQueue(Side.BUY, 2, 4, 10, 400);
+        assertPack.assertOrderInQueue(Side.BUY, 1, 6, 5, 450, 1, 1);
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    }
 
-        AssertingPack.exceptedBuyerCredit = 19000;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 7, 500, 10, 7);
+    @Test
+    public void add_buy_order_but_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_but_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+    
+    @Test
+    public void add_buy_order_but_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_but_not_enough_credit();
+        assertPack.exceptedBuyerCredit = 6000;
+        assertPack.assertBuyerCredit();
     }
 
     @Test
-    public void increase_sell_order_quantity() {
-        Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 5);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_but_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_but_not_enough_credit();
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedSellerPosition = 90;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 15, 700);
+    @Test
+    public void add_buy_order_but_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_but_not_enough_credit();
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void increase_sell_ice_order_quantity() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 60, 1000, sellerBroker, sellerShareholder, 10);
-        sellerShareholder.incPosition(security, 15);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_but_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_but_not_enough_credit();
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedSellerPosition = 100;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 60, 1000, 10, 10);
-    } 
+    @Test
+    public void add_buy_order_but_not_enough_credit_and_check_order_in_queue() {
+        scenarioGenerator.add_buy_order_but_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
+        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+    }
 
     @Test
-    public void increase_sell_order_quantity_but_not_enough_position() {
-        Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
+    public void add_buy_ice_order_but_not_enough_credit_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
+    
+    @Test
+    public void add_buy_ice_order_but_not_enough_credit_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+        assertPack.exceptedBuyerCredit = 2000;
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+    @Test
+    public void add_buy_ice_order_but_not_enough_credit_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void increase_sell_ice_order_quantity_but_not_enough_position() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 60, 1000, sellerBroker, sellerShareholder, 10);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
+    public void add_buy_ice_order_but_not_enough_credit_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+    @Test
+    public void add_buy_ice_order_but_not_enough_credit_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+        assertPack.assertSellerPosition();
     }
 
     @Test
-    public void increase_buy_order_quantity() {
-        Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(6000);
-        security.updateOrder(order, matcher);
-        
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 1, 4, 25, 400);
+    public void add_buy_ice_order_but_not_enough_credit_and_check_order_in_queue() {
+        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
     }
 
     @Test
-    public void increase_buy_ice_order_quantity() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(7500);
-        security.updateOrder(order, matcher);
-        
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 60, 500, 10, 10);
+    public void add_buy_order_and_completely_traded_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_order_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_and_completely_traded();
+        assertPack.assertBuyerCredit();
     }
 
     @Test
-    public void increase_buy_order_quantity_but_not_enough_credit() {
-        Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
+    public void add_buy_order_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 13;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        AssertingPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+    @Test
+    public void add_buy_order_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_and_completely_traded();
+        assertPack.exceptedSellerCredit = 8100;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
-        
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    public void add_buy_order_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_and_completely_traded();
+        assertPack.exceptedSellerPosition = 72;
+        assertPack.assertSellerPosition();
     }
 
+    @Test
+    public void add_buy_order_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 7, 700);
+    }
 
-    // TODO
-    // add peakSize scenarios after you are sure how they work
+    @Test
+    public void add_buy_order_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
+    }
 
+    @Test
+    public void add_buy_ice_order_and_completely_traded_and_check_matc_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_ice_order_and_completely_traded_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertPack.assertBuyerCredit();
+    }
 
     @Test
-    public void decrease_sell_order_price_no_trading_happens() {
-        Order order = new Order(3, security, Side.SELL, 10, 650, sellerBroker, sellerShareholder);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_completely_traded_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertPack.exceptedBuyerPosition = 52;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 650);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 2, 10, 700);
+    @Test
+    public void add_buy_ice_order_and_completely_traded_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertPack.exceptedSellerCredit = 42000;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void decrease_sell_ice_order_price_no_trading_happens() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 600, sellerBroker, sellerShareholder, 10);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_completely_traded_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertPack.exceptedSellerPosition = 33;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 5, 45, 600, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 2, 10, 700);
+    @Test
+    public void add_buy_ice_order_and_completely_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 33, 1000, 10, 8);
     }
 
     @Test
-    public void decrease_sell_order_price_and_completely_traded() {
-        Order order = new Order(3, security, Side.SELL, 10, 450, sellerBroker, sellerShareholder);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_completely_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_and_completely_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
+    }
+    
+    public void add_buy_order_and_partially_traded_and_check_match_check() {
+        MatchResult res = scenarioGenerator.add_buy_order_and_partially_traded();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
 
-        AssertingPack.exceptedSellerCredit = 5000;
-        AssertingPack.exceptedBuyerPosition = 10;
-        AssertingPack.exceptedSellerPosition = 75;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 4, 10, 900);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 3)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 35, 500, 10, 10);
+    public void add_buy_order_and_partially_traded_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_and_partially_traded();
+        assertPack.assertBuyerCredit();
     }
 
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 450, sellerBroker, sellerShareholder, 10);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_and_partially_traded_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_and_partially_traded();
+        assertPack.exceptedBuyerPosition = 10;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedSellerCredit = 22500;
-        AssertingPack.exceptedBuyerPosition = 45;
-        AssertingPack.exceptedSellerPosition = 40;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+    public void add_buy_order_and_partially_traded_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_and_partially_traded();
+        assertPack.exceptedSellerCredit = 6000;
+        assertPack.assertSellerCredit();
     }
 
-    @Test
-    public void decrease_sell_order_price_and_partially_traded() {
-        Order order = new Order(3, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 40);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_and_partially_traded_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_and_partially_traded();
+        assertPack.exceptedSellerPosition = 75;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedSellerCredit = 22500;
-        AssertingPack.exceptedBuyerPosition = 45;
-        AssertingPack.exceptedSellerPosition = 80;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 3, 5, 450);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+    public void add_buy_order_and_partially_traded_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
     }
 
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder, 10);
-        sellerShareholder.incPosition(security, 5);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_and_partially_traded_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_and_partially_traded();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600);
+    }
 
-        AssertingPack.exceptedSellerCredit = 22500;
-        AssertingPack.exceptedBuyerPosition = 45;
-        AssertingPack.exceptedSellerPosition = 45;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 5, 5, 450, 10, 5);
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_check() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
     }
 
-    @Test
-    public void decrease_buy_order_price() {
-        Order order = new Order(3, security, Side.BUY, 10, 150, buyerBroker, buyerShareholder);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 1500;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
-        AssertingPack.assertOrderInQueue(Side.BUY, 3, 3, 10, 150);
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.exceptedBuyerPosition = 10;
+        assertPack.assertBuyerPosition();
     }
 
-    @Test
-    public void decrease_buy_ice_order_price() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 200, buyerBroker, buyerShareholder, 10);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.exceptedSellerCredit = 6000;
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 13500;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
-        AssertingPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 200, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.exceptedSellerPosition = 75;
+        assertPack.assertSellerPosition();
     }
 
-    @Test
-    public void increase_sell_order_price() {
-        Order order = new Order(3, security, Side.SELL, 10, 950, sellerBroker, sellerShareholder);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.SELL, 3, 3, 10, 950);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 4, 10, 900);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600, 2, 2);
     }
 
-    @Test
-    public void increase_sell_ice_order_price() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 1100, sellerBroker, sellerShareholder, 10);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_check() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1100, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.assertBuyerCredit();
     }
 
-    @Test
-    public void increase_buy_order_price_no_trading_happens() {
-        Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(1500);
-        security.updateOrder(order, matcher);
-    
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 4, 2, 10, 200);
-        AssertingPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 250);
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.exceptedBuyerPosition = 10;
+        assertPack.assertBuyerPosition();
     }
 
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(2250);
-        security.updateOrder(order, matcher);
-    
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 550, 10, 10);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.exceptedSellerCredit = 6000;
+        assertPack.assertSellerCredit();
     }
 
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit() {
-        Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
-    
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        AssertingPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.exceptedSellerPosition = 75;
+        assertPack.assertSellerPosition();
     }
 
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    }
+
+    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 4, 600, 5, 4);
+    }
     
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_match_check() {
+        MatchResult res = scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
     }
 
-    @Test
-    public void increase_buy_order_price_and_completely_traded() {
-        Order order = new Order(2, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(5000);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertPack.exceptedBuyerCredit = 9000;
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 10;
-        AssertingPack.exceptedSellerCredit = 6000;
-        AssertingPack.exceptedSellerPosition = 75;
-        AssertingPack.exceptedBuyerCredit = 1000;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 2)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 100);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertPack.assertBuyerPosition();
     }
 
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 1000, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(12500);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 45;
-        AssertingPack.exceptedSellerCredit = 35000;
-        AssertingPack.exceptedSellerPosition = 40;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 5, 40, 1000, 10, 5);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertPack.assertSellerPosition();
     }
 
-    @Test
-    public void increase_buy_order_price_and_partially_traded() {
-        Order order = new Order(3, security, Side.BUY, 25, 700, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(13500);
-        security.updateOrder(order, matcher);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+    }
 
-        AssertingPack.exceptedBuyerPosition = 20;
-        AssertingPack.exceptedSellerCredit = 13000;
-        AssertingPack.exceptedSellerPosition = 65;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 2)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 3, 5, 700);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+    public void add_buy_order_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
     }
 
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(80000);
-        security.updateOrder(order, matcher);
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_match_check() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 75000;
-        AssertingPack.exceptedSellerPosition = 0;
-        AssertingPack.exceptedBuyerCredit = 22500;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 5, 1000, 10, 5);
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertPack.exceptedBuyerCredit = 78000;
+        assertPack.assertBuyerCredit();
     }
 
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit() {
-        Order order = new Order(3, security, Side.BUY, 25, 800, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(13500);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 13500;
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertPack.assertSellerCredit();
     }
 
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit() {
-        IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(57000);
-        MatchingOutcome res = security.updateOrder(order, matcher).outcome();
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 57000;
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
-        AssertingPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+        assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
+        assertPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
+        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000);
     }
 
+    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+    }
 
-    // TODO
-    // add some test about updating a ice order that its display is not equal to its quantity
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertPack.assertBuyerCredit();
+    }
+
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
 
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertPack.exceptedSellerCredit = 75000;
+        assertPack.assertSellerCredit();
+    }
 
     @Test
-    public void add_sell_order_no_trades_happens() {
-        Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 15);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertPack.exceptedSellerPosition = 0;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedSellerPosition = 100;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 6, 15, 650);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 2, 10, 700);
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertThat(orderBook.getSellQueue().size()).isZero();
     }
 
     @Test
-    public void add_sell_ice_order_no_trades_happens() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
-        sellerShareholder.incPosition(security, 20);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+    }
 
-        AssertingPack.exceptedSellerPosition = 105;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-        AssertingPack.assertOrderInQueue(Side.SELL, 5, 6, 20, 1000, 7, 7);
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertPack.assertBuyerCredit();
     }
 
     @Test
-    public void add_sell_order_and_not_enough_position() {
-        Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
-        MatchingOutcome res =  security.addNewOrder(order, matcher).outcome();
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertPack.exceptedSellerCredit = 75000;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void add_sell_ice_order_and_not_enough_position() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
-        MatchingOutcome res =  security.addNewOrder(order, matcher).outcome();
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertPack.exceptedSellerPosition = 0;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertThat(orderBook.getSellQueue().size()).isZero();
     }
 
     @Test
-    public void add_sell_order_and_copletely_traded() {
-        Order order = new Order(8, security, Side.SELL, 13, 400, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 13);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 13;
-        AssertingPack.exceptedSellerCredit = 6500;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 32, 500, 10, 7);
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.assertBuyerCredit();
     }
 
     @Test
-    public void add_sell_ice_order_and_copletely_traded() {
-        IcebergOrder order = new IcebergOrder(8, security, Side.SELL, 67, 100, sellerBroker, sellerShareholder, 9);
-        sellerShareholder.incPosition(security, 67);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 67;
-        AssertingPack.exceptedSellerCredit = 29900;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 2, 8, 200);
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.exceptedSellerCredit = 75000;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void add_sell_order_and_partially_traded() {
-        Order order = new Order(7, security, Side.SELL, 60, 500, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 60);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.exceptedSellerPosition = 0;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 45;
-        AssertingPack.exceptedSellerCredit = 22500;
-        AssertingPack.exceptedSellerPosition = 100;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 7, 15, 500);
+    @Test
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertThat(orderBook.getSellQueue().size()).isZero();
     }
 
     @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
-        IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 3);
-        sellerShareholder.incPosition(security, 60);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000);
+    }
 
-        AssertingPack.exceptedBuyerPosition = 55;
-        AssertingPack.exceptedSellerCredit = 26500;
-        AssertingPack.exceptedSellerPosition = 90;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 3, 3);
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.assertBuyerCredit();
     }
 
     @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
-        IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 7);
-        sellerShareholder.incPosition(security, 60);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.exceptedBuyerPosition = 85;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 55;
-        AssertingPack.exceptedSellerCredit = 26500;
-        AssertingPack.exceptedSellerPosition = 90;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 7, 5);
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.exceptedSellerCredit = 75000;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished() {
-        Order order = new Order(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 85);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.exceptedSellerPosition = 0;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 32500;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    @Test
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertThat(orderBook.getSellQueue().size()).isZero();
     }
 
     @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder, 10);
-        sellerShareholder.incPosition(security, 85);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000, 10, 10);
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 32500;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+    @Test
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertBuyerCredit();
     }
 
     @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished() {
-        Order order = new Order(6, security, Side.SELL, 120, 100, sellerBroker, sellerShareholder);
-        sellerShareholder.incPosition(security, 120);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedBuyerPosition = 20;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 32500;
-        AssertingPack.exceptedSellerPosition = 120;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 6, 35, 100);
+    @Test
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerCredit = 13000;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 100, 100, sellerBroker, sellerShareholder, 10);
-        sellerShareholder.incPosition(security, 100);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerPosition = 65;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 32500;
-        AssertingPack.exceptedSellerPosition = 100;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 6, 15, 100, 10, 10);
+    @Test
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+    }
+
+    @Test
+    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 2, 17, 700);
     }
 
     @Test
-    public void add_buy_order_no_trades_happens() {
-        Order order = new Order(6, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(6600);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 4, 2, 10, 200);
-        AssertingPack.assertOrderInQueue(Side.BUY, 3, 6, 22, 300);
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+    @Test
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedBuyerPosition = 20;
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void add_buy_ice_order_no_trades_happens() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
-        buyerBroker.increaseCreditBy(2250);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerCredit = 13000;
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 2, 4, 10, 400);
-        AssertingPack.assertOrderInQueue(Side.BUY, 1, 6, 5, 450, 1, 1);
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+    @Test
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.exceptedSellerPosition = 65;
+        assertPack.assertSellerPosition();
     }
 
     @Test
-    public void add_buy_order_but_not_enough_credit() {
-        Order order = new Order(10, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(6000);
-        MatchingOutcome res =  security.addNewOrder(order, matcher).outcome();
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+    }
 
-        AssertingPack.exceptedBuyerCredit = 6000;
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 10));
+    @Test
+    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 12, 20, 700, 10, 10);
     }
 
     @Test
-    public void add_buy_ice_order_but_not_enough_credit() {
-        IcebergOrder order = new IcebergOrder(10, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
-        MatchingOutcome res =  security.addNewOrder(order, matcher).outcome();
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+    }
+    
+    @Test
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertPack.exceptedBuyerCredit = 36000;
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 10));
+    @Test
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void add_buy_order_and_copletely_traded() {
-        Order order = new Order(8, security, Side.BUY, 13, 700, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(8100);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 13;
-        AssertingPack.exceptedSellerCredit = 8100;
-        AssertingPack.exceptedSellerPosition = 72;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 2, 7, 700);
+    @Test
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertPack.assertSellerPosition();
     }
 
     @Test
-    public void add_buy_ice_order_and_copletely_traded() {
-        IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 52, 1100, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(42000);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+    }
 
-        AssertingPack.exceptedBuyerPosition = 52;
-        AssertingPack.exceptedSellerCredit = 42000;
-        AssertingPack.exceptedSellerPosition = 33;
-        AssertingPack.assertAll();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 5, 33, 1000, 10, 8);
+    @Test
+    public void add_buy_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
     }
 
     @Test
-    public void add_buy_order_and_partially_traded() {
-        Order order = new Order(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(7800);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+    }
+    
+    @Test
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertPack.exceptedBuyerCredit = 80000;
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 10;
-        AssertingPack.exceptedSellerCredit = 6000;
-        AssertingPack.exceptedSellerPosition = 75;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    @Test
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder, 2);
-        buyerBroker.increaseCreditBy(7800);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 10;
-        AssertingPack.exceptedSellerCredit = 6000;
-        AssertingPack.exceptedSellerPosition = 75;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600, 2, 2);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    @Test
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertSellerPosition();
     }
 
     @Test
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 14, 600, buyerBroker, buyerShareholder, 5);
-        buyerBroker.increaseCreditBy(8400);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+        assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);    }
 
-        AssertingPack.exceptedBuyerPosition = 10;
-        AssertingPack.exceptedSellerCredit = 6000;
-        AssertingPack.exceptedSellerPosition = 75;
-        AssertingPack.assertAll();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 6, 4, 600, 5, 4);
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+    @Test
+    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
     }
 
     @Test
-    public void add_buy_order_not_enough_credit_causes_rollback() {
-        Order order = new Order(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(9000);
-        MatchingOutcome res = security.addNewOrder(order, matcher).outcome();
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+    
+    @Test
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedBuyerCredit = 10000;
+        assertPack.assertBuyerCredit();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 9000;
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+    @Test
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedBuyerPosition = 40;
+        assertPack.assertBuyerPosition();
     }
 
     @Test
-    public void add_buy_ice_order_not_enough_credit_causes_rollback() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(78000);
-        MatchingOutcome res = security.addNewOrder(order, matcher).outcome();
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedSellerCredit = 30000;
+        assertPack.assertSellerCredit();
+    }
 
-        AssertingPack.exceptedBuyerCredit = 78000;
-        AssertingPack.assertAll();
-        assertThat(res).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-        AssertingPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        AssertingPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        AssertingPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
-        AssertingPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
-        AssertingPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000);
+    @Test
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedSellerPosition = 45;
+        assertPack.assertSellerPosition();
     }
 
     @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished() {
-        Order order = new Order(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(75000);
-        security.addNewOrder(order, matcher);
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 45, 1000, 10, 10);
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 75000;
-        AssertingPack.exceptedSellerPosition = 0;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getSellQueue().size()).isZero();
+    @Test
+    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
         assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
     }
 
+    @Test 
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+    }
+
+    @Test 
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertBuyerCredit();
+    }
+
     @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished() {
-        IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(75000);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedBuyerPosition = 22;
+        assertPack.assertBuyerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 75000;
-        AssertingPack.exceptedSellerPosition = 0;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+    @Test
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedSellerCredit = 14600;
+        assertPack.assertSellerCredit();
     }
 
     @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished() {
-        Order order = new Order(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder);
-        buyerBroker.increaseCreditBy(90000);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.exceptedSellerPosition = 63;
+        assertPack.assertSellerPosition();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 75000;
-        AssertingPack.exceptedSellerPosition = 0;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000);
+    @Test
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 8, 800);
     }
 
     @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished() {
-        IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder, 10);
-        buyerBroker.increaseCreditBy(90000);
-        security.addNewOrder(order, matcher);
+    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+    }
 
-        AssertingPack.exceptedBuyerPosition = 85;
-        AssertingPack.exceptedSellerCredit = 75000;
-        AssertingPack.exceptedSellerPosition = 0;
-        AssertingPack.assertAll();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-        AssertingPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000, 10, 10);
+    // FIXME: These three have race condition problem
+    // @Test
+    // public void add_two_buy_orders_with_same_price_and_check_orders_in_queue() {
+    //     scenarioGenerator.add_two_buy_orders_with_same_price();
+    //     assertPack.assertOrderInQueue(Side.BUY, 2, 7, 10, 300);
+    //     assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300);
+    //     assertPack.assertOrderInQueue(Side.BUY, 4, 3, 10, 300);
+    // }
+
+    // @Test
+    // public void add_two_buy_ice_orders_with_same_price_and_check_orders_in_queue() {
+        //     scenarioGenerator.add_two_buy_ice_orders_with_same_price();
+        //     assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+        //     assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300, 10, 10);
+        //     assertPack.assertOrderInQueue(Side.BUY, 4, 7, 10, 300, 10, 10);
+    // }
+
+    // @Test
+    // public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_match_result() {
+        //     MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
+        //     assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+        // }
+        
+    @Test
+    public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_orders_in_queue() {
+        scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
+        assertPack.assertOrderInQueue(Side.BUY, 2, 7, 10, 300);
+        assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300);
+        assertPack.assertOrderInQueue(Side.BUY, 4, 3, 10, 300);
     }
+    
+    @Test
+    public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_match_result() {
+        MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
+        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+    }
+    
+    // FIXME: This has race condition problem
+    // @Test
+    // public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_orders_in_queue() {
+    //     scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
+    //     assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+    //     assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300, 10, 10);
+    //     assertPack.assertOrderInQueue(Side.BUY, 4, 7, 10, 300, 10, 10);
+    // }
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
index 24cfe0e..eeb7c0b 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
@@ -41,7 +41,7 @@ public class RequestDispatcherTest {
     @Test
     @Disabled("Needs Artemis running to work.")
     void request_channel_integration_works() {
-        EnterOrderRq rq = EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 0, 0, 0);
+        EnterOrderRq rq = EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 0, 0, 0, 0);
         jmsTemplate.convertAndSend(requestQueue, rq);
         verify(mockOrderHandler, timeout(1000)).handleEnterOrder(rq);
     }
