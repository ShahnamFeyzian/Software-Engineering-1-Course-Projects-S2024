diff --git a/A6 - Remove Technical Debt/Description/SE1S03-A6-Description.pdf b/A6 - Remove Technical Debt/Description/SE1S03-A6-Description.pdf
new file mode 100644
index 0000000..13ab522
--- /dev/null
+++ b/A6 - Remove Technical Debt/Description/SE1S03-A6-Description.pdf	
@@ -0,0 +1,53 @@
+‫دانشکده مهندسی برق و کامپیوتر‬
+
+‫مهندسی نرم‌افزار ‪۱‬‬
+
+‫مدرس‪ :‬رامتین خسروی‬
+‫بهار ‪۱۴۰۳‬‬
+
+                               ‫تکلیف شش‬
+
+                               ‫پرداخت بدهی فنی‬
+
+‫هدف این تکلیف پرداخت بدهی‌های فنی ایجاد شده در تکلیف قبل است‪ .‬با توجه به این که برای انجام‬
+‫تکلیف قبل زمان کمی در اختیار داشتید‪ ،‬احتمالاً در برخی موقعیت‌ها از طراحی خوب صر ‌فنظر کرد ‌هاید که‬
+‫منجر به ایجاد بدهی فنی شده است‪ .‬برای رفع این بدهی در این تکلیف نقاط ضعف طرح خود را ترمیم‬
+
+                                                                                                              ‫خواهید کرد‪.‬‬
+
+‫در مهلت انجام این تکلیف‪ ،‬م ‌یتوانید خطاهای ایجاد شده در مرحله قبل را نیز برطرف کنید یا سناریوهای‬
+‫خاصی که به آن نپرداخته‌اید را تکمیل کنید‪ .‬به این ترتیب در صورتی که هر یک از آزمای ‌ههای ‪ fail‬شده تکلیف‬
+
+                                                         ‫قبل را ترمیم کنید ‪ ۵۰‬درصد نمره آن را دریافت خواهید کرد‪.‬‬
+
+                                                                          ‫نحوه ارزیابی‬
+
+                                                        ‫پاس ‌خهای شما به این تکلیف از جنبه‌های زیر ارزیابی می‌شود‪.‬‬
+
+                                                                                ‫● حفظ درستی عملکرد (‪ ۲۰‬درصد)‬
+                                ‫○ خراب نکردن کارکردهایی که در تکلیف قبل درست کار م ‌یکرد ‌هاند‪.‬‬
+
+                                                                         ‫● تمیزی کد در جنبه‌های زیر (‪ ۴۰‬درصد)‬
+                               ‫○ نا ‌مگذاری خوانا و ه ‌مخوان با زبان فراگیر (‪)ubiquitous language‬‬
+
+                                                                 ‫○ متدهای کوتاهی که یک وظیفه دارند‬
+                                                                  ‫○ سپردن وظایف به کلاس‌های مرتبط‬
+                                   ‫○ رعایت انسجام (‪ )cohesion‬بالا و وابستگی پایین بین کلاس‌ها‬
+
+                                                                                          ‫○ نبود کد تکراری‬
+                                                                   ‫● کدهای آزمون در جنب ‌ههای زیر (‪ ۴۰‬درصد)‬
+                                                             ‫○ سناریوهای مختلف اجرا آزموده شوند‬
+                               ‫○ هر آزمایه یک هدف داشته باشد‪ ،‬یعنی وجود یک خطا را بیازماید‬
+                       ‫○ نام آزمای ‌هها را طوری انتخاب کنید که هدف آن را به طور واضح بیان کند‬
+
+                                                             ‫نحوه تحویل‬
+
+‫برای تحویل تکلیف‪ ،‬لازم است که ‪ SHA‬آخرین کامیت مخزن پروژه تیم (روی گیت‌هاب) و همینطور لینک‬
+‫مخزن ‪ GitHub‬در محل مشخص‌شده در ای‌لرن وارد شود‪ .‬یادآوری می‌نماید برای تکلیف‌های گروهی امکان‬
+‫تحویل با تأخیر وجود ندارد‪ .‬به همین خاطر توصیه م ‌یشود توسعه خود را در بخ ‌ شهای کوچک انجام دهید‬
+
+                                                   ‫و پس از اطمینان از صحت آن بخش‪ ،‬آن را در مخزن ‪ push‬کنید‪.‬‬
+
+‫دقت کنید این تکلیف تحویل حضوری خواهد داشت‪ .‬حضور تمام اعضای گروه هنگام تحویل ضروری است و‬
+                                                               ‫اعضای غایب نمره این تکلیف را از دست خواهند داد‪.‬‬
+
diff --git a/A6 - Remove Technical Debt/Description/doc.txt b/A6 - Remove Technical Debt/Description/doc.txt
new file mode 100644
index 0000000..4d78ffd
--- /dev/null
+++ b/A6 - Remove Technical Debt/Description/doc.txt	
@@ -0,0 +1 @@
+https://docs.google.com/document/d/10wccSlsl0hQb_kLe50ht6ReLuwo4F9MbFXxPfDo41To/edit
\ No newline at end of file
diff --git a/A6 - Remove Technical Debt/HELP.md b/A6 - Remove Technical Debt/HELP.md
new file mode 100644
index 0000000..12135cc
--- /dev/null
+++ b/A6 - Remove Technical Debt/HELP.md	
@@ -0,0 +1,13 @@
+### Reference Documentation
+
+For further reference, please consider the following sections:
+
+- [Technical Debt Wikipedia](https://en.wikipedia.org/wiki/Technical_debt)
+- [Technical Debt Article](https://www.productplan.com/glossary/technical-debt/)
+
+### Guides
+
+The following guides illustrate how to use some features concretely:
+
+- [How to Deal with Technical Debt](https://medium.com/@techworldwithmilan/how-to-deal-with-technical-debt-b0065c1a794d)
+- [Dealing with Technical Debt](https://www.atlassian.com/agile/software-development/technical-debt)
diff --git a/README.md b/README.md
index f670cc2..a5cd424 100644
--- a/README.md
+++ b/README.md
@@ -8,6 +8,7 @@
   - [Assignment 3: Unit Testing](#assignment-3-unit-testing)
   - [Assignment 4: Minimum Execution Quantity](#assignment-4-minimum-execution-quantity)
   - [Assignment 5: Stop Limit Order](#assignment-5-stop-limit-order)
+  - [Assignment 6: Technical Debt](#assignment-6-technical-debt)
 
 ## Intro
 
@@ -36,3 +37,7 @@ In this assignment, we were supposed to add a simple feature to the `TinyME` app
 ## Assignment 5: Stop Limit Order
 
 In this assignment, we were supposed to add a new type of order to the `TinyME` application. The new order type is called `Stop Limit Order`. For more information, please refer to the description file in the `A5` folder.
+
+## Assignment 6: Technical Debt
+
+In this assignment, we were supposed to refactor the `TinyME` application to remove the technical debt, since the last version of the application was not well-designed. The technical debt was supposed to be removed in a way that the existing tests would not fail. For more information, please refer to the description file in the `A6` folder.
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java
index ddc25f2..4ca7d11 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Broker.java
@@ -10,31 +10,37 @@ import lombok.ToString;
 @EqualsAndHashCode(onlyExplicitlyIncluded = true)
 @Builder
 public class Broker {
-    @Getter
-    @EqualsAndHashCode.Include
-    private long brokerId;
-    @Getter
-    private String name;
-    @Getter
-    private long credit;
-
-    public void increaseCreditBy(long amount) {
-        if (amount < 0)
-            throw new IllegalArgumentException("negative amount passed to increaseCreditBy method in Broker class");
-
-        credit += amount;
-    }
-
-    public void decreaseCreditBy(long amount) {
-        if (amount < 0)
-            throw new IllegalArgumentException("negative amount passed to decreaseCreditBy method in Broker class");
-        if (!hasEnoughCredit(amount))
-            throw new NotEnoughCreditException();
-
-        credit -= amount;
-    }
-
-    public boolean hasEnoughCredit(long amount) { //TODO should be private in future update
-        return credit >= amount;
-    }
+
+	@Getter
+	@EqualsAndHashCode.Include
+	private long brokerId;
+
+	@Getter
+	private String name;
+
+	@Getter
+	private long credit;
+
+	public void increaseCreditBy(long amount) {
+		if (amount < 0) {
+			throw new IllegalArgumentException("negative amount passed to increaseCreditBy method in Broker class");
+		}
+
+		credit += amount;
+	}
+
+	public void decreaseCreditBy(long amount) {
+		if (amount < 0) {
+			throw new IllegalArgumentException("negative amount passed to decreaseCreditBy method in Broker class");
+		}
+		if (!hasEnoughCredit(amount)) {
+			throw new NotEnoughCreditException();
+		}
+
+		credit -= amount;
+	}
+
+	private boolean hasEnoughCredit(long amount) {
+		return credit >= amount;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
index e2c39d5..7e95067 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/IcebergOrder.java
@@ -1,130 +1,329 @@
 package ir.ramtung.tinyme.domain.entity;
 
 import ir.ramtung.tinyme.domain.exception.InvalidIcebergPeakSizeException;
+import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import java.time.LocalDateTime;
+import java.util.List;
+
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.ToString;
 
-import java.time.LocalDateTime;
-
 @Getter
 @EqualsAndHashCode(callSuper = true)
 @ToString(callSuper = true)
 public class IcebergOrder extends Order {
-    int peakSize;
-    int displayedQuantity;
-
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
-    Shareholder shareholder, LocalDateTime entryTime, int peakSize, int displayedQuantity, OrderStatus status) {
-        super(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, status);
-        this.peakSize = peakSize;
-        this.displayedQuantity = displayedQuantity;
-    }
-
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
-    Shareholder shareholder, LocalDateTime entryTime, int peakSize, OrderStatus status) {
-        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, Math.min(peakSize, quantity), status);
-    }
-
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
-    Shareholder shareholder, LocalDateTime entryTime, int peakSize) {
-        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, OrderStatus.NEW);
-    }
-
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, 
-    Shareholder shareholder, int peakSize) {
-        super(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder);
-        this.peakSize = peakSize;
-        this.displayedQuantity = Math.min(peakSize, quantity);
-    }
-
-    public IcebergOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, 
-    Shareholder shareholder, int peakSize) {
-        this(orderId, security, side, quantity, 0, price, broker, shareholder, peakSize);
-    }
-
-    @Override
-    public Order snapshot() {
-        return new IcebergOrder(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, OrderStatus.SNAPSHOT);
-    }
-
-    @Override
-    public Order snapshotWithQuantity(int newQuantity) {
-        return new IcebergOrder(orderId, security, side, newQuantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, peakSize, this.status);
-    }
-
-    @Override
-    public int getQuantity() {
-        if (status != OrderStatus.QUEUED)
-            return super.getQuantity();
-        return displayedQuantity;
-    }
-
-    @Override
-    public void queue() {
-        super.queue();
-        if (displayedQuantity > quantity)
-            displayedQuantity = quantity;
-        // TODO
-        // asking for replenish
-    }
-
-    @Override
-    public void decreaseQuantity(int amount) {
-        if (status != OrderStatus.QUEUED) {
-            super.decreaseQuantity(amount); 
-            return;
-        }
-        if (amount > displayedQuantity || amount <= 0)
-            throw new IllegalArgumentException();
-        
-        quantity -= amount;
-        displayedQuantity -= amount;
-        if(displayedQuantity == 0) {
-            status = OrderStatus.DONE;
-            security.deleteOrder(side, orderId);
-            if (quantity != 0) {
-                replenish();
-                security.getOrderBook().enqueue(this);
-            }
-        }
-        // TODO
-        // clean up this shit
-    }
-
-    @Override
-    public void rollback(Order firstVersion) {
-        IcebergOrder fVersion = (IcebergOrder) firstVersion;
-        this.displayedQuantity = fVersion.displayedQuantity;
-        super.rollback(firstVersion);
-    }
-
-    public void replenish() {
-        displayedQuantity = Math.min(quantity, peakSize);
-    }
-
-    @Override
-    public void updateFromTempOrder(Order tempOrder) {
-        super.updateFromTempOrder(tempOrder);
-        IcebergOrder tempIcebergOrder =  (IcebergOrder) tempOrder;
-        if (peakSize < tempIcebergOrder.peakSize || displayedQuantity > quantity)
-            displayedQuantity = Math.min(quantity, tempIcebergOrder.peakSize);
-        peakSize = tempIcebergOrder.peakSize;
-        // TODO
-        // after getting answer about what should happend to displayedQuantity after update fix this part
-    }
-
-    @Override
-    public void checkNewPeakSize(int peakSize) {
-        if (peakSize == 0)
-            throw new InvalidIcebergPeakSizeException();
-    }
-
-    @Override
-    public boolean willPriortyLostInUpdate(Order tempOrder) {
-        if (super.willPriortyLostInUpdate(tempOrder))
-            return true;
-        IcebergOrder tempIcebergOrder = (IcebergOrder) tempOrder;
-        return this.peakSize < tempIcebergOrder.peakSize;
-    }
+
+	int peakSize;
+	int displayedQuantity;
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime,
+		int peakSize,
+		int displayedQuantity,
+		OrderStatus status
+	) {
+		super(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTime,
+			status
+		);
+		this.peakSize = peakSize;
+		this.displayedQuantity = displayedQuantity;
+	}
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		List<LocalDateTime> entryTimes,
+		int peakSize,
+		int displayedQuantity,
+		OrderStatus status
+	) {
+		super(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes,
+			status
+		);
+		this.peakSize = peakSize;
+		this.displayedQuantity = displayedQuantity;
+	}
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime,
+		int peakSize,
+		OrderStatus status
+	) {
+		this(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTime,
+			peakSize,
+			Math.min(peakSize, quantity),
+			status
+		);
+	}
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		List<LocalDateTime> entryTimes,
+		int peakSize,
+		OrderStatus status
+	) {
+		this(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes.getFirst(),
+			peakSize,
+			Math.min(peakSize, quantity),
+			status
+		);
+		this.entryTimes = entryTimes;
+	}
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime,
+		int peakSize
+	) {
+		this(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTime,
+			peakSize,
+			OrderStatus.NEW
+		);
+	}
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		int peakSize
+	) {
+		super(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder);
+		this.peakSize = peakSize;
+		this.displayedQuantity = Math.min(peakSize, quantity);
+	}
+
+	public IcebergOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		int peakSize
+	) {
+		this(orderId, security, side, quantity, 0, price, broker, shareholder, peakSize);
+	}
+
+	public static IcebergOrder createTempOrderByEnterRq(
+		Security security,
+		Broker broker,
+		Shareholder shareholder,
+		EnterOrderRq req
+	) {
+		return new IcebergOrder(
+			req.getOrderId(),
+			security,
+			req.getSide(),
+			req.getQuantity(),
+			req.getMinimumExecutionQuantity(),
+			req.getPrice(),
+			broker,
+			shareholder,
+			req.getEntryTime(),
+			req.getPeakSize(),
+			OrderStatus.NEW
+		);
+	}
+
+	@Override
+	public Order snapshot() {
+		return new IcebergOrder(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes,
+			peakSize,
+			OrderStatus.SNAPSHOT
+		);
+	}
+
+	@Override
+	public Order snapshotWithQuantity(int newQuantity) {
+		return new IcebergOrder(
+			orderId,
+			security,
+			side,
+			newQuantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes,
+			peakSize,
+			this.status
+		);
+	}
+
+	@Override
+	public int getQuantity() {
+		if (status != OrderStatus.QUEUED) {
+			return super.getQuantity();
+		}
+		
+		return displayedQuantity;
+	}
+
+	@Override
+	public void queue() {
+		super.queue();
+		this.replenish();
+	}
+
+	@Override
+	public void decreaseQuantity(int amount) {
+		if (status != OrderStatus.QUEUED) {
+			super.decreaseQuantity(amount);
+			return;
+		}
+		if (amount > displayedQuantity || amount <= 0) {
+			throw new IllegalArgumentException();
+		}
+
+		quantity -= amount;
+		displayedQuantity -= amount;
+		checkEmptyDisplayQuantity();
+	}
+
+	private void checkEmptyDisplayQuantity() {
+		if (displayedQuantity == 0) {
+			status = OrderStatus.DONE;
+			security.deleteOrder(side, orderId);
+			if (quantity != 0) {
+				security.getOrderBook().enqueue(this);
+			}
+		}
+	}
+
+	@Override
+	public void rollback(Order firstVersion) {
+		IcebergOrder fVersion = (IcebergOrder) firstVersion;
+		this.displayedQuantity = fVersion.displayedQuantity;
+		super.rollback(firstVersion);
+	}
+
+	public void replenish() {
+		displayedQuantity = Math.min(quantity, peakSize);
+	}
+
+	@Override
+	public void updateFromTempOrder(Order tempOrder) {
+		super.updateFromTempOrder(tempOrder);
+		IcebergOrder tempIcebergOrder = (IcebergOrder) tempOrder;
+
+		if (peakSize < tempIcebergOrder.peakSize || displayedQuantity > quantity) {
+			displayedQuantity = Math.min(quantity, tempIcebergOrder.peakSize);
+		}
+
+		peakSize = tempIcebergOrder.peakSize;
+	}
+
+	@Override
+	public void checkNewPeakSize(int peakSize) {
+		if (peakSize == 0) {
+			throw new InvalidIcebergPeakSizeException();
+		}
+	}
+
+	@Override
+	public boolean willPriorityLostInUpdate(Order tempOrder) {
+		if (super.willPriorityLostInUpdate(tempOrder)) {
+			return true;
+		}
+
+		IcebergOrder tempIcebergOrder = (IcebergOrder) tempOrder;
+		return this.peakSize < tempIcebergOrder.peakSize;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
index 4f5b5cf..1d168ff 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchResult.java
@@ -5,66 +5,70 @@ import java.util.List;
 import java.util.Objects;
 
 public final class MatchResult {
-    private final MatchingOutcome outcome;
-    private final Order remainder;
-    private final LinkedList<Trade> trades;
-
-    public static MatchResult executed(Order remainder, List<Trade> trades) {
-        return new MatchResult(MatchingOutcome.EXECUTED, remainder, new LinkedList<>(trades));
-    }
-
-    public static MatchResult notEnoughCredit() {
-        return new MatchResult(MatchingOutcome.NOT_ENOUGH_CREDIT, null, new LinkedList<>());
-    }
-
-    public static MatchResult notEnoughPositions() {
-        return new MatchResult(MatchingOutcome.NOT_ENOUGH_POSITIONS, null, new LinkedList<>());
-    }
-
-    public static MatchResult notEnoughExecution() {
-        return new MatchResult(MatchingOutcome.NOT_ENOUGH_EXECUTION, null, new LinkedList<>());
-    }
-
-    private MatchResult(MatchingOutcome outcome, Order remainder, LinkedList<Trade> trades) {
-        this.outcome = outcome;
-        this.remainder = remainder;
-        this.trades = trades;
-    }
-
-    public MatchingOutcome outcome() {
-        return outcome;
-    }
-
-    public Order remainder() {
-        return remainder;
-    }
-
-    public LinkedList<Trade> trades() {
-        return trades;
-    }
-
-    public boolean isSuccessful() {
-        return outcome == MatchingOutcome.EXECUTED;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (obj == this) return true;
-        if (obj == null || obj.getClass() != this.getClass()) return false;
-        var that = (MatchResult) obj;
-        return Objects.equals(this.remainder, that.remainder) &&
-                Objects.equals(this.trades, that.trades);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(remainder, trades);
-    }
-
-    @Override
-    public String toString() {
-        return "MatchResult[" +
-                "remainder=" + remainder + ", " +
-                "trades=" + trades + ']';
-    }
+
+	private final MatchingOutcome outcome;
+	private final Order remainder;
+	private final LinkedList<Trade> trades;
+
+	public static MatchResult executed(Order remainder, List<Trade> trades) {
+		return new MatchResult(MatchingOutcome.EXECUTED, remainder, new LinkedList<>(trades));
+	}
+
+	public static MatchResult notEnoughCredit() {
+		return new MatchResult(MatchingOutcome.NOT_ENOUGH_CREDIT, null, new LinkedList<>());
+	}
+
+	public static MatchResult notEnoughPositions() {
+		return new MatchResult(MatchingOutcome.NOT_ENOUGH_POSITIONS, null, new LinkedList<>());
+	}
+
+	public static MatchResult notEnoughExecution() {
+		return new MatchResult(MatchingOutcome.NOT_ENOUGH_EXECUTION, null, new LinkedList<>());
+	}
+
+	private MatchResult(MatchingOutcome outcome, Order remainder, LinkedList<Trade> trades) {
+		this.outcome = outcome;
+		this.remainder = remainder;
+		this.trades = trades;
+	}
+
+	public MatchingOutcome outcome() {
+		return outcome;
+	}
+
+	public Order remainder() {
+		return remainder;
+	}
+
+	public LinkedList<Trade> trades() {
+		return trades;
+	}
+
+	public boolean isSuccessful() {
+		return outcome == MatchingOutcome.EXECUTED;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (obj == this) {
+			return true;
+		}
+
+		if (obj == null || obj.getClass() != this.getClass()) {
+			return false;
+		}
+
+		var that = (MatchResult) obj;
+		return Objects.equals(this.remainder, that.remainder) && Objects.equals(this.trades, that.trades);
+	}
+
+	@Override
+	public int hashCode() {
+		return Objects.hash(remainder, trades);
+	}
+
+	@Override
+	public String toString() {
+		return "MatchResult[" + "remainder=" + remainder + ", " + "trades=" + trades + ']';
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
index 73191ed..3ead40d 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/MatchingOutcome.java
@@ -1,8 +1,8 @@
 package ir.ramtung.tinyme.domain.entity;
 
 public enum MatchingOutcome {
-    EXECUTED,
-    NOT_ENOUGH_CREDIT,
-    NOT_ENOUGH_POSITIONS,
-    NOT_ENOUGH_EXECUTION
+	EXECUTED,
+	NOT_ENOUGH_CREDIT,
+	NOT_ENOUGH_POSITIONS,
+	NOT_ENOUGH_EXECUTION,
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
index 0015bd8..c74e33c 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Order.java
@@ -2,174 +2,339 @@ package ir.ramtung.tinyme.domain.entity;
 
 import ir.ramtung.tinyme.domain.exception.CantQueueOrderException;
 import ir.ramtung.tinyme.domain.exception.InvalidPeakSizeException;
+import ir.ramtung.tinyme.domain.exception.InvalidStopLimitPriceException;
 import ir.ramtung.tinyme.domain.exception.NotEnoughExecutionException;
 import ir.ramtung.tinyme.domain.exception.UpdateMinimumExecutionQuantityException;
-import ir.ramtung.tinyme.domain.exception.InvalidStopLimitPriceException;
+import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.ToString;
 
-import java.time.LocalDateTime;
-
 @Builder
 @EqualsAndHashCode
 @ToString
 @Getter
 public class Order {
-    protected long orderId;
-    protected Security security;
-    protected Side side;
-    protected int quantity;
-    protected int minimumExecutionQuantity;
-    protected int price;
-    protected Broker broker;
-    protected Shareholder shareholder;
-    @Builder.Default
-    protected LocalDateTime entryTime = LocalDateTime.now();
-    @Builder.Default
-    protected OrderStatus status = OrderStatus.NEW;
-
-    public Order(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, Shareholder shareholder, 
-    LocalDateTime entryTime, OrderStatus status) {
-        this.orderId = orderId;
-        this.security = security;
-        this.side = side;
-        this.quantity = quantity;
-        this.minimumExecutionQuantity = minimumExecutionQuantity;
-        this.price = price;
-        this.entryTime = entryTime;
-        this.broker = broker;
-        this.shareholder = shareholder;
-        this.status = status;
-    }
-
-    public Order(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, Shareholder shareholder, 
-    LocalDateTime entryTime) {
-        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, OrderStatus.NEW);
-    }
-
-    public Order(long orderId, Security security, Side side, int quantity, int minimumExecutionQuantity, int price, Broker broker, Shareholder shareholder) {
-        this(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, LocalDateTime.now());
-    }
-
-    public Order(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder) {
-        this(orderId, security, side, quantity, 0, price, broker, shareholder);
-    }
-
-    public Order(Order other) {
-        this(other.orderId, other.security, other.side, other.quantity, 0, other.price, other.broker, other.shareholder, LocalDateTime.now(), OrderStatus.NEW);
-    }
-
-    public Order snapshot() {
-        return new Order(orderId, security, side, quantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, OrderStatus.SNAPSHOT);
-    }
-
-    public Order snapshotWithQuantity(int newQuantity) {
-        return new Order(orderId, security, side, newQuantity, minimumExecutionQuantity, price, broker, shareholder, entryTime, this.status);
-        // TODO
-        // this exists just for unit tests and should remove
-    }
-
-    public boolean matches(Order other) {
-        if (side == Side.BUY)
-            return price >= other.price;
-        else
-            return price <= other.price;
-    }
-
-    public void decreaseQuantity(int amount) {
-        if (amount > quantity || amount <= 0)
-            throw new IllegalArgumentException();
-        
-        quantity -= amount;
-        if(quantity == 0 && status == OrderStatus.QUEUED) {
-            status = OrderStatus.DONE;
-            security.deleteOrder(side, orderId);
-        }
-    }
-
-    public void rollback(Order firstVersion) {
-        this.quantity = firstVersion.quantity;
-        if (status == OrderStatus.DONE) {
-            security.getOrderBook().enqueue(this);
-        }   
-    }
-
-    public void makeQuantityZero() {
-        quantity = 0;
-    }
-
-    public boolean queuesBefore(Order order) {
-        // if (price == order.getPrice())
-        //     return entryTime.isBefore(order.getEntryTime()); // FIXME: this makes conflict with some tests in domain/securityTest
-        if (order.getSide() == Side.BUY) {
-            return price > order.getPrice();
-        } else {
-            return price < order.getPrice();
-        }
-    }
-
-    public void queue() {
-        if (this.status == OrderStatus.QUEUED)
-            throw new CantQueueOrderException();
-        status = OrderStatus.QUEUED;
-    }
-
-    public boolean isQuantityIncreased(int newQuantity) {
-        return newQuantity > quantity;
-    }
-
-    public void updateFromTempOrder(Order tempOrder) {
-        if (!this.willPriortyLostInUpdate(tempOrder) && this.side == Side.BUY) {
-            broker.increaseCreditBy(this.getValue());
-            broker.decreaseCreditBy(tempOrder.getValue());
-        }
-        else
-            this.status = OrderStatus.UPDATING;
-        this.quantity = tempOrder.quantity;
-        this.price = tempOrder.price;
-    }
-
-    public long getValue() {
-        return (long)price * quantity;
-    }
-
-    public int getTotalQuantity() { return quantity; }
-
-    public void checkNewPeakSize(int peakSize) {
-        if (peakSize != 0)
-            throw new InvalidPeakSizeException();
-    }
-
-    public void checkNewMinimumExecutionQuantity(int minimumExecutionQuantity) {
-        if (this.minimumExecutionQuantity != minimumExecutionQuantity)
-            throw new UpdateMinimumExecutionQuantityException();
-    }
-
-    public void checkNewStopLimitPrice(int stopLimitPrice) {
-        if(stopLimitPrice != 0)
-            throw new InvalidStopLimitPriceException();
-    }
-
-    public void checkExecutionQuantity(int quantitySome) {
-        if (this.status != OrderStatus.NEW)
-            return;
-        if (quantitySome < this.minimumExecutionQuantity)
-            throw new NotEnoughExecutionException();
-    }
-
-    public void addYourselfToQueue() {
-        if (this.quantity != 0)
-            this.security.getOrderBook().enqueue(this);
-    }
-
-    public void delete() {
-        if (side == Side.BUY)
-            broker.increaseCreditBy(getValue());
-    }
-
-    public boolean willPriortyLostInUpdate(Order tempOrder) {
-        return (this.quantity < tempOrder.quantity) || (this.price != tempOrder.price);
-    }
+
+	protected long orderId;
+	protected Security security;
+	protected Side side;
+	protected int quantity;
+	protected int minimumExecutionQuantity;
+	protected int price;
+	protected Broker broker;
+	protected Shareholder shareholder;
+	protected List<LocalDateTime> entryTimes = new ArrayList<>();
+
+	@Builder.Default
+	protected OrderStatus status = OrderStatus.NEW;
+
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime,
+		OrderStatus status
+	) {
+		this.orderId = orderId;
+		this.security = security;
+		this.side = side;
+		this.quantity = quantity;
+		this.minimumExecutionQuantity = minimumExecutionQuantity;
+		this.price = price;
+		this.entryTimes.add(entryTime);
+		this.broker = broker;
+		this.shareholder = shareholder;
+		this.status = status;
+	}
+
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		List<LocalDateTime> entryTimes,
+		OrderStatus status
+	) {
+		this.orderId = orderId;
+		this.security = security;
+		this.side = side;
+		this.quantity = quantity;
+		this.minimumExecutionQuantity = minimumExecutionQuantity;
+		this.price = price;
+		this.entryTimes = entryTimes;
+		this.broker = broker;
+		this.shareholder = shareholder;
+		this.status = status;
+	}
+
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime
+	) {
+		this(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTime,
+			OrderStatus.NEW
+		);
+	}
+
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int minimumExecutionQuantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder
+	) {
+		this(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			LocalDateTime.now()
+		);
+	}
+
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder
+	) {
+		this(orderId, security, side, quantity, 0, price, broker, shareholder);
+	}
+
+	public Order(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime
+	) {
+		this(orderId, security, side, quantity, 0, price, broker, shareholder, entryTime);
+	}
+
+	public Order(Order other) {
+		this(
+			other.orderId,
+			other.security,
+			other.side,
+			other.quantity,
+			0,
+			other.price,
+			other.broker,
+			other.shareholder,
+			LocalDateTime.now(),
+			OrderStatus.NEW
+		);
+	}
+
+	public static Order createTempOrderByEnterRq(
+		Security security,
+		Broker broker,
+		Shareholder shareholder,
+		EnterOrderRq req
+	) {
+		return new Order(
+			req.getOrderId(),
+			security,
+			req.getSide(),
+			req.getQuantity(),
+			req.getMinimumExecutionQuantity(),
+			req.getPrice(),
+			broker,
+			shareholder,
+			req.getEntryTime(),
+			OrderStatus.NEW
+		);
+	}
+
+	public Order snapshot() {
+		return new Order(
+			orderId,
+			security,
+			side,
+			quantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes,
+			OrderStatus.SNAPSHOT
+		);
+	}
+
+	public Order snapshotWithQuantity(int newQuantity) {
+		return new Order(
+			orderId,
+			security,
+			side,
+			newQuantity,
+			minimumExecutionQuantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes,
+			this.status
+		);
+	}
+
+	public boolean matches(Order other) {
+		if (side == Side.BUY) {
+			return price >= other.price;
+		}
+
+		return price <= other.price;
+	}
+
+	public void decreaseQuantity(int amount) {
+		if (amount > quantity || amount <= 0) {
+			throw new IllegalArgumentException();
+		}
+
+		quantity -= amount;
+		if (quantity == 0 && status == OrderStatus.QUEUED) {
+			status = OrderStatus.DONE;
+			security.deleteOrder(side, orderId);
+		}
+	}
+
+	public void rollback(Order firstVersion) {
+		this.quantity = firstVersion.quantity;
+		if (status == OrderStatus.DONE) {
+			security.getOrderBook().enqueue(this);
+		}
+	}
+
+	public void makeQuantityZero() {
+		quantity = 0;
+	}
+
+	public boolean queuesBefore(Order order) {
+		if (price == order.getPrice()) {
+			return entryTimes.getLast().isBefore(order.entryTimes.getLast());
+		}
+
+		if (order.getSide() == Side.BUY) {
+			return price > order.getPrice();
+		} else {
+			return price < order.getPrice();
+		}
+	}
+
+	public void queue() {
+		if (this.status == OrderStatus.QUEUED) {
+			throw new CantQueueOrderException();
+		}
+
+		if (side == Side.BUY && status != OrderStatus.LOADING) {
+			broker.decreaseCreditBy(this.getValue());
+		}
+		status = OrderStatus.QUEUED;
+	}
+
+	public boolean isQuantityIncreased(int newQuantity) {
+		return newQuantity > quantity;
+	}
+
+	public void updateFromTempOrder(Order tempOrder) {
+		if (!this.willPriorityLostInUpdate(tempOrder) && this.side == Side.BUY) {
+			broker.increaseCreditBy(this.getValue());
+			broker.decreaseCreditBy(tempOrder.getValue());
+		} else {
+			this.status = OrderStatus.UPDATING;
+		}
+		this.entryTimes.add(LocalDateTime.now());
+		this.quantity = tempOrder.quantity;
+		this.price = tempOrder.price;
+	}
+
+	public long getValue() {
+		return (long) price * quantity;
+	}
+
+	public int getTotalQuantity() {
+		return quantity;
+	}
+
+	public void checkNewPeakSize(int peakSize) {
+		if (peakSize != 0) {
+			throw new InvalidPeakSizeException();
+		}
+	}
+
+	public void checkNewMinimumExecutionQuantity(int minimumExecutionQuantity) {
+		if (this.minimumExecutionQuantity != minimumExecutionQuantity) {
+			throw new UpdateMinimumExecutionQuantityException();
+		}
+	}
+
+	public void checkNewStopLimitPrice(int stopLimitPrice) {
+		if (stopLimitPrice != 0) {
+			throw new InvalidStopLimitPriceException();
+		} 
+	}
+
+	public void checkExecutionQuantity(int quantitySome) {
+		if (!(this.status != OrderStatus.NEW) && (quantitySome < this.minimumExecutionQuantity)) {
+			throw new NotEnoughExecutionException();
+		}
+	}
+
+	public void addYourselfToQueue() {
+		if (this.quantity != 0) {
+			this.security.getOrderBook().enqueue(this);
+		}
+	}
+
+	public void delete() {
+		if (side == Side.BUY) {
+			broker.increaseCreditBy(getValue());
+		}
+	}
+
+	public boolean willPriorityLostInUpdate(Order tempOrder) {
+		return (this.quantity < tempOrder.quantity) || (this.price != tempOrder.price);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
index 7637775..12a7b4d 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderBook.java
@@ -1,185 +1,165 @@
 package ir.ramtung.tinyme.domain.entity;
 
-import lombok.Getter;
-
+import ir.ramtung.tinyme.domain.exception.NotFoundException;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.ListIterator;
-
-import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
-import ir.ramtung.tinyme.domain.exception.NotFoundException;
+import lombok.Getter;
 
 @Getter
 public class OrderBook {
-    private final LinkedList<Order> buyQueue;
-    private final LinkedList<Order> sellQueue;
-    private final LinkedList<StopLimitOrder> stopLimitOrderSellQueue;
-    private final LinkedList<StopLimitOrder> stopLimitOrderBuyQueue;
-
-    public OrderBook() {
-        buyQueue = new LinkedList<>();
-        sellQueue = new LinkedList<>();
-        stopLimitOrderSellQueue = new LinkedList<>();
-        stopLimitOrderBuyQueue = new LinkedList<>();
-    }
-
-    public void enqueueStopLimitOrder(StopLimitOrder order) {
-        if (order.getSide() == Side.BUY && !order.getBroker().hasEnoughCredit(order.getValue()))
-            throw new NotEnoughCreditException();
-        
-        List<StopLimitOrder> queue = getStopLimitOrderQueue(order.getSide());
-        ListIterator<StopLimitOrder> it = queue.listIterator();
-        while (it.hasNext()) {
-            if (order.queuesBefore(it.next())) {
-                it.previous();
-                break;
-            }
-        }
-        order.queue();
-        it.add(order);
-    }
-
-    public void enqueue(Order order) {
-        if(order.getSide() == Side.BUY && order.getStatus() != OrderStatus.LOADING)
-            order.getBroker().decreaseCreditBy(order.getValue());
-        
-        List<Order> queue =  getQueue(order.getSide());
-        ListIterator<Order> it = queue.listIterator();
-        while (it.hasNext()) {
-            if (order.queuesBefore(it.next())) {
-                it.previous();
-                break;
-            }
-        }
-        order.queue();
-        it.add(order);
-    }
-
-    private LinkedList<StopLimitOrder> getStopLimitOrderQueue(Side side) {
-        return (side == Side.BUY) ? stopLimitOrderBuyQueue : stopLimitOrderSellQueue;
-    }
-
-    private LinkedList<Order> getQueue(Side side) {
-        return side == Side.BUY ? buyQueue : sellQueue;
-    }
-
-    // DUP
-    public StopLimitOrder findBySloOrderId(Side side, long orderId) {
-        var queue = getStopLimitOrderQueue(side);
-        for (StopLimitOrder order : queue) {
-            if (order.getOrderId() == orderId)
-                return order;
-        }
-        throw new NotFoundException();
-    }
-
-    public Order findByOrderId(Side side, long orderId) {
-        var queue = getQueue(side);
-        for (Order order : queue) {
-            if (order.getOrderId() == orderId)
-                return order;
-        }
-        throw new NotFoundException();
-    }
-
-    // DUP
-    public boolean isThereSloOrderWithId(Side side, long orderId) {
-        try {
-            findBySloOrderId(side, orderId);
-            return true;
-        }
-        catch (NotFoundException exp) {
-            return false;
-        }
-    }
-    public boolean isThereOrderWithId(Side side, long orderId) {
-        try {
-            findByOrderId(side, orderId);
-            return true;
-        }
-        catch (NotFoundException exp) {
-            return false;
-        }
-    }
-
-    // DUP
-    public void removeBySloOrderId(Side side, long orderId) {
-        LinkedList<StopLimitOrder> queue = getStopLimitOrderQueue(side);
-        StopLimitOrder targetOrder = findBySloOrderId(side, orderId);
-        targetOrder.delete();
-        queue.remove(targetOrder);
-    }
-
-    // DUP
-    public void removeByOrderId(Side side, long orderId) {
-        if(isThereOrderWithId(side, orderId)) {
-            LinkedList<Order> queue = getQueue(side);
-            Order targetOrder = findByOrderId(side, orderId);
-            targetOrder.delete();
-            queue.remove(targetOrder);
-        } else {
-            removeBySloOrderId(side, orderId);
-        }
-    }
-
-    public Order findOrderToMatchWith(Order newOrder) {
-        var queue = getQueue(newOrder.getSide().opposite());
-        if (newOrder.matches(queue.getFirst()))
-            return queue.getFirst();
-        else
-            throw new NotFoundException();
-    }
-
-    public void putBack(Order order) {
-        LinkedList<Order> queue = getQueue(order.getSide());
-        order.queue();
-        queue.addFirst(order);
-    }
-
-    public void restoreSellOrder(Order sellOrder) {
-        removeByOrderId(Side.SELL, sellOrder.getOrderId());
-        putBack(sellOrder);
-    }
-
-    public boolean hasOrderOfType(Side side) {
-        return !getQueue(side).isEmpty();
-    }
-
-    public void removeFirst(Side side) {
-        getQueue(side).removeFirst();
-    }
-
-    public int totalSellQuantityByShareholder(Shareholder shareholder) {
-        return sellQueue.stream()
-                .filter(order -> order.getShareholder().equals(shareholder))
-                .mapToInt(Order::getTotalQuantity)
-                .sum() 
-                +
-               stopLimitOrderSellQueue.stream()
-                .filter(order -> order.getShareholder().equals(shareholder))
-                .mapToInt(Order::getTotalQuantity)
-                .sum();
-    }
-
-    public StopLimitOrder getStopLimitOrder(int lastTradePrice) {
-        StopLimitOrder sloOrder = findSatisfiedStopLimitOrder(stopLimitOrderBuyQueue, lastTradePrice);
-        if (sloOrder != null)
-            return sloOrder;
-
-        sloOrder = findSatisfiedStopLimitOrder(stopLimitOrderSellQueue, lastTradePrice);
-        return sloOrder;
-    }
-
-    private StopLimitOrder findSatisfiedStopLimitOrder(List<StopLimitOrder> queue, int lastTradePrice) {
-        if (queue.size() == 0) 
-            return null;
-
-        StopLimitOrder sloOrder = queue.getFirst();
-        if (sloOrder.isSatisfied(lastTradePrice)) {
-            sloOrder.delete();
-            queue.remove(sloOrder);
-            return sloOrder;
-        }
-        return null;
-    }
+
+	private final LinkedList<Order> buyQueue;
+	private final LinkedList<Order> sellQueue;
+	private final LinkedList<Order> stopLimitOrderSellQueue;
+	private final LinkedList<Order> stopLimitOrderBuyQueue;
+
+	public OrderBook() {
+		buyQueue = new LinkedList<>();
+		sellQueue = new LinkedList<>();
+		stopLimitOrderSellQueue = new LinkedList<>();
+		stopLimitOrderBuyQueue = new LinkedList<>();
+	}
+
+	public void enqueue(Order order) {
+		List<Order> queue = getQueue(order);
+		ListIterator<Order> it = queue.listIterator();
+		while (it.hasNext()) {
+			if (order.queuesBefore(it.next())) {
+				it.previous();
+				break;
+			}
+		}
+		order.queue();
+		it.add(order);
+	}
+
+	private LinkedList<Order> getQueue(Side side) {
+		return side == Side.BUY ? buyQueue : sellQueue;
+	}
+
+	private List<Order> getQueue(Order order) {
+		if (order instanceof StopLimitOrder) {
+			return (order.getSide() == Side.BUY) ? stopLimitOrderBuyQueue : stopLimitOrderSellQueue;
+		} else {
+			return (order.getSide() == Side.BUY) ? buyQueue : sellQueue;
+		}
+	}
+
+	public Order findByOrderId(Side side, long orderId) {
+		List<Order> queue = (side == Side.BUY) ? buyQueue : sellQueue;
+		Order order = searchForOrderInQueue(side, orderId, queue);
+		if (order != null) {
+			return order;
+		}
+
+		queue = (side == Side.BUY) ? stopLimitOrderBuyQueue : stopLimitOrderSellQueue;
+		order = searchForOrderInQueue(side, orderId, queue);
+
+		if (order == null) {
+			throw new NotFoundException();
+		}
+		return order;
+	}
+
+	private Order searchForOrderInQueue(Side side, long orderId, List<Order> queue) {
+		for (Order order : queue) {
+			if (order.getOrderId() == orderId) {
+				return order;
+			}
+		}
+		return null;
+	}
+
+	public boolean isThereOrderWithId(Side side, long orderId) {
+		try {
+			findByOrderId(side, orderId);
+			return true;
+		} catch (NotFoundException exp) {
+			return false;
+		}
+	}
+
+	public void removeByOrderId(Side side, long orderId) {
+		Order targetOrder = findByOrderId(side, orderId);
+		List<Order> queue = getQueue(targetOrder);
+		targetOrder.delete();
+		queue.remove(targetOrder);
+	}
+
+	public Order findOrderToMatchWith(Order newOrder) {
+		var queue = getQueue(newOrder.getSide().opposite());
+
+		if (newOrder.matches(queue.getFirst())) {
+			return queue.getFirst();
+		}
+
+		throw new NotFoundException();
+	}
+
+	public void putBack(Order order) {
+		LinkedList<Order> queue = getQueue(order.getSide());
+		order.queue();
+		queue.addFirst(order);
+	}
+
+	public void restoreSellOrder(Order sellOrder) {
+		removeByOrderId(Side.SELL, sellOrder.getOrderId());
+		putBack(sellOrder);
+	}
+
+	public boolean hasOrderOfType(Side side) {
+		return !getQueue(side).isEmpty();
+	}
+
+	public void removeFirst(Side side) {
+		getQueue(side).removeFirst();
+	}
+
+	public int totalSellQuantityByShareholder(Shareholder shareholder) {
+		return (
+			sellQueue
+				.stream()
+				.filter(order -> order.getShareholder().equals(shareholder))
+				.mapToInt(Order::getTotalQuantity)
+				.sum() +
+			stopLimitOrderSellQueue
+				.stream()
+				.filter(order -> order.getShareholder().equals(shareholder))
+				.mapToInt(Order::getTotalQuantity)
+				.sum()
+		);
+	}
+
+	private StopLimitOrder findSatisfiedStopLimitOrderBuyQueue(int lastTradePrice) {
+		return findSatisfiedStopLimitOrder(stopLimitOrderBuyQueue, lastTradePrice);
+	}
+
+	private StopLimitOrder findSatisfiedStopLimitOrderSellQueue(int lastTradePrice) {
+		return findSatisfiedStopLimitOrder(stopLimitOrderSellQueue, lastTradePrice);
+	}
+
+	public StopLimitOrder getStopLimitOrder(int lastTradePrice) {
+		StopLimitOrder sloOrder = findSatisfiedStopLimitOrderBuyQueue(lastTradePrice);
+
+		if (sloOrder == null) {
+			sloOrder = findSatisfiedStopLimitOrderSellQueue(lastTradePrice);
+		}
+
+		return sloOrder;
+	}
+
+	private StopLimitOrder findSatisfiedStopLimitOrder(List<Order> queue, int lastTradePrice) {
+		if (queue.size() == 0) {
+			return null;
+		}
+
+		StopLimitOrder sloOrder = (StopLimitOrder) queue.getFirst();
+		if (sloOrder.isSatisfied(lastTradePrice)) {
+			sloOrder.delete();
+			queue.remove(sloOrder);
+			return sloOrder;
+		}
+		return null;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
index 2e9224c..292e676 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/OrderStatus.java
@@ -1,10 +1,10 @@
 package ir.ramtung.tinyme.domain.entity;
 
 public enum OrderStatus {
-    NEW,
-    UPDATING,
-    QUEUED,
-    SNAPSHOT,
-    LOADING,
-    DONE
+	NEW,
+	UPDATING,
+	QUEUED,
+	SNAPSHOT,
+	LOADING,
+	DONE,
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
index e825367..96e08e9 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Security.java
@@ -1,193 +1,192 @@
 package ir.ramtung.tinyme.domain.entity;
 
 import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
-import ir.ramtung.tinyme.domain.exception.NotFoundException;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import ir.ramtung.tinyme.domain.exception.NotEnoughPositionException;
 import ir.ramtung.tinyme.domain.service.Matcher;
 import ir.ramtung.tinyme.messaging.Message;
-import lombok.Builder;
-import lombok.Getter;
-
+import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
+import lombok.Builder;
+import lombok.Getter;
 
 @Getter
 @Builder
 public class Security {
-    private String isin;
-    @Builder.Default
-    private int tickSize = 1;
-    @Builder.Default
-    private int lotSize = 1;
-    @Builder.Default
-    private OrderBook orderBook = new OrderBook();
-    private int lastTradePrice;
-
-    public List<MatchResult> addNewOrder(Order newOrder, Matcher matcher) {
-        try {
-            List<MatchResult> results = new ArrayList<>();
-            checkPositionForNewOrder(newOrder);
-
-            if (newOrder instanceof StopLimitOrder newStopLimitOrder) {
-                addNewStopLimitOrder(newStopLimitOrder);
-                results.addFirst(MatchResult.executed(newOrder, List.of()));
-            }
-            else {
-                MatchResult newOrderMatchResult = matcher.execute(newOrder);
-                updateLastTradePrice(newOrderMatchResult.trades());
-                results.addFirst(newOrderMatchResult);
-            }
-
-            results.addAll(executeStopLimitOrders(matcher));
-            return results;
-        }
-        catch (NotEnoughPositionException exp) {
-            return List.of(MatchResult.notEnoughPositions());
-        }
-        catch (NotEnoughCreditException exp) {
-            return List.of(MatchResult.notEnoughCredit());
-        }
-    }
-
-    private void updateLastTradePrice(List<Trade> trades) {
-        if (!trades.isEmpty())
-            lastTradePrice = trades.getLast().getPrice();
-    }
-
-    private void addNewStopLimitOrder(StopLimitOrder newOrder) {
-        orderBook.enqueueStopLimitOrder(newOrder);
-    }
-
-    private void checkPositionForNewOrder(Order newOrder) {
-        if (newOrder.getSide() == Side.BUY)
-            return;
-        
-        Shareholder shareholder = newOrder.getShareholder();
-        int salesAmount = newOrder.getQuantity();
-        int queuedPositionAmount = orderBook.totalSellQuantityByShareholder(shareholder);
-        int totalNeededPosition = salesAmount + queuedPositionAmount;
-        if (!shareholder.hasEnoughPositionsOn(this, totalNeededPosition)) 
-            throw new NotEnoughPositionException();
-    }
-
-    public void deleteOrder(Side side, long orderId) {
-        orderBook.removeByOrderId(side, orderId);
-    }
-
-    // DUP
-    public List<MatchResult> updateSloOrder(StopLimitOrder tempOrder, Matcher matcher) {
-        try {
-            StopLimitOrder mainOrder = (StopLimitOrder) findByOrderId(tempOrder.getSide(), tempOrder.getOrderId());
-            checkPositionForUpdateOrder(mainOrder, tempOrder);
-            StopLimitOrder originalOrder = mainOrder.snapshot();
-            orderBook.removeByOrderId(originalOrder.getSide(), originalOrder.getOrderId());
-            mainOrder.updateFromTempSloOrder(tempOrder);
-            return reAddUpdatedSloOrder(mainOrder, originalOrder, matcher);
-
-        }
-        catch (NotEnoughPositionException exp) {
-            return List.of(MatchResult.notEnoughPositions());
-        }
-    }
-    // DUP
-    private List<MatchResult> reAddUpdatedSloOrder(StopLimitOrder updatedOrder, StopLimitOrder originalOrder, Matcher matcher) {
-        try {
-            List<MatchResult> results = new LinkedList<>();
-            results.add(MatchResult.executed(updatedOrder, List.of()));
-            addNewStopLimitOrder(updatedOrder);
-            results.addAll(executeStopLimitOrders(matcher));
-            return results;
-        }
-        catch (NotEnoughCreditException exp) {
-            addNewStopLimitOrder(originalOrder);
-            return List.of(MatchResult.notEnoughCredit());
-        }
-    }
-
-    public List<MatchResult> updateOrder(Order tempOrder, Matcher matcher) {
-        try {
-            Order mainOrder = findByOrderId(tempOrder.getSide(), tempOrder.getOrderId());
-            checkPositionForUpdateOrder(mainOrder, tempOrder);
-            boolean losesPriority = mainOrder.willPriortyLostInUpdate(tempOrder);
-            if (losesPriority) {
-                Order originalOrder = mainOrder.snapshot();
-                orderBook.removeByOrderId(originalOrder.getSide(), originalOrder.getOrderId());
-                mainOrder.updateFromTempOrder(tempOrder);
-                return reAddUpdatedOrder(mainOrder, originalOrder, matcher);
-            }
-            else {
-                mainOrder.updateFromTempOrder(tempOrder);
-                return List.of(MatchResult.executed(null, List.of()));
-            }
-        }
-        catch (NotEnoughPositionException exp) {
-            return List.of(MatchResult.notEnoughPositions());
-        }
-    }
-
-    private List<MatchResult> reAddUpdatedOrder(Order updatedOrder, Order originalOrder, Matcher matcher) {
-        MatchResult updatedOrderResult = matcher.execute(updatedOrder);
-        if (updatedOrderResult.outcome() != MatchingOutcome.EXECUTED) {
-            orderBook.enqueue(originalOrder);
-        }
-        updateLastTradePrice(updatedOrderResult.trades());
-        List<MatchResult> results = executeStopLimitOrders(matcher);
-        results.addFirst(updatedOrderResult);
-        return results;
-        // TODO
-        // this is just painkiller, it should be treated properly
-    }
-
-    private void checkPositionForUpdateOrder(Order mainOrder, Order tempOrder) {
-        if (mainOrder.getSide() == Side.BUY)
-            return;
-        
-        Shareholder shareholder = mainOrder.getShareholder();
-        int pervSalesAmount = mainOrder.getTotalQuantity();
-        int newSalesAmount = tempOrder.getTotalQuantity();
-        int queuedPositionAmount = orderBook.totalSellQuantityByShareholder(shareholder);
-        int totalNeededPosition = newSalesAmount + queuedPositionAmount - pervSalesAmount;
-        if (!shareholder.hasEnoughPositionsOn(this, totalNeededPosition)) 
-            throw new NotEnoughPositionException();
-    }
-
-    public List<String> checkLotAndTickSize(EnterOrderRq order) {
-        List<String> errors = new LinkedList<>();
-        if (order.getQuantity() % lotSize != 0)
-            errors.add(Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE);
-        if (order.getPrice() % tickSize != 0)
-            errors.add(Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE);
-    
-        return errors;
-    }
-
-    private List<MatchResult> executeStopLimitOrders(Matcher matcher) {
-        List<MatchResult> results = new LinkedList<>();
-        StopLimitOrder sloOrder;
-        while((sloOrder = orderBook.getStopLimitOrder(lastTradePrice)) != null) {
-            Order activedOrder = new Order(sloOrder);
-            MatchResult result = matcher.execute(activedOrder);
-            updateLastTradePrice(result.trades());
-            results.add(result);
-        }
-        return results;
-    }
-
-    // DUP
-    public Order findByOrderId(Side side, long orderId) {
-        try {
-            return orderBook.findByOrderId(side, orderId);
-        }
-        catch (NotFoundException exp) {
-            return orderBook.findBySloOrderId(side, orderId);
-        }
-
-    }
-
-    // DUP
-    public boolean isThereOrderWithId(Side side, long orderId) {
-        return (orderBook.isThereOrderWithId(side, orderId) || orderBook.isThereSloOrderWithId(side, orderId));
-    }
+
+	private String isin;
+
+	@Builder.Default
+	private int tickSize = 1;
+
+	@Builder.Default
+	private int lotSize = 1;
+
+	@Builder.Default
+	private OrderBook orderBook = new OrderBook();
+
+	private int lastTradePrice;
+
+	public List<MatchResult> addNewOrder(Order newOrder, Matcher matcher) {
+		try {
+			List<MatchResult> results = new ArrayList<>();
+			checkPositionForNewOrder(newOrder);
+			handleAdd(newOrder, matcher, results);
+			results.addAll(executeStopLimitOrders(matcher));
+			return results;
+		} catch (NotEnoughPositionException exp) {
+			return List.of(MatchResult.notEnoughPositions());
+		} catch (NotEnoughCreditException exp) {
+			return List.of(MatchResult.notEnoughCredit());
+		}
+	}
+
+	private void handleAdd(Order newOrder, Matcher matcher, List<MatchResult> results) {
+		if (newOrder instanceof StopLimitOrder newStopLimitOrder) {
+			addNewStopLimitOrder(newStopLimitOrder);
+			results.addFirst(MatchResult.executed(newOrder, List.of()));
+		} else {
+			MatchResult newOrderMatchResult = matcher.execute(newOrder);
+			updateLastTradePrice(newOrderMatchResult.trades());
+			results.addFirst(newOrderMatchResult);
+		}
+	}
+
+	private void updateLastTradePrice(List<Trade> trades) {
+		if (!trades.isEmpty()) {
+			lastTradePrice = trades.getLast().getPrice();
+		}
+	}
+
+	private void addNewStopLimitOrder(StopLimitOrder newOrder) {
+		orderBook.enqueue(newOrder);
+	}
+
+	private void checkPositionForNewOrder(Order newOrder) {
+		if (newOrder.getSide() == Side.BUY) {
+			return;
+		}
+
+		Shareholder shareholder = newOrder.getShareholder();
+		int salesAmount = newOrder.getQuantity();
+		int queuedPositionAmount = orderBook.totalSellQuantityByShareholder(shareholder);
+		int totalNeededPosition = salesAmount + queuedPositionAmount;
+
+		if (!shareholder.hasEnoughPositionsOn(this, totalNeededPosition)) {
+			throw new NotEnoughPositionException();
+		}
+	}
+
+	public void deleteOrder(Side side, long orderId) {
+		orderBook.removeByOrderId(side, orderId);
+	}
+
+	public List<MatchResult> updateOrder(Order tempOrder, Matcher matcher) {
+		try {
+			Order mainOrder = findByOrderId(tempOrder.getSide(), tempOrder.getOrderId());
+			checkPositionForUpdateOrder(mainOrder, tempOrder);
+			boolean losesPriority = mainOrder.willPriorityLostInUpdate(tempOrder);
+			return handleUpdate(tempOrder, matcher, mainOrder, losesPriority);
+		} catch (NotEnoughPositionException exp) {
+			return List.of(MatchResult.notEnoughPositions());
+		}
+	}
+
+	private List<MatchResult> handleUpdate(Order tempOrder, Matcher matcher, Order mainOrder, boolean losesPriority) {
+		if (losesPriority) {
+			Order originalOrder = mainOrder.snapshot();
+			orderBook.removeByOrderId(originalOrder.getSide(), originalOrder.getOrderId());
+			mainOrder.updateFromTempOrder(tempOrder);
+			return reAddUpdatedOrder(mainOrder, originalOrder, matcher);
+		} else {
+			mainOrder.updateFromTempOrder(tempOrder);
+			return List.of(MatchResult.executed(null, List.of()));
+		}
+	}
+
+	private List<MatchResult> reAddUpdatedOrder(Order updatedOrder, Order originalOrder, Matcher matcher) {
+		if (updatedOrder instanceof StopLimitOrder updatedSlo) {
+			StopLimitOrder originalSlo = (StopLimitOrder) originalOrder;
+			return reAddUpdatedSlo(updatedSlo, originalSlo, matcher);
+		} else {
+			return reAddActiveOrder(updatedOrder, originalOrder, matcher);
+		}
+	}
+
+	private List<MatchResult> reAddActiveOrder(Order updatedOrder, Order originalOrder, Matcher matcher) {
+		MatchResult updatedOrderResult = matcher.execute(updatedOrder);
+
+		if (updatedOrderResult.outcome() != MatchingOutcome.EXECUTED) {
+			orderBook.enqueue(originalOrder);
+		}
+
+		updateLastTradePrice(updatedOrderResult.trades());
+		List<MatchResult> results = executeStopLimitOrders(matcher);
+		results.addFirst(updatedOrderResult);
+		return results;
+	}
+
+	private List<MatchResult> reAddUpdatedSlo(StopLimitOrder updatedOrder,StopLimitOrder originalOrder,Matcher matcher) {
+		try {
+			List<MatchResult> results = new LinkedList<>();
+			results.add(MatchResult.executed(updatedOrder, List.of()));
+			addNewStopLimitOrder(updatedOrder);
+			results.addAll(executeStopLimitOrders(matcher));
+			return results;
+		} catch (NotEnoughCreditException exp) {
+			addNewStopLimitOrder(originalOrder);
+			return List.of(MatchResult.notEnoughCredit());
+		}
+	}
+
+	private void checkPositionForUpdateOrder(Order mainOrder, Order tempOrder) {
+		if (mainOrder.getSide() == Side.BUY) return;
+
+		Shareholder shareholder = mainOrder.getShareholder();
+		int pervSalesAmount = mainOrder.getTotalQuantity();
+		int newSalesAmount = tempOrder.getTotalQuantity();
+		int queuedPositionAmount = orderBook.totalSellQuantityByShareholder(shareholder);
+		int totalNeededPosition = newSalesAmount + queuedPositionAmount - pervSalesAmount;
+
+		if (!shareholder.hasEnoughPositionsOn(this, totalNeededPosition)) {
+			throw new NotEnoughPositionException();
+		}
+	}
+
+	public List<String> checkLotAndTickSize(EnterOrderRq order) {
+		List<String> errors = new LinkedList<>();
+		
+		if (order.getQuantity() % lotSize != 0) {
+			errors.add(Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE);
+		}
+
+		if (order.getPrice() % tickSize != 0) {
+			errors.add(Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE);
+		}
+
+		return errors;
+	}
+
+	private List<MatchResult> executeStopLimitOrders(Matcher matcher) {
+		List<MatchResult> results = new LinkedList<>();
+		StopLimitOrder sloOrder;
+
+		while ((sloOrder = orderBook.getStopLimitOrder(lastTradePrice)) != null) {
+			Order activatedOrder = new Order(sloOrder);
+			MatchResult result = matcher.execute(activatedOrder);
+			updateLastTradePrice(result.trades());
+			results.add(result);
+		}
+
+		return results;
+	}
+
+	public Order findByOrderId(Side side, long orderId) {
+		return orderBook.findByOrderId(side, orderId);
+	}
+
+	public boolean isThereOrderWithId(Side side, long orderId) {
+		return orderBook.isThereOrderWithId(side, orderId);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java
index a58ab26..dce6a1c 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Shareholder.java
@@ -1,44 +1,49 @@
 package ir.ramtung.tinyme.domain.entity;
 
+import java.util.HashMap;
+import java.util.Map;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.ToString;
 
-import java.util.HashMap;
-import java.util.Map;
-
 @ToString
 @EqualsAndHashCode(onlyExplicitlyIncluded = true)
 @Builder
 public class Shareholder {
-    @Getter
-    @EqualsAndHashCode.Include
-    private long shareholderId;
-    @Getter
-    private String name;
-    @Getter
-    @Builder.Default
-    private Map<Security, Integer> positions = new HashMap<>();
-
-    public void incPosition(Security security, int amount) {
-        assert amount >= 0;
-        positions.put(security, positions.getOrDefault(security, 0) + amount);
-    }
-
-    public void decPosition(Security security, int amount) {
-        assert amount >= 0;
-        int currentPositions = positions.getOrDefault(security, 0);
-        if (currentPositions < amount)
-            throw new IllegalArgumentException("Amount to be decreased is greater than shareholder's current position");
-        positions.put(security, currentPositions - amount);
-    }
-
-    public boolean hasEnoughPositionsOn(Security security, int position) {
-        return positions.getOrDefault(security, 0) >= position;
-    }
-
-    public Integer getPositionBySecurity(Security security) {
-        return positions.getOrDefault(security, 0);
-    } 
+
+	@Getter
+	@EqualsAndHashCode.Include
+	private long shareholderId;
+
+	@Getter
+	private String name;
+
+	@Getter
+	@Builder.Default
+	private Map<Security, Integer> positions = new HashMap<>();
+
+	public void incPosition(Security security, int amount) {
+		assert amount >= 0;
+		positions.put(security, positions.getOrDefault(security, 0) + amount);
+	}
+
+	public void decPosition(Security security, int amount) {
+		assert amount >= 0;
+		int currentPositions = positions.getOrDefault(security, 0);
+		
+        if (currentPositions < amount) {
+			throw new IllegalArgumentException("Amount to be decreased is greater than shareholder's current position");
+		}
+
+		positions.put(security, currentPositions - amount);
+	}
+
+	public boolean hasEnoughPositionsOn(Security security, int position) {
+		return positions.getOrDefault(security, 0) >= position;
+	}
+
+	public Integer getPositionBySecurity(Security security) {
+		return positions.getOrDefault(security, 0);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java
index 4d23adb..aa894a5 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Side.java
@@ -1,27 +1,28 @@
 package ir.ramtung.tinyme.domain.entity;
 
 public enum Side {
-    BUY {
-        @Override
-        public Side opposite() {
-            return SELL;
-        }
-    },
-    SELL {
-        @Override
-        public Side opposite() {
-            return BUY;
-        }
-    };
+	BUY {
+		@Override
+		public Side opposite() {
+			return SELL;
+		}
+	},
+	SELL {
+		@Override
+		public Side opposite() {
+			return BUY;
+		}
+	};
 
-    public static Side parse(String s) {
-        if (s.equals("BUY"))
-            return BUY;
-        else if (s.equals("SELL"))
-            return SELL;
-        else
-            throw new IllegalArgumentException("Invalid value for order side");
-    }
+	public static Side parse(String s) {
+		if (s.equals("BUY")) {
+			return BUY;
+		} else if (s.equals("SELL")) {
+			return SELL;
+		} else {
+			throw new IllegalArgumentException("Invalid value for order side");
+		}
+	}
 
-    public abstract Side opposite();
+	public abstract Side opposite();
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java
index 5a477d7..72b5775 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/StopLimitOrder.java
@@ -1,69 +1,149 @@
 package ir.ramtung.tinyme.domain.entity;
 
 import ir.ramtung.tinyme.domain.exception.InvalidStopLimitPriceException;
+import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import java.time.LocalDateTime;
+import java.util.List;
+
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.ToString;
 
-import java.time.LocalDateTime;
-
 @Getter
 @EqualsAndHashCode(callSuper = true)
 @ToString(callSuper = true)
 public class StopLimitOrder extends Order {
-    private int stopPrice;
-
-    public StopLimitOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, int stopPrice) {
-        super(orderId, security, side, quantity, price, broker, shareholder);
-        this.stopPrice = stopPrice;
-    }
-
-    public StopLimitOrder(long orderId, Security security, Side side, int quantity, int price, Broker broker, Shareholder shareholder, LocalDateTime entryTime, int stopPrice, OrderStatus status) {
-        super(orderId, security, side, quantity, 0, price, broker, shareholder, entryTime, status);
-        this.stopPrice = stopPrice;
-    }
-    @Override
-    public StopLimitOrder snapshot() {
-        return new StopLimitOrder(orderId, security, side, quantity, price, broker, shareholder, entryTime, stopPrice, OrderStatus.SNAPSHOT);
-    }
-
-
-
-    @Override 
-    public boolean queuesBefore(Order order) {
-        StopLimitOrder sloOrder = (StopLimitOrder) order;
-        if (this.side == Side.BUY)
-            return stopPrice < sloOrder.getStopPrice();
-        else
-            return stopPrice > sloOrder.getStopPrice();
-    }
-
-    @Override
-    public void checkNewStopLimitPrice(int stopLimitPrice) {
-        if(stopLimitPrice == 0)
-            throw new InvalidStopLimitPriceException();
-    }
-
-    public boolean isSatisfied(int lastTradePrice) {
-        if (side == Side.BUY && stopPrice <= lastTradePrice)
-            return true;
-        else if (side == Side.SELL && stopPrice >= lastTradePrice)
-            return true;
-        
-        return false;
-    }
-
-    @Override 
-    public void queue() {
-        if (side == Side.BUY)
-            broker.decreaseCreditBy(this.getValue());
-    }
-
-
-    // DUP
-    public void updateFromTempSloOrder(StopLimitOrder tempOrder) {
-        this.stopPrice = tempOrder.stopPrice;
-        this.quantity = tempOrder.quantity;
-        this.price = tempOrder.price;
-    }
+
+	private int stopPrice;
+
+	public StopLimitOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		int stopPrice
+	) {
+		super(orderId, security, side, quantity, price, broker, shareholder);
+		this.stopPrice = stopPrice;
+	}
+
+	public StopLimitOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		LocalDateTime entryTime,
+		int stopPrice,
+		OrderStatus status
+	) {
+		super(orderId, security, side, quantity, 0, price, broker, shareholder, entryTime, status);
+		this.stopPrice = stopPrice;
+	}
+
+	public StopLimitOrder(
+		long orderId,
+		Security security,
+		Side side,
+		int quantity,
+		int price,
+		Broker broker,
+		Shareholder shareholder,
+		List<LocalDateTime> entryTimes,
+		int stopPrice,
+		OrderStatus status
+	) {
+		super(orderId, security, side, quantity, 0, price, broker, shareholder, entryTimes, status);
+		this.stopPrice = stopPrice;
+	}
+
+	public static StopLimitOrder createTempOrderByEnterRq(
+		Security security,
+		Broker broker,
+		Shareholder shareholder,
+		EnterOrderRq req
+	) {
+		return new StopLimitOrder(
+			req.getOrderId(),
+			security,
+			req.getSide(),
+			req.getQuantity(),
+			req.getPrice(),
+			broker,
+			shareholder,
+			req.getEntryTime(),
+			req.getStopPrice(),
+			OrderStatus.NEW
+		);
+	}
+
+	@Override
+	public StopLimitOrder snapshot() {
+		return new StopLimitOrder(
+			orderId,
+			security,
+			side,
+			quantity,
+			price,
+			broker,
+			shareholder,
+			entryTimes,
+			stopPrice,
+			OrderStatus.SNAPSHOT
+		);
+	}
+
+	@Override
+	public boolean queuesBefore(Order order) {
+		StopLimitOrder slo = (StopLimitOrder) order;
+		if (stopPrice == slo.stopPrice) {
+			return entryTimes.getLast().isBefore(slo.entryTimes.getLast());
+		}
+		if (this.side == Side.BUY) {
+			return stopPrice < slo.getStopPrice();
+		} else {
+			return (stopPrice > slo.getStopPrice());
+		}
+	}
+
+	@Override
+	public void checkNewStopLimitPrice(int stopLimitPrice) {
+		if (stopLimitPrice == 0) {
+			throw new InvalidStopLimitPriceException();
+		}
+	}
+
+	@Override
+	public void updateFromTempOrder(Order tempOrder) {
+		super.updateFromTempOrder(tempOrder);
+		StopLimitOrder tempSlo = (StopLimitOrder) tempOrder;
+		this.stopPrice = tempSlo.stopPrice;
+	}
+
+	@Override
+	public boolean willPriorityLostInUpdate(Order tempOrder) {
+		if (super.willPriorityLostInUpdate(tempOrder)) {
+			return true;
+		}
+
+		StopLimitOrder tempSlo = (StopLimitOrder) tempOrder;
+		return this.stopPrice != tempSlo.stopPrice;
+	}
+
+	public boolean isSatisfied(int lastTradePrice) {
+		if (side == Side.BUY && stopPrice <= lastTradePrice) {
+			return true;
+		}
+
+		if (side == Side.SELL && stopPrice >= lastTradePrice) {
+			return true;
+		}
+
+		return false;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
index fa649b6..1f7e629 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/entity/Trade.java
@@ -1,6 +1,5 @@
 package ir.ramtung.tinyme.domain.entity;
 
-import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
@@ -11,136 +10,143 @@ import lombok.ToString;
 @EqualsAndHashCode
 @ToString
 public class Trade {
-    Security security;
-    private int price;
-    private int quantity;
-    private Order buy;
-    private Order sell;
-    private Order sellFirstVersion;
-    private Order buyFirstVersion;
-    private boolean isBuyQueued;
-
-    public Trade(Security security, int price, int quantity, Order order1, Order order2) {
-        this.security = security;
-        this.price = price;
-        this.quantity = quantity;
-        if (order1.getSide() == Side.BUY) {
-            this.buy = order1;
-            this.sell = order2;
-            this.sellFirstVersion = order2.snapshot();
-            this.buyFirstVersion = order1.snapshot();
-        } 
-        else {
-            this.buy = order2;
-            this.sell = order1;
-            this.sellFirstVersion = order1.snapshot();
-            this.buyFirstVersion = order2.snapshot();
+
+	Security security;
+	private int price;
+	private int quantity;
+	private Order buy;
+	private Order sell;
+	private Order sellFirstVersion;
+	private Order buyFirstVersion;
+	private boolean isBuyQueued;
+
+	public Trade(Security security, int price, int quantity, Order order1, Order order2) {
+		this.security = security;
+		this.price = price;
+		this.quantity = quantity;
+		if (order1.getSide() == Side.BUY) {
+			this.buy = order1;
+			this.sell = order2;
+			this.sellFirstVersion = order2.snapshot();
+			this.buyFirstVersion = order1.snapshot();
+		} else {
+			this.buy = order2;
+			this.sell = order1;
+			this.sellFirstVersion = order1.snapshot();
+			this.buyFirstVersion = order2.snapshot();
+		}
+		this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
+	}
+
+	public Trade(
+		Security security,
+		int price,
+		int quantity,
+		Order order1,
+		Order order2,
+		Order sellFirstVersion,
+		Order buyFirstVersion,
+		boolean isBuyQueued
+	) {
+		this(security, price, quantity, order1, order2);
+		this.sellFirstVersion = sellFirstVersion;
+		this.buyFirstVersion = buyFirstVersion;
+		this.isBuyQueued = isBuyQueued;
+	}
+
+	public Trade(Order order1, Order order2) {
+		this.security = order1.getSecurity();
+		this.price = (order1.getStatus() == OrderStatus.QUEUED) ? order1.getPrice() : order2.getPrice();
+		this.quantity = Math.min(order1.getQuantity(), order2.getQuantity());
+
+		if (order1.getSide() == Side.BUY) {
+			this.buy = order1;
+			this.sell = order2;
+			this.sellFirstVersion = order2.snapshot();
+			this.buyFirstVersion = order1.snapshot();
+		} else {
+			this.buy = order2;
+			this.sell = order1;
+			this.sellFirstVersion = order1.snapshot();
+			this.buyFirstVersion = order2.snapshot();
+		}
+
+		this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
+	}
+
+	public long getTradedValue() {
+		return (long) price * quantity;
+	}
+
+	private void decreaseSellersCredit() {
+		sell.getBroker().decreaseCreditBy(getTradedValue());
+	}
+
+	private void increaseSellersCredit() {
+		sell.getBroker().increaseCreditBy(getTradedValue());
+	}
+
+	private void decreaseBuyersCredit() {
+		buy.getBroker().decreaseCreditBy(getTradedValue());
+	}
+
+	private void increaseBuyersCredit() {
+		buy.getBroker().increaseCreditBy(getTradedValue());
+	}
+
+	private void increaseBuyersPosition() {
+		buy.getShareholder().incPosition(security, quantity);
+	}
+
+	private void decreaseBuyersPosition() {
+		buy.getShareholder().decPosition(security, quantity);
+	}
+
+	private void increaseSellersPosition() {
+		sell.getShareholder().incPosition(security, quantity);
+	}
+
+	private void decreaseSellersPosition() {
+		sell.getShareholder().decPosition(security, quantity);
+	}
+
+	public void confirm() {
+		if (!isBuyQueued) {
+			decreaseBuyersCredit();
+		}
+
+		increaseSellersCredit();
+		increaseBuyersPosition();
+		decreaseSellersPosition();
+		buy.decreaseQuantity(quantity);
+		sell.decreaseQuantity(quantity);
+	}
+
+	public void rollback() {
+		if (isBuyQueued) {
+            buyQueuedRollback();
         }
-        this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
-        // TODO
-        // this exists just for unit tests and should remove
-    }
-
-    public Trade(Security security, int price, int quantity, Order order1, Order order2, Order sellFirstVersion, Order buyFirstVersion, boolean isBuyQueued) {
-        this(security, price, quantity, order1, order2);
-        this.sellFirstVersion = sellFirstVersion;
-        this.buyFirstVersion = buyFirstVersion;
-        this.isBuyQueued = isBuyQueued;
-    }
-
-    public Trade(Order order1, Order order2) {
-        this.security = order1.getSecurity();
-        this.price = (order1.getStatus() == OrderStatus.QUEUED) ? order1.getPrice() : order2.getPrice();
-        this.quantity = Math.min(order1.getQuantity(), order2.getQuantity());
-        if (order1.getSide() == Side.BUY) {
-            this.buy = order1;
-            this.sell = order2;
-            this.sellFirstVersion = order2.snapshot();
-            this.buyFirstVersion = order1.snapshot();
-        } 
         else {
-            this.buy = order2;
-            this.sell = order1;
-            this.sellFirstVersion = order1.snapshot();
-            this.buyFirstVersion = order2.snapshot();
-        }
-        this.isBuyQueued = (this.buy.getStatus() == OrderStatus.QUEUED);
-    }
-
-    public long getTradedValue() {
-        return (long) price * quantity;
-    }
-
-    private void decreaseSellersCredit() {
-        sell.getBroker().decreaseCreditBy(getTradedValue());
-    }
-
-    private void increaseSellersCredit() {
-        sell.getBroker().increaseCreditBy(getTradedValue());
-    }
-
-    private void decreaseBuyersCredit() {
-        buy.getBroker().decreaseCreditBy(getTradedValue());
-    }
-
-    private void increaseBuyersCredit() {
-        buy.getBroker().increaseCreditBy(getTradedValue());
-    }
-
-    private void increaseBuyersPosition() {
-        buy.getShareholder().incPosition(security, quantity);
-    }
-
-    private void decreaseBuyersPosition() {
-        buy.getShareholder().decPosition(security, quantity);
-    }
-
-    private void increaseSellersPosition() {
-        sell.getShareholder().incPosition(security, quantity);
-    }
-
-    private void decreaseSellersPosition() {
-        sell.getShareholder().decPosition(security, quantity);
-    }
-
-    private boolean buyerHasEnoughCredit() {
-        return buy.getBroker().hasEnoughCredit(getTradedValue());
-    }
-
-    public void confirm() {
-        if (!isBuyQueued) {
-            if (!buyerHasEnoughCredit()) 
-                throw new NotEnoughCreditException();
-            decreaseBuyersCredit();
-        }
-        increaseSellersCredit();
-        increaseBuyersPosition();
-        decreaseSellersPosition();
-        buy.decreaseQuantity(quantity);
-        sell.decreaseQuantity(quantity);
-    }
-
-    public void rollback() {
-        if (isBuyQueued)
-            buyQueuedRollback();
-        else
             sellQueuedRollback();
-    }
-
-    private void sellQueuedRollback() {
-        increaseBuyersCredit();
-        decreaseSellersCredit();
-        decreaseBuyersPosition();
-        increaseSellersPosition();
-        sell.rollback(sellFirstVersion);
-    }
-    
-    private void buyQueuedRollback() {
-        if (buy.getStatus() == OrderStatus.DONE)
+        }
+	}
+
+	private void sellQueuedRollback() {
+		increaseBuyersCredit();
+		decreaseSellersCredit();
+		decreaseBuyersPosition();
+		increaseSellersPosition();
+		sell.rollback(sellFirstVersion);
+	}
+
+	private void buyQueuedRollback() {
+		if (buy.getStatus() == OrderStatus.DONE) {
             increaseBuyersCredit();
-        decreaseSellersCredit();
-        decreaseBuyersPosition();
-        increaseSellersPosition();
-        buy.rollback(buyFirstVersion);
-    }
+        }
+        
+		decreaseSellersCredit();
+		decreaseBuyersPosition();
+		increaseSellersPosition();
+		buy.rollback(buyFirstVersion);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java
index cb60f40..ce5a0e1 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantQueueOrderException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class CantQueueOrderException extends RuntimeException {
 
-    public CantQueueOrderException(String msg) {
-        super(msg);
-    }
-    
-    public CantQueueOrderException() {
-        super();
-    }
+	public CantQueueOrderException(String msg) {
+		super(msg);
+	}
+
+	public CantQueueOrderException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantRollbackTradeException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantRollbackTradeException.java
index ed0c340..4932dc4 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantRollbackTradeException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/CantRollbackTradeException.java
@@ -1,12 +1,12 @@
 package ir.ramtung.tinyme.domain.exception;
 
 public class CantRollbackTradeException extends RuntimeException {
-    
-    public CantRollbackTradeException(String msg) {
-        super(msg);
-    }
 
-    public CantRollbackTradeException() {
-        super();
-    }
+	public CantRollbackTradeException(String msg) {
+		super(msg);
+	}
+
+	public CantRollbackTradeException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidIcebergPeakSizeException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidIcebergPeakSizeException.java
index 8b398b2..eac40cd 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidIcebergPeakSizeException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidIcebergPeakSizeException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class InvalidIcebergPeakSizeException extends InvalidPeakSizeException {
 
-    public InvalidIcebergPeakSizeException(String msg) {
-        super(msg);
-    }
+	public InvalidIcebergPeakSizeException(String msg) {
+		super(msg);
+	}
 
-    public InvalidIcebergPeakSizeException() {
-        super();
-    }
+	public InvalidIcebergPeakSizeException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidPeakSizeException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidPeakSizeException.java
index b6df4cc..fd5a333 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidPeakSizeException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidPeakSizeException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class InvalidPeakSizeException extends RuntimeException {
 
-    public InvalidPeakSizeException(String msg) {
-        super(msg);
-    }
+	public InvalidPeakSizeException(String msg) {
+		super(msg);
+	}
 
-    public InvalidPeakSizeException() {
-        super();
-    }
+	public InvalidPeakSizeException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidStopLimitPriceException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidStopLimitPriceException.java
index f754390..a977576 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidStopLimitPriceException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/InvalidStopLimitPriceException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class InvalidStopLimitPriceException extends RuntimeException {
 
-    public InvalidStopLimitPriceException(String msg) {
-        super(msg);
-    }
+	public InvalidStopLimitPriceException(String msg) {
+		super(msg);
+	}
 
-    public InvalidStopLimitPriceException() {
-        super();
-    }
+	public InvalidStopLimitPriceException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughCreditException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughCreditException.java
index b2504d2..5cd0090 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughCreditException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughCreditException.java
@@ -4,12 +4,12 @@ import lombok.ToString;
 
 @ToString
 public class NotEnoughCreditException extends RuntimeException {
-    
-    public NotEnoughCreditException(String msg) {
-        super(msg);
-    }
-    
-    public NotEnoughCreditException() {
-        super();
-    }
+
+	public NotEnoughCreditException(String msg) {
+		super(msg);
+	}
+
+	public NotEnoughCreditException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java
index 6cd4f41..865fec4 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughExecutionException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class NotEnoughExecutionException extends RuntimeException {
 
-    public NotEnoughExecutionException(String msg) {
-        super(msg);
-    }
-    
-    public NotEnoughExecutionException() {
-        super();
-    }
+	public NotEnoughExecutionException(String msg) {
+		super(msg);
+	}
+
+	public NotEnoughExecutionException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughPositionException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughPositionException.java
index 1083e9b..cf52fe2 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughPositionException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotEnoughPositionException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class NotEnoughPositionException extends RuntimeException {
 
-    public NotEnoughPositionException(String msg) {
-        super(msg);
-    }
-    
-    public NotEnoughPositionException() {
-        super();
-    }
+	public NotEnoughPositionException(String msg) {
+		super(msg);
+	}
+
+	public NotEnoughPositionException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotFoundException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotFoundException.java
index bec35fe..22a87c6 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotFoundException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/NotFoundException.java
@@ -1,12 +1,12 @@
 package ir.ramtung.tinyme.domain.exception;
 
-public class NotFoundException extends RuntimeException{
+public class NotFoundException extends RuntimeException {
 
-    public NotFoundException(String msg) {
-        super(msg);
-    }
+	public NotFoundException(String msg) {
+		super(msg);
+	}
 
-    public NotFoundException() {
-        super();
-    }
+	public NotFoundException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java
index 7259ea8..6963e8d 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/exception/UpdateMinimumExecutionQuantityException.java
@@ -2,11 +2,11 @@ package ir.ramtung.tinyme.domain.exception;
 
 public class UpdateMinimumExecutionQuantityException extends RuntimeException {
 
-    public UpdateMinimumExecutionQuantityException(String msg) {
-        super(msg);
-    }
+	public UpdateMinimumExecutionQuantityException(String msg) {
+		super(msg);
+	}
 
-    public UpdateMinimumExecutionQuantityException() {
-        super();
-    }
+	public UpdateMinimumExecutionQuantityException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java
new file mode 100644
index 0000000..d273ac8
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServiceResponse.java
@@ -0,0 +1,80 @@
+package ir.ramtung.tinyme.domain.service;
+
+import ir.ramtung.tinyme.domain.entity.MatchResult;
+import ir.ramtung.tinyme.domain.entity.MatchingOutcome;
+import ir.ramtung.tinyme.domain.entity.Trade;
+import ir.ramtung.tinyme.messaging.request.BaseOrderRq;
+import java.util.List;
+import lombok.Getter;
+
+@Getter
+public class ApplicationServiceResponse {
+
+	private ApplicationServiceType type;
+	private List<MatchResult> matchResults;
+	private BaseOrderRq req;
+
+	public enum ApplicationServiceType {
+		DELETE_ORDER,
+		ADD_LIMIT_ORDER,
+		UPDATE_LIMIT_ORDER,
+		ADD_ICEBERG_ORDER,
+		UPDATE_ICEBERG_ORDER,
+		ADD_STOP_LIMIT_ORDER,
+		UPDATE_STOP_LIMIT_ORDER,
+	}
+
+	public ApplicationServiceResponse(ApplicationServiceType type, List<MatchResult> matchResults, BaseOrderRq req) {
+		this.type = type;
+		this.matchResults = matchResults;
+		this.req = req;
+	}
+
+	public boolean isTypeDelete() {
+		return this.type == ApplicationServiceType.DELETE_ORDER;
+	}
+
+	public boolean isTypeUpdate() {
+		return (
+			this.type == ApplicationServiceType.UPDATE_LIMIT_ORDER ||
+			this.type == ApplicationServiceType.UPDATE_ICEBERG_ORDER ||
+			this.type == ApplicationServiceType.UPDATE_STOP_LIMIT_ORDER
+		);
+	}
+
+	public boolean isTypeAdd() {
+		return (
+			this.type == ApplicationServiceType.ADD_LIMIT_ORDER ||
+			this.type == ApplicationServiceType.ADD_ICEBERG_ORDER ||
+			this.type == ApplicationServiceType.ADD_STOP_LIMIT_ORDER
+		);
+	}
+
+	public long getRequestId() {
+		return req.getRequestId();
+	}
+
+	public long getOrderId() {
+		return req.getOrderId();
+	}
+
+	public long getOrderId(int idx) {
+		return matchResults.get(idx).remainder().getOrderId();
+	}
+
+	public boolean isSuccessful(int idx) {
+		return matchResults.get(idx).isSuccessful();
+	}
+
+	public boolean hasTrades(int idx) {
+		return !matchResults.get(idx).trades().isEmpty();
+	}
+
+	public List<Trade> getTrades(int idx) {
+		return matchResults.get(idx).trades();
+	}
+
+	public MatchingOutcome getOutcome(int idx) {
+		return matchResults.get(idx).outcome();
+	}
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java
new file mode 100644
index 0000000..32ffaa8
--- /dev/null
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/ApplicationServices.java
@@ -0,0 +1,176 @@
+package ir.ramtung.tinyme.domain.service;
+
+import ir.ramtung.tinyme.domain.entity.*;
+import ir.ramtung.tinyme.domain.exception.InvalidIcebergPeakSizeException;
+import ir.ramtung.tinyme.domain.exception.InvalidPeakSizeException;
+import ir.ramtung.tinyme.domain.exception.InvalidStopLimitPriceException;
+import ir.ramtung.tinyme.domain.exception.NotFoundException;
+import ir.ramtung.tinyme.domain.exception.UpdateMinimumExecutionQuantityException;
+import ir.ramtung.tinyme.domain.service.ApplicationServiceResponse.ApplicationServiceType;
+import ir.ramtung.tinyme.messaging.Message;
+import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
+import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
+import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import ir.ramtung.tinyme.repository.BrokerRepository;
+import ir.ramtung.tinyme.repository.SecurityRepository;
+import ir.ramtung.tinyme.repository.ShareholderRepository;
+import java.util.List;
+import org.springframework.stereotype.Service;
+
+@Service
+public class ApplicationServices {
+
+	private SecurityRepository securityRepository;
+	private BrokerRepository brokerRepository;
+	private ShareholderRepository shareholderRepository;
+	private Matcher matcher;
+	private Security security;
+	private Broker broker;
+	private Shareholder shareholder;
+
+	public ApplicationServices(
+		SecurityRepository securityRepository,
+		BrokerRepository brokerRepository,
+		ShareholderRepository shareholderRepository,
+		Matcher matcher
+	) {
+		this.brokerRepository = brokerRepository;
+		this.shareholderRepository = shareholderRepository;
+		this.securityRepository = securityRepository;
+		this.matcher = matcher;
+	}
+
+	private void setEntitiesByEnterOrderRq(EnterOrderRq req) {
+		this.security = securityRepository.findSecurityByIsin(req.getSecurityIsin());
+		this.broker = brokerRepository.findBrokerById(req.getBrokerId());
+		this.shareholder = shareholderRepository.findShareholderById(req.getShareholderId());
+	}
+
+	private void setEntitiesByEnterOrderRq(DeleteOrderRq req) {
+		this.security = securityRepository.findSecurityByIsin(req.getSecurityIsin());
+	}
+
+	private void validateDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
+		List<String> errors = deleteOrderRq.validateYourFields();
+
+		if (!securityRepository.isThereSecurityWithIsin(deleteOrderRq.getSecurityIsin())) {
+			errors.add(Message.UNKNOWN_SECURITY_ISIN);
+		}
+
+		if (!errors.isEmpty()) {
+			throw new InvalidRequestException(errors);
+		}
+
+		Security security = securityRepository.findSecurityByIsin(deleteOrderRq.getSecurityIsin());
+		if (!security.isThereOrderWithId(deleteOrderRq.getSide(), deleteOrderRq.getOrderId())) {
+			throw new InvalidRequestException(Message.ORDER_ID_NOT_FOUND);
+		}
+	}
+
+	private void generalEnterOrderValidation(EnterOrderRq enterOrderRq) {
+		List<String> errors = enterOrderRq.validateYourFields();
+		if (!securityRepository.isThereSecurityWithIsin(enterOrderRq.getSecurityIsin())) {
+			errors.add(Message.UNKNOWN_SECURITY_ISIN);
+		} else {
+			Security security = securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin());
+			errors.addAll(security.checkLotAndTickSize(enterOrderRq));
+		}
+
+		if (!brokerRepository.isThereBrokerWithId(enterOrderRq.getBrokerId())) {
+			errors.add(Message.UNKNOWN_BROKER_ID);
+		}
+
+		if (!shareholderRepository.isThereShareholderWithId(enterOrderRq.getShareholderId())) {
+			errors.add(Message.UNKNOWN_SHAREHOLDER_ID);
+		}
+
+		if (!errors.isEmpty()) {
+			throw new InvalidRequestException(errors);
+		}
+	}
+
+	private void validateUpdateOrderRq(EnterOrderRq updateOrderRq) {
+		try {
+			Security security = securityRepository.findSecurityByIsin(updateOrderRq.getSecurityIsin());
+			Order order = security.findByOrderId(updateOrderRq.getSide(), updateOrderRq.getOrderId());
+			order.checkNewPeakSize(updateOrderRq.getPeakSize());
+			order.checkNewMinimumExecutionQuantity(updateOrderRq.getMinimumExecutionQuantity());
+			order.checkNewStopLimitPrice(updateOrderRq.getStopPrice());
+		} catch (NotFoundException exp) {
+			throw new InvalidRequestException(Message.ORDER_ID_NOT_FOUND);
+		} catch (InvalidIcebergPeakSizeException exp) {
+			throw new InvalidRequestException(Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER);
+		} catch (InvalidPeakSizeException exp) {
+			throw new InvalidRequestException(Message.INVALID_PEAK_SIZE);
+		} catch (UpdateMinimumExecutionQuantityException exp) {
+			throw new InvalidRequestException(Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY);
+		} catch (InvalidStopLimitPriceException exp) {
+			throw new InvalidRequestException(Message.INVALID_STOP_LIMIT_UPDATE_PRICE);
+		}
+	}
+
+	public ApplicationServiceResponse deleteOrder(DeleteOrderRq req) {
+		validateDeleteOrderRq(req);
+		setEntitiesByEnterOrderRq(req);
+		security.deleteOrder(req.getSide(), req.getOrderId());
+
+		return new ApplicationServiceResponse(ApplicationServiceType.DELETE_ORDER, null, req);
+	}
+
+	public ApplicationServiceResponse addLimitOrder(EnterOrderRq req) {
+		generalEnterOrderValidation(req);
+		setEntitiesByEnterOrderRq(req);
+		Order tempOrder = Order.createTempOrderByEnterRq(security, broker, shareholder, req);
+		List<MatchResult> results = security.addNewOrder(tempOrder, matcher);
+
+		return new ApplicationServiceResponse(ApplicationServiceType.ADD_LIMIT_ORDER, results, req);
+	}
+
+	public ApplicationServiceResponse updateLimitOrder(EnterOrderRq req) {
+		generalEnterOrderValidation(req);
+		validateUpdateOrderRq(req);
+		setEntitiesByEnterOrderRq(req);
+		Order tempOrder = Order.createTempOrderByEnterRq(security, broker, shareholder, req);
+		List<MatchResult> results = security.updateOrder(tempOrder, matcher);
+
+		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_LIMIT_ORDER, results, req);
+	}
+
+	public ApplicationServiceResponse addIcebergOrder(EnterOrderRq req) {
+		generalEnterOrderValidation(req);
+		setEntitiesByEnterOrderRq(req);
+		IcebergOrder tempOrder = IcebergOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
+		List<MatchResult> results = security.addNewOrder(tempOrder, matcher);
+
+		return new ApplicationServiceResponse(ApplicationServiceType.ADD_ICEBERG_ORDER, results, req);
+	}
+
+	public ApplicationServiceResponse updateIcebergOrder(EnterOrderRq req) {
+		generalEnterOrderValidation(req);
+		validateUpdateOrderRq(req);
+		setEntitiesByEnterOrderRq(req);
+		IcebergOrder tempOrder = IcebergOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
+		List<MatchResult> results = security.updateOrder(tempOrder, matcher);
+
+		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_ICEBERG_ORDER, results, req);
+	}
+
+	public ApplicationServiceResponse addStopLimitOrder(EnterOrderRq req) {
+		generalEnterOrderValidation(req);
+		setEntitiesByEnterOrderRq(req);
+		StopLimitOrder tempOrder = StopLimitOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
+		List<MatchResult> results = security.addNewOrder(tempOrder, matcher);
+
+		return new ApplicationServiceResponse(ApplicationServiceType.ADD_STOP_LIMIT_ORDER, results, req);
+	}
+
+	public ApplicationServiceResponse updateStopLimitOrder(EnterOrderRq req) {
+		generalEnterOrderValidation(req);
+		validateUpdateOrderRq(req);
+		setEntitiesByEnterOrderRq(req);
+		StopLimitOrder tempOrder = StopLimitOrder.createTempOrderByEnterRq(security, broker, shareholder, req);
+		List<MatchResult> results = security.updateOrder(tempOrder, matcher);
+
+		return new ApplicationServiceResponse(ApplicationServiceType.UPDATE_STOP_LIMIT_ORDER, results, req);
+	}
+}
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
index 0b37e11..14b330a 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/Matcher.java
@@ -4,66 +4,64 @@ import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.exception.NotEnoughCreditException;
 import ir.ramtung.tinyme.domain.exception.NotEnoughExecutionException;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
-
-import org.springframework.stereotype.Service;
-
 import java.util.LinkedList;
 import java.util.List;
+import org.springframework.stereotype.Service;
 
 @Service
 public class Matcher {
-    public List<Trade> match(Order newOrder) {
-        OrderBook orderBook = newOrder.getSecurity().getOrderBook();
-        LinkedList<Trade> trades = new LinkedList<>();
-        try {
-            while (hasOrderToMatch(newOrder, orderBook)) {
-                Order matchingOrder = orderBook.findOrderToMatchWith(newOrder);    
-                Trade trade = new Trade(newOrder, matchingOrder);
-                trade.confirm();
-                trades.add(trade);
-            }
-            return trades;
-        }
-        catch (NotFoundException exp) {
-            return trades;
-        } 
-        catch (NotEnoughCreditException exp) {
-            rollbackTrades(trades);
-            throw exp;
-        }
-    }
 
-    private boolean hasOrderToMatch(Order newOrder, OrderBook orderBook) {
-        return (orderBook.hasOrderOfType(newOrder.getSide().opposite())) && (newOrder.getQuantity() > 0);
-    }
+	public List<Trade> match(Order newOrder) {
+		OrderBook orderBook = newOrder.getSecurity().getOrderBook();
+		LinkedList<Trade> trades = new LinkedList<>();
+		try {
+			while (hasOrderToMatch(newOrder, orderBook)) {
+				tryToTrade(newOrder, orderBook, trades);
+			}
+			return trades;
+		} catch (NotFoundException exp) {
+			return trades;
+		} catch (NotEnoughCreditException exp) {
+			rollbackTrades(trades);
+			throw exp;
+		}
+	}
 
-    private void rollbackTrades(List<Trade> trades) {
-        for (int i = trades.size() - 1; i >= 0; i--)
-            trades.get(i).rollback();
+    private void tryToTrade(Order newOrder, OrderBook orderBook, LinkedList<Trade> trades) {
+        Order matchingOrder = orderBook.findOrderToMatchWith(newOrder);
+        Trade trade = new Trade(newOrder, matchingOrder);
+        trade.confirm();
+        trades.add(trade);
     }
 
-    public MatchResult execute(Order order) {
-        List<Trade> trades = new LinkedList<>();
-        try {
-            trades = match(order);
-            order.checkExecutionQuantity(sumOfExecutionQuantity(trades));
-            order.addYourselfToQueue();
-            return MatchResult.executed(order, trades);
-        }
-        catch (NotEnoughCreditException exp) {
-            rollbackTrades(trades);
-            return MatchResult.notEnoughCredit();
-        }
-        catch (NotEnoughExecutionException exp) {
-            rollbackTrades(trades);
-            return MatchResult.notEnoughExecution();
-        }
-    }
+	private boolean hasOrderToMatch(Order newOrder, OrderBook orderBook) {
+		return (orderBook.hasOrderOfType(newOrder.getSide().opposite())) && (newOrder.getQuantity() > 0);
+	}
 
-    private int sumOfExecutionQuantity(List<Trade> trades) {
-        int quantitySum = 0;
-        for (Trade trade: trades) 
-            quantitySum += trade.getQuantity();
-        return quantitySum;
-    }
+	private void rollbackTrades(List<Trade> trades) {
+		trades.reversed().forEach(Trade::rollback);
+	}
+
+	public MatchResult execute(Order order) {
+		List<Trade> trades = new LinkedList<>();
+		
+		try {
+			trades = match(order);
+			order.checkExecutionQuantity(sumOfExecutionQuantity(trades));
+			order.addYourselfToQueue();
+			return MatchResult.executed(order, trades);
+		} catch (NotEnoughCreditException exp) {
+			rollbackTrades(trades);
+			return MatchResult.notEnoughCredit();
+		} catch (NotEnoughExecutionException exp) {
+			rollbackTrades(trades);
+			return MatchResult.notEnoughExecution();
+		}
+	}
+
+	private int sumOfExecutionQuantity(List<Trade> trades) {
+		int quantitySum = 0;
+		for (Trade trade : trades) quantitySum += trade.getQuantity();
+		return quantitySum;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
index a4ec351..0eeb727 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/domain/service/OrderHandler.java
@@ -1,199 +1,184 @@
 package ir.ramtung.tinyme.domain.service;
 
-import ir.ramtung.tinyme.domain.entity.*;
-import ir.ramtung.tinyme.domain.exception.InvalidIcebergPeakSizeException;
-import ir.ramtung.tinyme.domain.exception.InvalidPeakSizeException;
-import ir.ramtung.tinyme.domain.exception.NotFoundException;
-import ir.ramtung.tinyme.domain.exception.UpdateMinimumExecutionQuantityException;
-import ir.ramtung.tinyme.domain.exception.InvalidStopLimitPriceException;
-import ir.ramtung.tinyme.messaging.Message;
-import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
+import ir.ramtung.tinyme.domain.entity.MatchingOutcome;
+import ir.ramtung.tinyme.domain.entity.Trade;
 import ir.ramtung.tinyme.messaging.EventPublisher;
+import ir.ramtung.tinyme.messaging.Message;
 import ir.ramtung.tinyme.messaging.TradeDTO;
 import ir.ramtung.tinyme.messaging.event.*;
+import ir.ramtung.tinyme.messaging.exception.InvalidRequestException;
+import ir.ramtung.tinyme.messaging.request.BaseOrderRq;
 import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import ir.ramtung.tinyme.messaging.request.OrderEntryType;
-import ir.ramtung.tinyme.repository.BrokerRepository;
-import ir.ramtung.tinyme.repository.SecurityRepository;
-import ir.ramtung.tinyme.repository.ShareholderRepository;
-import org.springframework.stereotype.Service;
-
 import java.util.LinkedList;
 import java.util.List;
 import java.util.stream.Collectors;
+import org.springframework.stereotype.Service;
 
 @Service
 public class OrderHandler {
-    SecurityRepository securityRepository;
-    BrokerRepository brokerRepository;
-    ShareholderRepository shareholderRepository;
-    EventPublisher eventPublisher;
-    Matcher matcher;
-
-    public OrderHandler(SecurityRepository securityRepository, BrokerRepository brokerRepository, ShareholderRepository shareholderRepository, EventPublisher eventPublisher, Matcher matcher) {
-        this.securityRepository = securityRepository;
-        this.brokerRepository = brokerRepository;
-        this.shareholderRepository = shareholderRepository;
-        this.eventPublisher = eventPublisher;
-        this.matcher = matcher;
-    }
-
-    public void handleEnterOrder(EnterOrderRq enterOrderRq) {
-        try {
-            validateEnterOrderRq(enterOrderRq);
-            List<MatchResult> matchResults = runEnterOrderRq(enterOrderRq);
-            publishEnterOrderMatchResult(matchResults, enterOrderRq);
-        } 
-        catch (InvalidRequestException ex) {
-            eventPublisher.publish(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), ex.getReasons()));
-        }
-    }
-
-    private List<MatchResult> runEnterOrderRq(EnterOrderRq enterOrderRq) {
-        Order tempOrder = createTempOrderByEnterOrderRq(enterOrderRq);
-        if (enterOrderRq.getRequestType() == OrderEntryType.NEW_ORDER)
-            return tempOrder.getSecurity().addNewOrder(tempOrder, matcher);
-        else if (enterOrderRq.getStopPrice() != 0)
-            return tempOrder.getSecurity().updateSloOrder((StopLimitOrder) tempOrder, matcher);
-        else
-            return tempOrder.getSecurity().updateOrder(tempOrder, matcher);
-    }
-
-    private Order createTempOrderByEnterOrderRq(EnterOrderRq enterOrderRq) {
-        Broker broker = brokerRepository.findBrokerById(enterOrderRq.getBrokerId());
-        Shareholder shareholder = shareholderRepository.findShareholderById(enterOrderRq.getShareholderId());
-        Security security = securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin());
-        
-        if (enterOrderRq.getStopPrice() != 0) 
-            return new StopLimitOrder(
-                enterOrderRq.getOrderId(), security, enterOrderRq.getSide(), 
-                enterOrderRq.getQuantity(), enterOrderRq.getPrice(), broker, 
-                shareholder, enterOrderRq.getStopPrice()
-            );
-        else if (enterOrderRq.getPeakSize() != 0)
-            return new IcebergOrder(
-                enterOrderRq.getOrderId(), security, enterOrderRq.getSide(),
-                enterOrderRq.getQuantity(), enterOrderRq.getMinimumExecutionQuantity(), 
-                enterOrderRq.getPrice(), broker, shareholder, enterOrderRq.getEntryTime(), enterOrderRq.getPeakSize()
-            );
-        else
-            return new Order(
-                enterOrderRq.getOrderId(), security, enterOrderRq.getSide(),
-                enterOrderRq.getQuantity(), enterOrderRq.getMinimumExecutionQuantity(), 
-                enterOrderRq.getPrice(), broker, shareholder, enterOrderRq.getEntryTime()
-            );
-    }
-
-    private void publishEnterOrderMatchResult(List<MatchResult> matchResults, EnterOrderRq enterOrderRq) {
-        List<Event> events = createEvents(matchResults, enterOrderRq);
-        events.forEach(e -> eventPublisher.publish(e));
-    }
-
-    private List<Event> createEvents(List<MatchResult> matchResults, EnterOrderRq enterOrderRq) {
-        MatchResult matchResult = matchResults.getFirst();
-        List<Event> events = new LinkedList<>();
-        if (matchResult.isSuccessful())
-            events.addAll(createSuccessEvents(matchResult, enterOrderRq));
-        else
-            events.addAll(createRejectedEvents(matchResult, enterOrderRq));
-
-        for(int i = 1; i < matchResults.size(); i++) {
-            events.add(new OrderActivatedEvent(matchResults.get(i).remainder().getOrderId()));
-            if((!matchResults.get(i).trades().isEmpty()))
-                events.add(new OrderExecutedEvent(matchResults.get(i).remainder().getOrderId(), matchResults.get(i).trades().stream().map(TradeDTO::new).collect(Collectors.toList())));
-        }
-
-        return events;
-    }
-
-    private List<Event> createRejectedEvents(MatchResult matchResult, EnterOrderRq enterOrderRq) {
-        List<Event> events = new LinkedList<>();
-        if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_CREDIT) 
-            events.add(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
-        else if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_POSITIONS) 
-            events.add(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
-        else if (matchResult.outcome() == MatchingOutcome.NOT_ENOUGH_EXECUTION)
-            events.add(new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
-        return events;
-    }
-
-    private List<Event> createSuccessEvents(MatchResult matchResult, EnterOrderRq enterOrderRq) {
-        List<Event> events = new LinkedList<>();
-        if (enterOrderRq.getRequestType() == OrderEntryType.NEW_ORDER)
-            events.add(new OrderAcceptedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId()));
-        else
-            events.add(new OrderUpdatedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId()));
-        if (!matchResult.trades().isEmpty()) 
-            events.add(new OrderExecutedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), matchResult.trades().stream().map(TradeDTO::new).collect(Collectors.toList())));
-        return events;
-    }
-
-    public void handleDeleteOrder(DeleteOrderRq deleteOrderRq) {
-        try {
-            validateDeleteOrderRq(deleteOrderRq);
-            Security security = securityRepository.findSecurityByIsin(deleteOrderRq.getSecurityIsin());
-            security.deleteOrder(deleteOrderRq.getSide(), deleteOrderRq.getOrderId());
-            eventPublisher.publish(new OrderDeletedEvent(deleteOrderRq.getRequestId(), deleteOrderRq.getOrderId()));
-        } catch (InvalidRequestException ex) {
-            eventPublisher.publish(new OrderRejectedEvent(deleteOrderRq.getRequestId(), deleteOrderRq.getOrderId(), ex.getReasons()));
-        }
-    }
-
-    private void validateEnterOrderRq(EnterOrderRq enterOrderRq) {
-        generalEnterOrderValidation(enterOrderRq);
-        if (enterOrderRq.getRequestType() == OrderEntryType.UPDATE_ORDER)
-            validateUpdateOrderRq(enterOrderRq, securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin()));
-    }
-
-    private void generalEnterOrderValidation(EnterOrderRq enterOrderRq) {
-        List<String> errors = enterOrderRq.validateYourFields();
-        if (!securityRepository.isThereSecurityWithIsin(enterOrderRq.getSecurityIsin()))
-            errors.add(Message.UNKNOWN_SECURITY_ISIN);
-        else {
-            Security security = securityRepository.findSecurityByIsin(enterOrderRq.getSecurityIsin());
-            errors.addAll(security.checkLotAndTickSize(enterOrderRq));
-        }
-        if (!brokerRepository.isThereBrokerWithId(enterOrderRq.getBrokerId()))
-            errors.add(Message.UNKNOWN_BROKER_ID);
-        if (!shareholderRepository.isThereShareholderWithId(enterOrderRq.getShareholderId())) 
-            errors.add(Message.UNKNOWN_SHAREHOLDER_ID);
-        if (!errors.isEmpty())
-            throw new InvalidRequestException(errors);
-    }
-
-    private void validateUpdateOrderRq(EnterOrderRq updateOrderRq, Security security) {
-        try {
-            Order order = security.findByOrderId(updateOrderRq.getSide(), updateOrderRq.getOrderId());
-            order.checkNewPeakSize(updateOrderRq.getPeakSize());
-            order.checkNewMinimumExecutionQuantity(updateOrderRq.getMinimumExecutionQuantity());
-            order.checkNewStopLimitPrice(updateOrderRq.getStopPrice());
-        }
-        catch (NotFoundException exp) {
-            throw new InvalidRequestException(Message.ORDER_ID_NOT_FOUND);
-        }
-        catch (InvalidIcebergPeakSizeException exp) {
-            throw new InvalidRequestException(Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER);
-        }
-        catch (InvalidPeakSizeException exp) {
-            throw new InvalidRequestException(Message.INVALID_PEAK_SIZE);
-        }
-        catch (UpdateMinimumExecutionQuantityException exp) {
-            throw new InvalidRequestException(Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY);
-        }
-        catch (InvalidStopLimitPriceException exp){
-            throw new InvalidRequestException(Message.INVALID_STOP_LIMIT_UPDATE_PRICE);
-        }
-    }
-
-    private void validateDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
-        List<String> errors = deleteOrderRq.validateYourFields();
-        if (!securityRepository.isThereSecurityWithIsin(deleteOrderRq.getSecurityIsin()))
-            errors.add(Message.UNKNOWN_SECURITY_ISIN);
-        if (!errors.isEmpty())
-            throw new InvalidRequestException(errors);
-        Security security = securityRepository.findSecurityByIsin(deleteOrderRq.getSecurityIsin());
-        if (!security.isThereOrderWithId(deleteOrderRq.getSide(), deleteOrderRq.getOrderId()))
-            throw new InvalidRequestException(Message.ORDER_ID_NOT_FOUND);
-    }
+
+	EventPublisher eventPublisher;
+	ApplicationServices services;
+
+	public OrderHandler(ApplicationServices services, EventPublisher eventPublisher) {
+		this.eventPublisher = eventPublisher;
+		this.services = services;
+	}
+
+	public void handleEnterOrder(EnterOrderRq enterOrderRq) {
+		try {
+			ApplicationServiceResponse response = callService(enterOrderRq);
+			publishApplicationServiceResponse(response);
+		} catch (InvalidRequestException ex) {
+			eventPublisher.publish(
+				new OrderRejectedEvent(enterOrderRq.getRequestId(), enterOrderRq.getOrderId(), ex.getReasons())
+			);
+		}
+	}
+
+	public void handleDeleteOrder(DeleteOrderRq deleteOrderRq) {
+		try {
+			ApplicationServiceResponse response = callService(deleteOrderRq);
+			publishApplicationServiceResponse(response);
+		} catch (InvalidRequestException ex) {
+			eventPublisher.publish(
+				new OrderRejectedEvent(deleteOrderRq.getRequestId(), deleteOrderRq.getOrderId(), ex.getReasons())
+			);
+		}
+	}
+
+	private ApplicationServiceResponse callService(BaseOrderRq req) {
+		if (req instanceof DeleteOrderRq deleteReq) {
+			return callDeleteServices(deleteReq);
+		}
+
+		if (req instanceof EnterOrderRq enterReq) {
+			OrderEntryType type = enterReq.getRequestType();
+			if (type == OrderEntryType.NEW_ORDER) {
+				return callAddServices(enterReq);
+			} else if (type == OrderEntryType.UPDATE_ORDER) {
+				return callUpdateServices(enterReq);
+			}
+		}
+		throw new InvalidRequestException(Message.UNKNOWN_REQUEST_TYPE);
+	}
+
+	private ApplicationServiceResponse callDeleteServices(DeleteOrderRq req) {
+		return services.deleteOrder(req);
+	}
+
+	private ApplicationServiceResponse callAddServices(EnterOrderRq req) {
+		if (req.getStopPrice() != 0) {
+			return services.addStopLimitOrder(req);
+		} else if (req.getPeakSize() != 0) {
+			return services.addIcebergOrder(req);
+		} else {
+			return services.addLimitOrder(req);
+		}
+	}
+
+	private ApplicationServiceResponse callUpdateServices(EnterOrderRq req) {
+		if (req.getStopPrice() != 0) {
+			return services.updateStopLimitOrder(req);
+		} else if (req.getPeakSize() != 0) {
+			return services.updateIcebergOrder(req);
+		} else {
+			return services.updateLimitOrder(req);
+		}
+	}
+
+	private void publishApplicationServiceResponse(ApplicationServiceResponse response) {
+		List<Event> events = createEvents(response);
+		events.forEach(event -> eventPublisher.publish(event));
+	}
+
+	private List<Event> createEvents(ApplicationServiceResponse response) {
+		if (response.isTypeDelete()) {
+			return List.of(new OrderDeletedEvent(response.getRequestId(), response.getOrderId()));
+		}
+
+		List<Event> events = createFirstMatchResultEvents(response);
+		events.addAll(createActivatedEvents(response));
+		return events;
+	}
+
+	private List<Event> createFirstMatchResultEvents(ApplicationServiceResponse response) {
+		if (response.isSuccessful(0)) {
+			return createSuccessEvents(response);
+		} else {
+			return createRejectedEvents(response);
+		}
+	}
+
+	private List<Event> createActivatedEvents(ApplicationServiceResponse response) {
+		List<Event> events = new LinkedList<>();
+		int numOfMatchResults = response.getMatchResults().size();
+
+		for (int i = 1; i < numOfMatchResults; i++) {
+			events.add(new OrderActivatedEvent(response.getOrderId(i)));
+			if ((response.hasTrades(i))) {
+				events.add(createExecutedEvent(response.getOrderId(i), response.getTrades(i)));
+			}
+		}
+
+		return events;
+	}
+
+	private List<Event> createSuccessEvents(ApplicationServiceResponse response) {
+		List<Event> events = new LinkedList<>();
+
+		if (response.isTypeAdd()) {
+			events.add(new OrderAcceptedEvent(response.getRequestId(), response.getOrderId()));
+		} else {
+			events.add(new OrderUpdatedEvent(response.getRequestId(), response.getOrderId()));
+		}
+
+		if (response.hasTrades(0)) {
+			events.add(createExecutedEvent(response.getRequestId(), response.getOrderId(), response.getTrades(0)));
+		}
+
+		return events;
+	}
+
+	private List<Event> createRejectedEvents(ApplicationServiceResponse response) {
+		List<Event> events = new LinkedList<>();
+		MatchingOutcome outcome = response.getOutcome(0);
+
+		if (outcome == MatchingOutcome.NOT_ENOUGH_CREDIT) {
+			events.add(
+				new OrderRejectedEvent(
+					response.getRequestId(),
+					response.getOrderId(),
+					List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)
+				)
+			);
+		} else if (outcome == MatchingOutcome.NOT_ENOUGH_POSITIONS) {
+			events.add(
+				new OrderRejectedEvent(
+					response.getRequestId(),
+					response.getOrderId(),
+					List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)
+				)
+			);
+		} else if (outcome == MatchingOutcome.NOT_ENOUGH_EXECUTION) {
+			events.add(
+				new OrderRejectedEvent(
+					response.getRequestId(),
+					response.getOrderId(),
+					List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)
+				)
+			);
+		}
+		return events;
+	}
+
+	private Event createExecutedEvent(long reqId, long orderId, List<Trade> trades) {
+		return new OrderExecutedEvent(reqId, orderId, trades.stream().map(TradeDTO::new).collect(Collectors.toList()));
+	}
+
+	private Event createExecutedEvent(long orderId, List<Trade> trades) {
+		return new OrderExecutedEvent(orderId, trades.stream().map(TradeDTO::new).collect(Collectors.toList()));
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java
index b97caef..838c29d 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/EventPublisher.java
@@ -1,25 +1,26 @@
 package ir.ramtung.tinyme.messaging;
 
 import ir.ramtung.tinyme.messaging.event.Event;
+import java.util.logging.Logger;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.jms.core.JmsTemplate;
 import org.springframework.stereotype.Component;
 
-import java.util.logging.Logger;
-
 @Component
 public class EventPublisher {
-    private final Logger log = Logger.getLogger(this.getClass().getName());
-    private final JmsTemplate jmsTemplate;
-    @Value("${responseQueue}")
-    private String responseQueue;
 
-    public EventPublisher(JmsTemplate jmsTemplate) {
-        this.jmsTemplate = jmsTemplate;
-    }
+	private final Logger log = Logger.getLogger(this.getClass().getName());
+	private final JmsTemplate jmsTemplate;
+
+	@Value("${responseQueue}")
+	private String responseQueue;
+
+	public EventPublisher(JmsTemplate jmsTemplate) {
+		this.jmsTemplate = jmsTemplate;
+	}
 
-    public void publish(Event event) {
-        log.info("Published : " + event);
-        jmsTemplate.convertAndSend(responseQueue, event);
-    }
+	public void publish(Event event) {
+		log.info("Published : " + event);
+		jmsTemplate.convertAndSend(responseQueue, event);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
index 000e6d0..77ff3b8 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/Message.java
@@ -1,26 +1,29 @@
 package ir.ramtung.tinyme.messaging;
 
 public class Message {
-    public static final String INVALID_ORDER_ID = "Invalid order ID";
-    public static final String ORDER_QUANTITY_NOT_POSITIVE = "Order quantity is not-positive";
-    public static final String ORDER_PRICE_NOT_POSITIVE = "Order price is not-positive";
-    public static final String UNKNOWN_SECURITY_ISIN = "Unknown security ISIN";
-    public static final String ORDER_ID_NOT_FOUND = "Order ID not found in the order book";
-    public static final String INVALID_PEAK_SIZE = "Iceberg order peak size is out of range";
-    public static final String CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER = "Cannot specify 0 peak size for a iceberg order";
-    public static final String UNKNOWN_BROKER_ID = "Unknown broker ID";
-    public static final String UNKNOWN_SHAREHOLDER_ID = "Unknown shareholder ID";
-    public static final String BUYER_HAS_NOT_ENOUGH_CREDIT = "Buyer has not enough credit";
-    public static final String QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE = "Quantity is not a multiple of security lot size";
-    public static final String PRICE_NOT_MULTIPLE_OF_TICK_SIZE = "Price is not a multiple of security tick size";
-    public static final String SELLER_HAS_NOT_ENOUGH_POSITIONS = "Seller has not enough positions";
-    public static final String INVALID_MINIMUM_EXECUTION_QUANTITY = "Invalid minimum execution quantity";
-    public static final String CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY = "Cannot update minimum execution quantity";
-    public static final String MINIMUM_EXECUTION_QUANTITY_NOT_MET = "The minimum execution quantity was not met";
-    public static final String SIDE_CAN_NOT_BE_NULL = "Side can not be null value";
-    public static final String INVALID_STOP_PRICE = "Invalid stop price";
-    public static final String STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY = "Stop limit orders can not have minimum execution quantity";
-    public static final String STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG = "Stop limit orders can not be iceberg";
-    public static final String INVALID_STOP_LIMIT_UPDATE_PRICE = "This order can not be updated by given stop price.";
 
+	public static final String INVALID_ORDER_ID = "Invalid order ID";
+	public static final String ORDER_QUANTITY_NOT_POSITIVE = "Order quantity is not-positive";
+	public static final String ORDER_PRICE_NOT_POSITIVE = "Order price is not-positive";
+	public static final String UNKNOWN_SECURITY_ISIN = "Unknown security ISIN";
+	public static final String ORDER_ID_NOT_FOUND = "Order ID not found in the order book";
+	public static final String INVALID_PEAK_SIZE = "Iceberg order peak size is out of range";
+	public static final String CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER =
+		"Cannot specify 0 peak size for a iceberg order";
+	public static final String UNKNOWN_BROKER_ID = "Unknown broker ID";
+	public static final String UNKNOWN_SHAREHOLDER_ID = "Unknown shareholder ID";
+	public static final String BUYER_HAS_NOT_ENOUGH_CREDIT = "Buyer has not enough credit";
+	public static final String QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE = "Quantity is not a multiple of security lot size";
+	public static final String PRICE_NOT_MULTIPLE_OF_TICK_SIZE = "Price is not a multiple of security tick size";
+	public static final String SELLER_HAS_NOT_ENOUGH_POSITIONS = "Seller has not enough positions";
+	public static final String INVALID_MINIMUM_EXECUTION_QUANTITY = "Invalid minimum execution quantity";
+	public static final String CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY = "Cannot update minimum execution quantity";
+	public static final String MINIMUM_EXECUTION_QUANTITY_NOT_MET = "The minimum execution quantity was not met";
+	public static final String SIDE_CAN_NOT_BE_NULL = "Side can not be null value";
+	public static final String INVALID_STOP_PRICE = "Invalid stop price";
+	public static final String STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY =
+		"Stop limit orders can not have minimum execution quantity";
+	public static final String STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG = "Stop limit orders can not be iceberg";
+	public static final String INVALID_STOP_LIMIT_UPDATE_PRICE = "This order can not be updated by given stop price.";
+	public static final String UNKNOWN_REQUEST_TYPE = "Unknown request type";
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java
index 1fb60cc..3177171 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/MessagingConfig.java
@@ -8,11 +8,12 @@ import org.springframework.jms.support.converter.MessageType;
 
 @Configuration
 public class MessagingConfig {
-    @Bean
-    public MessageConverter jacksonJmsMessageConverter() {
-        MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();
-        converter.setTargetType(MessageType.TEXT);
-        converter.setTypeIdPropertyName("_type");
-        return converter;
-    }
+
+	@Bean
+	public MessageConverter jacksonJmsMessageConverter() {
+		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();
+		converter.setTargetType(MessageType.TEXT);
+		converter.setTypeIdPropertyName("_type");
+		return converter;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
index 5165ddd..0813802 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/RequestDispatcher.java
@@ -1,31 +1,34 @@
 package ir.ramtung.tinyme.messaging;
 
+import ir.ramtung.tinyme.domain.service.OrderHandler;
 import ir.ramtung.tinyme.messaging.request.DeleteOrderRq;
 import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
-import ir.ramtung.tinyme.domain.service.OrderHandler;
+import java.util.logging.Logger;
 import org.springframework.jms.annotation.JmsListener;
 import org.springframework.stereotype.Component;
 
-import java.util.logging.Logger;
-
 @Component
 public class RequestDispatcher {
-    private final Logger log = Logger.getLogger(this.getClass().getName());
-    private final OrderHandler orderHandler;
 
-    public RequestDispatcher(OrderHandler orderHandler) {
-        this.orderHandler = orderHandler;
-    }
+	private final Logger log = Logger.getLogger(this.getClass().getName());
+	private final OrderHandler orderHandler;
+
+	public RequestDispatcher(OrderHandler orderHandler) {
+		this.orderHandler = orderHandler;
+	}
 
-    @JmsListener(destination = "${requestQueue}", selector = "_type='ir.ramtung.tinyme.messaging.request.EnterOrderRq'")
-    public void receiveEnterOrderRq(EnterOrderRq enterOrderRq) {
-        log.info("Received message: " + enterOrderRq);
-        orderHandler.handleEnterOrder(enterOrderRq);
-    }
+	@JmsListener(destination = "${requestQueue}", selector = "_type='ir.ramtung.tinyme.messaging.request.EnterOrderRq'")
+	public void receiveEnterOrderRq(EnterOrderRq enterOrderRq) {
+		log.info("Received message: " + enterOrderRq);
+		orderHandler.handleEnterOrder(enterOrderRq);
+	}
 
-    @JmsListener(destination = "${requestQueue}", selector = "_type='ir.ramtung.tinyme.messaging.request.DeleteOrderRq'")
-    public void receiveDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
-        log.info("Received message: " + deleteOrderRq);
-        orderHandler.handleDeleteOrder(deleteOrderRq);
-    }
+	@JmsListener(
+		destination = "${requestQueue}",
+		selector = "_type='ir.ramtung.tinyme.messaging.request.DeleteOrderRq'"
+	)
+	public void receiveDeleteOrderRq(DeleteOrderRq deleteOrderRq) {
+		log.info("Received message: " + deleteOrderRq);
+		orderHandler.handleDeleteOrder(deleteOrderRq);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java
index 42c101e..f8dc4f0 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/TradeDTO.java
@@ -2,14 +2,14 @@ package ir.ramtung.tinyme.messaging;
 
 import ir.ramtung.tinyme.domain.entity.Trade;
 
-public record TradeDTO(
-    String securityIsin,
-    int price,
-    int quantity,
-    long buyOrderId,
-    long sellOrderId) {
-
-    public TradeDTO(Trade trade) {
-        this(trade.getSecurity().getIsin(), trade.getPrice(), trade.getQuantity(), trade.getBuy().getOrderId(), trade.getSell().getOrderId());
-    }
+public record TradeDTO(String securityIsin, int price, int quantity, long buyOrderId, long sellOrderId) {
+	public TradeDTO(Trade trade) {
+		this(
+			trade.getSecurity().getIsin(),
+			trade.getPrice(),
+			trade.getQuantity(),
+			trade.getBuy().getOrderId(),
+			trade.getSell().getOrderId()
+		);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java
index e05de03..b204ac2 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/Event.java
@@ -4,21 +4,23 @@ import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
 import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
+import java.time.LocalDateTime;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 
-import java.time.LocalDateTime;
-
 @EqualsAndHashCode
 public abstract class Event {
-    @Getter
-    @JsonSerialize(using = LocalDateTimeSerializer.class)
-    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
-    private final LocalDateTime time;
-    public Event() {
-        time = LocalDateTime.now();
-    }
-    public Event(LocalDateTime time) {
-        this.time = time;
-    }
+
+	@Getter
+	@JsonSerialize(using = LocalDateTimeSerializer.class)
+	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
+	private final LocalDateTime time;
+
+	public Event() {
+		time = LocalDateTime.now();
+	}
+
+	public Event(LocalDateTime time) {
+		this.time = time;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java
index 2145564..3b48365 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderAcceptedEvent.java
@@ -10,6 +10,7 @@ import lombok.NoArgsConstructor;
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrderAcceptedEvent extends Event {
-    private long requestId;
-    private long orderId;
+
+	private long requestId;
+	private long orderId;
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderActivatedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderActivatedEvent.java
index df97986..a789ef6 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderActivatedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderActivatedEvent.java
@@ -10,5 +10,6 @@ import lombok.NoArgsConstructor;
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrderActivatedEvent extends Event {
-    private long orderId;
+
+	private long orderId;
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java
index da3b1e3..c73bdcf 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderDeletedEvent.java
@@ -10,6 +10,7 @@ import lombok.NoArgsConstructor;
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrderDeletedEvent extends Event {
-    private long requestId;
-    private long orderId;
+
+	private long requestId;
+	private long orderId;
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java
index 74cd3c5..164506f 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderExecutedEvent.java
@@ -1,27 +1,24 @@
 package ir.ramtung.tinyme.messaging.event;
 
 import ir.ramtung.tinyme.messaging.TradeDTO;
+import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 
-import java.util.List;
-
 @Data
 @EqualsAndHashCode(callSuper = false)
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrderExecutedEvent extends Event {
-    private long requestId;
-    private long orderId;
-    private List<TradeDTO> trades;
 
+	private long requestId;
+	private long orderId;
+	private List<TradeDTO> trades;
 
-    public OrderExecutedEvent(long orderId, List<TradeDTO> trades) {
-        this.orderId = orderId;
-        this.trades = trades;
-    }
+	public OrderExecutedEvent(long orderId, List<TradeDTO> trades) {
+		this.orderId = orderId;
+		this.trades = trades;
+	}
 }
-
-
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java
index e2fb923..74586ef 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderRejectedEvent.java
@@ -1,18 +1,18 @@
 package ir.ramtung.tinyme.messaging.event;
 
+import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 
-import java.util.List;
-
 @Data
 @EqualsAndHashCode(callSuper = false)
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrderRejectedEvent extends Event {
-    private long requestId;
-    private long orderId;
-    private List<String> errors;
+
+	private long requestId;
+	private long orderId;
+	private List<String> errors;
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java
index e8eda6c..f14de3e 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/event/OrderUpdatedEvent.java
@@ -10,6 +10,7 @@ import lombok.NoArgsConstructor;
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrderUpdatedEvent extends Event {
-    private long requestId;
-    private long orderId;
+
+	private long requestId;
+	private long orderId;
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java
index d1365c3..6eabb7b 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/exception/InvalidRequestException.java
@@ -1,22 +1,20 @@
 package ir.ramtung.tinyme.messaging.exception;
 
+import java.util.List;
 import lombok.Getter;
 import lombok.ToString;
 
-import java.util.List;
-
 @ToString
 public class InvalidRequestException extends RuntimeException {
-    @Getter
-    private final List<String> reasons;
-
-    public InvalidRequestException(List<String> reasons) {
-        this.reasons = reasons;
-    }
 
-    public InvalidRequestException(String reason) {
-        this.reasons = List.of(reason);
-    }
+	@Getter
+	private final List<String> reasons;
 
+	public InvalidRequestException(List<String> reasons) {
+		this.reasons = reasons;
+	}
 
+	public InvalidRequestException(String reason) {
+		this.reasons = List.of(reason);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
index 1c330db..2227983 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/BaseOrderRq.java
@@ -1,44 +1,44 @@
 package ir.ramtung.tinyme.messaging.request;
 
-import java.time.LocalDateTime;
-import java.util.List;
-
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
 import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
-
 import ir.ramtung.tinyme.domain.entity.Side;
+import java.time.LocalDateTime;
+import java.util.List;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 
 @Getter
 @NoArgsConstructor
 public abstract class BaseOrderRq {
-    protected long requestId;
-    protected String securityIsin;
-    protected Side side;
-    protected long orderId;
-    @JsonSerialize(using = LocalDateTimeSerializer.class)
-    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
-    protected LocalDateTime entryTime = LocalDateTime.now();
 
-    protected BaseOrderRq(long requestId, String securityIsin, Side side, long orderId) {
-        this.requestId = requestId;
-        this.securityIsin = securityIsin;
-        this.side = side;
-        this.orderId = orderId;
-    }
-    
-    protected String getAllPropertiesString() {
-        return (
-            "requestId=" + requestId + ", " +
-            "securityIsin=" + securityIsin + ", " +
-            "side=" + side + ", " +
-            "orderId=" + orderId + ", " +
-            "entryTime=" + entryTime
-        );
-    } 
+	protected long requestId;
+	protected String securityIsin;
+	protected Side side;
+	protected long orderId;
+
+	@JsonSerialize(using = LocalDateTimeSerializer.class)
+	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
+	protected LocalDateTime entryTime = LocalDateTime.now();
+
+	protected BaseOrderRq(long requestId, String securityIsin, Side side, long orderId) {
+		this.requestId = requestId;
+		this.securityIsin = securityIsin;
+		this.side = side;
+		this.orderId = orderId;
+	}
+
+	protected String getAllPropertiesString() {
+		return (
+			"requestId="    + requestId    + ", " +
+			"securityIsin=" + securityIsin + ", " +
+			"side="         + side         + ", " +
+			"orderId="      + orderId      + ", " +
+			"entryTime="    + entryTime
+		);
+	}
 
-    public abstract List<String> validateYourFields();
+	public abstract List<String> validateYourFields();
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
index 333e986..c1b1921 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/DeleteOrderRq.java
@@ -1,32 +1,35 @@
 package ir.ramtung.tinyme.messaging.request;
 
-import java.util.LinkedList;
-import java.util.List;
-
 import ir.ramtung.tinyme.domain.entity.Side;
 import ir.ramtung.tinyme.messaging.Message;
+import java.util.LinkedList;
+import java.util.List;
 import lombok.NoArgsConstructor;
 
 @NoArgsConstructor
-public class DeleteOrderRq extends BaseOrderRq{
+public class DeleteOrderRq extends BaseOrderRq {
+
+	public DeleteOrderRq(long requestId, String securityIsin, Side side, long orderId) {
+		super(requestId, securityIsin, side, orderId);
+	}
 
-    public DeleteOrderRq(long requestId, String securityIsin, Side side, long orderId) {
-        super(requestId, securityIsin, side, orderId);
-    }
+	@Override
+	public String toString() {
+		return "DeleteOrderRq(" + this.getAllPropertiesString() + ")";
+	}
 
-    @Override
-    public String toString() {
-        return "DeleteOrderRq(" + this.getAllPropertiesString() + ")";
-    }
+	@Override
+	public List<String> validateYourFields() {
+		List<String> errors = new LinkedList<>();
 
-    @Override
-    public List<String> validateYourFields() {
-        List<String> errors = new LinkedList<>();
-        if (orderId <= 0)
+		if (orderId <= 0) {
             errors.add(Message.INVALID_ORDER_ID);
-        if(side == null)
+        }
+        
+		if (side == null) {
             errors.add(Message.SIDE_CAN_NOT_BE_NULL);
+        }
 
-        return errors;
-    }
+		return errors;
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
index 624a677..9b8bae2 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/EnterOrderRq.java
@@ -2,126 +2,252 @@ package ir.ramtung.tinyme.messaging.request;
 
 import ir.ramtung.tinyme.domain.entity.Side;
 import ir.ramtung.tinyme.messaging.Message;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-
 import java.time.LocalDateTime;
 import java.util.LinkedList;
 import java.util.List;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
 
 @Getter
 @NoArgsConstructor
-public class EnterOrderRq extends BaseOrderRq{
-    private OrderEntryType requestType;
-    private int quantity;
-    private int price;
-    private long brokerId;
-    private long shareholderId;
-    private int peakSize;
-    private int minimumExecutionQuantity;
-    private int stopPrice;
-    // TODO 
-    // why update(amend) order should have brokerId and shareholder ?
-    // the orderId isn't enough ?
-
-    private EnterOrderRq(OrderEntryType orderEntryType, long requestId, String securityIsin, long orderId,
-    LocalDateTime entryTime, Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, 
-    int minimumExecutionQuantity, int stopPrice) {
-        super(requestId, securityIsin, side, orderId);
-        this.requestType = orderEntryType;
-        this.entryTime = entryTime;
-        this.quantity = quantity;
-        this.price = price;
-        this.brokerId = brokerId;
-        this.shareholderId = shareholderId;
-        this.peakSize = peakSize;
-        this.minimumExecutionQuantity = minimumExecutionQuantity;
-        this.stopPrice = stopPrice;
-    }
-
-    public static EnterOrderRq createNewOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, 
-    Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity) {
-        return new EnterOrderRq(OrderEntryType.NEW_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, 
-                                brokerId, shareholderId, peakSize, minimumExecutionQuantity, 0);
-    }
-
-    public static EnterOrderRq createUpdateOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, 
-    Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity) {
-        return new EnterOrderRq(OrderEntryType.UPDATE_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, 
-                                brokerId, shareholderId, peakSize, minimumExecutionQuantity, 0);
-    }
-
-    public static EnterOrderRq createNewOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, 
-    Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity, int stopPrice) {
-        return new EnterOrderRq(OrderEntryType.NEW_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, 
-                                brokerId, shareholderId, peakSize, minimumExecutionQuantity, stopPrice);
-    }
-
-    public static EnterOrderRq createUpdateOrderRq(long requestId, String securityIsin, long orderId, LocalDateTime entryTime, 
-    Side side, int quantity, int price, long brokerId, long shareholderId, int peakSize, int minimumExecutionQuantity, int stopPrice) {
-        return new EnterOrderRq(OrderEntryType.UPDATE_ORDER, requestId, securityIsin, orderId, entryTime, side, quantity, price, 
-                                brokerId, shareholderId, peakSize, minimumExecutionQuantity, stopPrice);
-    }
-
-    @Override
-    public String toString() {
-        return "EnterOrderRq(" + this.getAllPropertiesString() + ")";
-    }
-
-    @Override
-    protected String getAllPropertiesString() {
-        return (
-            super.getAllPropertiesString() + ", " +
-            "requestType=" + requestType + ", " +
-            "quantity=" + quantity + ", " +
-            "price=" + price + ", " +
-            "brokerId=" + brokerId + ", " +
-            "shareholderId=" + shareholderId + ", " +
-            "peakSize=" + peakSize + ", " +
-            "minimumExecutionQuantity=" + minimumExecutionQuantity
-        );
-    }
-
-    @Override
-    public List<String> validateYourFields() {
-        List<String> errors = new LinkedList<>();
-        if (orderId <= 0)
-            errors.add(Message.INVALID_ORDER_ID);
-        if (quantity <= 0)
-            errors.add(Message.ORDER_QUANTITY_NOT_POSITIVE);
-        if (price <= 0)
-            errors.add(Message.ORDER_PRICE_NOT_POSITIVE);
-        if (!isPeakSizeValid())
-            errors.add(Message.INVALID_PEAK_SIZE);
-        if (!isMinimumExecutionQuantityValid())
-            errors.add(Message.INVALID_MINIMUM_EXECUTION_QUANTITY);
-        if (this.side == null)
-            errors.add(Message.SIDE_CAN_NOT_BE_NULL);
-        errors.addAll(stopPriceValidation());
-        return errors;
-    }
-
-    private List<String> stopPriceValidation() {
-        List<String> errors = new LinkedList<>();
-        if (this.stopPrice == 0)
-            return errors;
-
-        if (this.stopPrice < 0)
-            errors.add(Message.INVALID_STOP_PRICE);
-        if (this.minimumExecutionQuantity != 0)
-            errors.add(Message.STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY);
-        if (this.peakSize != 0)
-            errors.add(Message.STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG);
-        return errors;
-    }
-
-    private boolean isPeakSizeValid() {
-        return (peakSize >= 0) && (peakSize < quantity);
-        //TODO 
-        // peakSize <= quantity ??
-    }
-
-    private boolean isMinimumExecutionQuantityValid() {
-        return (minimumExecutionQuantity >= 0) && (minimumExecutionQuantity <= quantity);
-    }
+public class EnterOrderRq extends BaseOrderRq {
+
+	private OrderEntryType requestType;
+	private int quantity;
+	private int price;
+	private long brokerId;
+	private long shareholderId;
+	private int peakSize;
+	private int minimumExecutionQuantity;
+	private int stopPrice;
+
+	private EnterOrderRq(
+		OrderEntryType orderEntryType,
+		long requestId,
+		String securityIsin,
+		long orderId,
+		LocalDateTime entryTime,
+		Side side,
+		int quantity,
+		int price,
+		long brokerId,
+		long shareholderId,
+		int peakSize,
+		int minimumExecutionQuantity,
+		int stopPrice
+	) {
+		super(requestId, securityIsin, side, orderId);
+		this.requestType = orderEntryType;
+		this.entryTime = entryTime;
+		this.quantity = quantity;
+		this.price = price;
+		this.brokerId = brokerId;
+		this.shareholderId = shareholderId;
+		this.peakSize = peakSize;
+		this.minimumExecutionQuantity = minimumExecutionQuantity;
+		this.stopPrice = stopPrice;
+	}
+
+	public static EnterOrderRq createNewOrderRq(
+		long requestId,
+		String securityIsin,
+		long orderId,
+		LocalDateTime entryTime,
+		Side side,
+		int quantity,
+		int price,
+		long brokerId,
+		long shareholderId,
+		int peakSize,
+		int minimumExecutionQuantity
+	) {
+		return new EnterOrderRq(
+			OrderEntryType.NEW_ORDER,
+			requestId,
+			securityIsin,
+			orderId,
+			entryTime,
+			side,
+			quantity,
+			price,
+			brokerId,
+			shareholderId,
+			peakSize,
+			minimumExecutionQuantity,
+			0
+		);
+	}
+
+	public static EnterOrderRq createUpdateOrderRq(
+		long requestId,
+		String securityIsin,
+		long orderId,
+		LocalDateTime entryTime,
+		Side side,
+		int quantity,
+		int price,
+		long brokerId,
+		long shareholderId,
+		int peakSize,
+		int minimumExecutionQuantity
+	) {
+		return new EnterOrderRq(
+			OrderEntryType.UPDATE_ORDER,
+			requestId,
+			securityIsin,
+			orderId,
+			entryTime,
+			side,
+			quantity,
+			price,
+			brokerId,
+			shareholderId,
+			peakSize,
+			minimumExecutionQuantity,
+			0
+		);
+	}
+
+	public static EnterOrderRq createNewOrderRq(
+		long requestId,
+		String securityIsin,
+		long orderId,
+		LocalDateTime entryTime,
+		Side side,
+		int quantity,
+		int price,
+		long brokerId,
+		long shareholderId,
+		int peakSize,
+		int minimumExecutionQuantity,
+		int stopPrice
+	) {
+		return new EnterOrderRq(
+			OrderEntryType.NEW_ORDER,
+			requestId,
+			securityIsin,
+			orderId,
+			entryTime,
+			side,
+			quantity,
+			price,
+			brokerId,
+			shareholderId,
+			peakSize,
+			minimumExecutionQuantity,
+			stopPrice
+		);
+	}
+
+	public static EnterOrderRq createUpdateOrderRq(
+		long requestId,
+		String securityIsin,
+		long orderId,
+		LocalDateTime entryTime,
+		Side side,
+		int quantity,
+		int price,
+		long brokerId,
+		long shareholderId,
+		int peakSize,
+		int minimumExecutionQuantity,
+		int stopPrice
+	) {
+		return new EnterOrderRq(
+			OrderEntryType.UPDATE_ORDER,
+			requestId,
+			securityIsin,
+			orderId,
+			entryTime,
+			side,
+			quantity,
+			price,
+			brokerId,
+			shareholderId,
+			peakSize,
+			minimumExecutionQuantity,
+			stopPrice
+		);
+	}
+
+	@Override
+	public String toString() {
+		return "EnterOrderRq(" + this.getAllPropertiesString() + ")";
+	}
+
+	@Override
+	protected String getAllPropertiesString() {
+		return (
+			super.getAllPropertiesString()                         + ", " +
+			"requestType="              + requestType              + ", " +
+			"quantity="                 + quantity                 + ", " +
+			"price="                    + price                    + ", " +
+			"brokerId="                 + brokerId                 + ", " +
+			"shareholderId="            + shareholderId            + ", " +
+			"peakSize="                 + peakSize                 + ", " +
+			"minimumExecutionQuantity=" + minimumExecutionQuantity
+		);
+	}
+
+	@Override
+	public List<String> validateYourFields() {
+		List<String> errors = new LinkedList<>();
+
+		if (orderId <= 0) {
+			errors.add(Message.INVALID_ORDER_ID);
+		}
+
+		if (quantity <= 0) {
+			errors.add(Message.ORDER_QUANTITY_NOT_POSITIVE);
+		}
+
+		if (price <= 0) {
+			errors.add(Message.ORDER_PRICE_NOT_POSITIVE);
+		}
+
+		if (!isPeakSizeValid()) {
+			errors.add(Message.INVALID_PEAK_SIZE);
+		}
+
+		if (!isMinimumExecutionQuantityValid()) {
+			errors.add(Message.INVALID_MINIMUM_EXECUTION_QUANTITY);
+		}
+
+		if (this.side == null) {
+			errors.add(Message.SIDE_CAN_NOT_BE_NULL);
+		}
+
+		errors.addAll(stopPriceValidation());
+		return errors;
+	}
+
+	private List<String> stopPriceValidation() {
+		List<String> errors = new LinkedList<>();
+
+		if (this.stopPrice == 0) {
+			return errors;
+		}
+
+		if (this.stopPrice < 0) {
+			errors.add(Message.INVALID_STOP_PRICE);
+		}
+
+		if (this.minimumExecutionQuantity != 0) {
+			errors.add(Message.STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY);
+		}
+
+		if (this.peakSize != 0) {
+			errors.add(Message.STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG);
+		}
+
+		return errors;
+	}
+
+	private boolean isPeakSizeValid() {
+		return (peakSize >= 0) && (peakSize < quantity);
+	}
+
+	private boolean isMinimumExecutionQuantityValid() {
+		return (minimumExecutionQuantity >= 0) && (minimumExecutionQuantity <= quantity);
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java
index cf2358f..e81ab4b 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/messaging/request/OrderEntryType.java
@@ -1,6 +1,6 @@
 package ir.ramtung.tinyme.messaging.request;
 
 public enum OrderEntryType {
-    NEW_ORDER,
-    UPDATE_ORDER
+	NEW_ORDER,
+	UPDATE_ORDER,
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java
index 892cad7..8fdec61 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/BrokerRepository.java
@@ -2,42 +2,41 @@ package ir.ramtung.tinyme.repository;
 
 import ir.ramtung.tinyme.domain.entity.Broker;
 import ir.ramtung.tinyme.repository.exception.NotFoundException;
-
-import org.springframework.stereotype.Component;
-
 import java.util.HashMap;
+import org.springframework.stereotype.Component;
 
 @Component
 public class BrokerRepository {
-    private final HashMap<Long, Broker> brokerById = new HashMap<>();
-    
-    public Broker findBrokerById(long brokerId) {
-        Broker broker = brokerById.get(brokerId);
-        if (broker == null)
+
+	private final HashMap<Long, Broker> brokerById = new HashMap<>();
+
+	public Broker findBrokerById(long brokerId) {
+		Broker broker = brokerById.get(brokerId);
+		if (broker == null) {
             throw new NotFoundException();
-        else
-            return broker;
-    }
-
-    public boolean isThereBrokerWithId(long id) {
-        try {
-            this.findBrokerById(id);
-            return true;
-        }
-        catch (NotFoundException exp) {
-            return false;
-        }
-    }
-
-    public void addBroker(Broker broker) {
-        brokerById.put(broker.getBrokerId(), broker);
-    }
-
-    public void clear() {
-        brokerById.clear();
-    }
-
-    Iterable<? extends Broker> allBrokers() {
-        return brokerById.values();
-    }
+        } 
+        
+        return broker;
+	}
+
+	public boolean isThereBrokerWithId(long id) {
+		try {
+			this.findBrokerById(id);
+			return true;
+		} catch (NotFoundException exp) {
+			return false;
+		}
+	}
+
+	public void addBroker(Broker broker) {
+		brokerById.put(broker.getBrokerId(), broker);
+	}
+
+	public void clear() {
+		brokerById.clear();
+	}
+
+	Iterable<? extends Broker> allBrokers() {
+		return brokerById.values();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
index 8f18f61..2fb8457 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/DataLoader.java
@@ -5,11 +5,6 @@ import com.opencsv.CSVReaderBuilder;
 import ir.ramtung.tinyme.domain.entity.*;
 import jakarta.annotation.PostConstruct;
 import jakarta.annotation.PreDestroy;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Profile;
-import org.springframework.core.io.Resource;
-import org.springframework.stereotype.Component;
-
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.PrintWriter;
@@ -19,241 +14,269 @@ import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.StringJoiner;
 import java.util.logging.Logger;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Profile;
+import org.springframework.core.io.Resource;
+import org.springframework.stereotype.Component;
 
 @Component
 @Profile("!test")
 public class DataLoader {
-    private final Logger log = Logger.getLogger(this.getClass().getName());
-    private final BrokerRepository brokerRepository;
-    private final ShareholderRepository shareholderRepository;
-    private final SecurityRepository securityRepository;
 
-    public DataLoader(BrokerRepository brokerRepository, ShareholderRepository shareholderRepository, SecurityRepository securityRepository) {
-        this.brokerRepository = brokerRepository;
-        this.shareholderRepository = shareholderRepository;
-        this.securityRepository = securityRepository;
-    }
+	private final Logger log = Logger.getLogger(this.getClass().getName());
+	private final BrokerRepository brokerRepository;
+	private final ShareholderRepository shareholderRepository;
+	private final SecurityRepository securityRepository;
+
+	public DataLoader(
+		BrokerRepository brokerRepository,
+		ShareholderRepository shareholderRepository,
+		SecurityRepository securityRepository
+	) {
+		this.brokerRepository = brokerRepository;
+		this.shareholderRepository = shareholderRepository;
+		this.securityRepository = securityRepository;
+	}
+
+	@Value("classpath:persistence/broker.csv")
+	private Resource brokerCsvResource;
+
+	@Value("classpath:persistence/shareholder.csv")
+	private Resource shareholderCsvResource;
+
+	@Value("classpath:persistence/security.csv")
+	private Resource securityCsvResource;
 
-    @Value("classpath:persistence/broker.csv")
-    private Resource brokerCsvResource;
-    @Value("classpath:persistence/shareholder.csv")
-    private Resource shareholderCsvResource;
-    @Value("classpath:persistence/security.csv")
-    private Resource securityCsvResource;
-    @Value("classpath:persistence/position.csv")
-    private Resource positionCsvResource;
-    @Value("classpath:persistence/orderbook.csv")
-    private Resource orderBookCsvResource;
+	@Value("classpath:persistence/position.csv")
+	private Resource positionCsvResource;
 
-    @PostConstruct
-    public void loadAll() throws Exception {
-        loadBrokers();
-        loadShareholders();
-        loadSecurities();
-        loadPositions();
-        loadOrderBook();
-    }
+	@Value("classpath:persistence/orderbook.csv")
+	private Resource orderBookCsvResource;
 
-    @PreDestroy
-    public void saveAll() throws Exception {
-        System.out.print("Saving persistent data ...");
-        saveBrokers();
-        saveShareholdersAndPositions();
-        saveSecuritiesAndOrderBooks();
-        System.out.println(", done!");
-    }
+	@PostConstruct
+	public void loadAll() throws Exception {
+		loadBrokers();
+		loadShareholders();
+		loadSecurities();
+		loadPositions();
+		loadOrderBook();
+	}
 
-    private void loadBrokers() throws Exception {
-        brokerRepository.clear();
-      try (Reader reader = new FileReader(brokerCsvResource.getFile())) {
-            try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
-                String[] line;
-                while ((line = csvReader.readNext()) != null) {
-                    brokerRepository.addBroker(Broker.builder()
-                            .brokerId(Long.parseLong(line[0]))
-                            .name(line[1])
-                            .credit(Long.parseLong(line[0]))
-                            .build());
-                }
-            }
-        }
-        log.info("Brokers loaded");
-    }
+	@PreDestroy
+	public void saveAll() throws Exception {
+		System.out.print("Saving persistent data ...");
+		saveBrokers();
+		saveShareholdersAndPositions();
+		saveSecuritiesAndOrderBooks();
+		System.out.println(", done!");
+	}
 
-    private void loadShareholders() throws Exception {
-        shareholderRepository.clear();
-        try (Reader reader = new FileReader(shareholderCsvResource.getFile())) {
-            try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
-                String[] line;
-                while ((line = csvReader.readNext()) != null) {
-                    shareholderRepository.addShareholder(Shareholder.builder()
-                            .shareholderId(Long.parseLong(line[0]))
-                            .name(line[1])
-                            .build());
-                }
-            }
-        }
-        log.info("Shareholders loaded");
-    }
+	private void loadBrokers() throws Exception {
+		brokerRepository.clear();
+		try (Reader reader = new FileReader(brokerCsvResource.getFile())) {
+			try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
+				String[] line;
+				while ((line = csvReader.readNext()) != null) {
+					brokerRepository.addBroker(
+						Broker
+							.builder()
+							.brokerId(Long.parseLong(line[0]))
+							.name(line[1])
+							.credit(Long.parseLong(line[0]))
+							.build()
+					);
+				}
+			}
+		}
+		log.info("Brokers loaded");
+	}
 
-    private void loadSecurities() throws Exception {
-        securityRepository.clear();
-        try (Reader reader = new FileReader(securityCsvResource.getFile())) {
-            try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
-                String[] line;
-                while ((line = csvReader.readNext()) != null) {
-                    securityRepository.addSecurity(Security.builder()
-                            .isin(line[0])
-                            .tickSize(Integer.parseInt(line[1]))
-                            .lotSize(Integer.parseInt(line[2]))
-                            .build());
-                }
-            }
-        }
-        log.info("Securities loaded");
-    }
+	private void loadShareholders() throws Exception {
+		shareholderRepository.clear();
+		try (Reader reader = new FileReader(shareholderCsvResource.getFile())) {
+			try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
+				String[] line;
+				while ((line = csvReader.readNext()) != null) {
+					shareholderRepository.addShareholder(
+						Shareholder.builder().shareholderId(Long.parseLong(line[0])).name(line[1]).build()
+					);
+				}
+			}
+		}
+		log.info("Shareholders loaded");
+	}
 
-    private void loadPositions() throws Exception {
-        try (Reader reader = new FileReader(positionCsvResource.getFile())) {
-            try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
-                String[] line;
-                while ((line = csvReader.readNext()) != null) {
-                    Shareholder shareholder = shareholderRepository.findShareholderById(Long.parseLong(line[0]));
-                    Security security = securityRepository.findSecurityByIsin(line[1]);
-                    shareholder.incPosition(security, Integer.parseInt(line[2]));
-                }
-            }
-        }
-        log.info("Positions loaded");
-    }
+	private void loadSecurities() throws Exception {
+		securityRepository.clear();
+		try (Reader reader = new FileReader(securityCsvResource.getFile())) {
+			try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
+				String[] line;
+				while ((line = csvReader.readNext()) != null) {
+					securityRepository.addSecurity(
+						Security
+							.builder()
+							.isin(line[0])
+							.tickSize(Integer.parseInt(line[1]))
+							.lotSize(Integer.parseInt(line[2]))
+							.build()
+					);
+				}
+			}
+		}
+		log.info("Securities loaded");
+	}
 
-    private void loadOrderBook() throws Exception {
-        LinkedList<Order> orders = new LinkedList<>();
-        try (Reader reader = new FileReader(orderBookCsvResource.getFile())) {
-            try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
-                String[] line;
-                while ((line = csvReader.readNext()) != null) {
-                    Security security = securityRepository.findSecurityByIsin(line[1]);
-                    Broker broker = brokerRepository.findBrokerById(Long.parseLong(line[6]));
-                    Shareholder shareholder = shareholderRepository.findShareholderById(Long.parseLong(line[7]));
-//orderId,isin,side,quantity,minimumExecutionQuantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
-//0       1    2    3        4                        5     6        7             8         9        10
-                    int peakSize = Integer.parseInt(line[9]);
-                    Order order;
-                    if (peakSize == 0) {
-                        order = new Order(
-                                Long.parseLong(line[0]),
-                                security,
-                                Side.parse(line[2]),
-                                Integer.parseInt(line[3]),
-                                Integer.parseInt(line[4]),
-                                Integer.parseInt(line[5]),
-                                broker,
-                                shareholder,
-                                LocalDateTime.parse(line[8]),
-                                OrderStatus.LOADING);
-                    } else {
-                        order = new IcebergOrder(
-                                Long.parseLong(line[0]),
-                                security,
-                                Side.parse(line[2]),
-                                Integer.parseInt(line[3]),
-                                Integer.parseInt(line[4]),
-                                Integer.parseInt(line[5]),
-                                broker,
-                                shareholder,
-                                LocalDateTime.parse(line[8]),
-                                Integer.parseInt(line[9]),
-                                Integer.parseInt(line[10]),
-                                OrderStatus.LOADING);
-                    }
-                    orders.addFirst(order);
-                }
-            }
-        }
-        Iterator<Order> it = orders.descendingIterator();
-        while (it.hasNext()) {
-            Order order = it.next();
-            order.getSecurity().getOrderBook().enqueue(order);
-        }
-        log.info("Order Book loaded");
-    }
+	private void loadPositions() throws Exception {
+		try (Reader reader = new FileReader(positionCsvResource.getFile())) {
+			try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
+				String[] line;
+				while ((line = csvReader.readNext()) != null) {
+					Shareholder shareholder = shareholderRepository.findShareholderById(Long.parseLong(line[0]));
+					Security security = securityRepository.findSecurityByIsin(line[1]);
+					shareholder.incPosition(security, Integer.parseInt(line[2]));
+				}
+			}
+		}
+		log.info("Positions loaded");
+	}
 
-    private void saveBrokers() throws Exception {
-        try (PrintWriter writer = new PrintWriter(new FileWriter(brokerCsvResource.getFile()))) {
-            writer.println("brokerId,name,credit");
-            for (Broker broker : brokerRepository.allBrokers()) {
-                StringJoiner joiner = new StringJoiner(",");
-                joiner.add(String.valueOf(broker.getBrokerId()))
-                        .add(broker.getName())
-                        .add(String.valueOf(broker.getCredit()));
-                writer.println(joiner);
-            }
-        }
-        log.info("Brokers saved");
-    }
+	private void loadOrderBook() throws Exception {
+		LinkedList<Order> orders = new LinkedList<>();
+		try (Reader reader = new FileReader(orderBookCsvResource.getFile())) {
+			try (CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build()) {
+				String[] line;
+				while ((line = csvReader.readNext()) != null) {
+					Security security = securityRepository.findSecurityByIsin(line[1]);
+					Broker broker = brokerRepository.findBrokerById(Long.parseLong(line[6]));
+					Shareholder shareholder = shareholderRepository.findShareholderById(Long.parseLong(line[7]));				    //orderId,isin,side,quantity,minimumExecutionQuantity,price,brokerId,shareholderId,entryTime,peakSize,displayedQuantity
+    //0       1    2    3        4                        5     6        7             8         9        10
+					int peakSize = Integer.parseInt(line[9]);
+					Order order;
+					if (peakSize == 0) {
+						order =
+							new Order(
+								Long.parseLong(line[0]),
+								security,
+								Side.parse(line[2]),
+								Integer.parseInt(line[3]),
+								Integer.parseInt(line[4]),
+								Integer.parseInt(line[5]),
+								broker,
+								shareholder,
+								LocalDateTime.parse(line[8]),
+								OrderStatus.LOADING
+							);
+					} else {
+						order =
+							new IcebergOrder(
+								Long.parseLong(line[0]),
+								security,
+								Side.parse(line[2]),
+								Integer.parseInt(line[3]),
+								Integer.parseInt(line[4]),
+								Integer.parseInt(line[5]),
+								broker,
+								shareholder,
+								LocalDateTime.parse(line[8]),
+								Integer.parseInt(line[9]),
+								Integer.parseInt(line[10]),
+								OrderStatus.LOADING
+							);
+					}
+					orders.addFirst(order);
+				}
+			}
+		}
+		Iterator<Order> it = orders.descendingIterator();
+		while (it.hasNext()) {
+			Order order = it.next();
+			order.getSecurity().getOrderBook().enqueue(order);
+		}
+		log.info("Order Book loaded");
+	}
 
-    private void saveShareholdersAndPositions() throws Exception {
-        try (PrintWriter shareholderWriter = new PrintWriter(new FileWriter(shareholderCsvResource.getFile()))) {
-            shareholderWriter.println("shareholderId,name");
-            try (PrintWriter positionWriter = new PrintWriter(new FileWriter(positionCsvResource.getFile()))) {
-                positionWriter.println("shareholderId,isin,positions");
-                for (Shareholder shareholder : shareholderRepository.allShareholders()) {
-                    StringJoiner joiner = new StringJoiner(",");
-                    joiner.add(String.valueOf(shareholder.getShareholderId()))
-                            .add(shareholder.getName());
-                    shareholderWriter.println(joiner);
-                    for (var entry : shareholder.getPositions().entrySet()) {
-                        StringJoiner posJoiner = new StringJoiner(",");
-                        posJoiner.add(String.valueOf(shareholder.getShareholderId()))
-                                .add(entry.getKey().getIsin())
-                                .add(String.valueOf(entry.getValue()));
-                        positionWriter.println(posJoiner);
-                    }
-                }
-            }
-        }
-        log.info("Shareholders and Positions saved");
-    }
+	private void saveBrokers() throws Exception {
+		try (PrintWriter writer = new PrintWriter(new FileWriter(brokerCsvResource.getFile()))) {
+			writer.println("brokerId,name,credit");
+			for (Broker broker : brokerRepository.allBrokers()) {
+				StringJoiner joiner = new StringJoiner(",");
+				joiner
+					.add(String.valueOf(broker.getBrokerId()))
+					.add(broker.getName())
+					.add(String.valueOf(broker.getCredit()));
+				writer.println(joiner);
+			}
+		}
+		log.info("Brokers saved");
+	}
 
-    private void saveSecuritiesAndOrderBooks() throws Exception {
-        try (PrintWriter securityWriter = new PrintWriter(new FileWriter(securityCsvResource.getFile()))) {
-            securityWriter.println("isin,tickSize,lotSize");
-            try (PrintWriter orderBookWriter = new PrintWriter(new FileWriter(orderBookCsvResource.getFile()))) {
-                orderBookWriter.println("orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,status,peakSize,displayedQuantity");
-                for (Security security : securityRepository.allSecurities()) {
-                    StringJoiner joiner = new StringJoiner(",");
-                    joiner.add(security.getIsin())
-                            .add(String.valueOf(security.getTickSize()))
-                            .add(String.valueOf(security.getLotSize()));
-                    securityWriter.println(joiner);
-                    for (Order order : security.getOrderBook().getBuyQueue())
-                        orderBookWriter.println(getCSVString(order));
-                    for (Order order : security.getOrderBook().getSellQueue())
-                        orderBookWriter.println(getCSVString(order));
-                }
-            }
-        }
-        log.info("Securities and OrderBook saved");
-    }
+	private void saveShareholdersAndPositions() throws Exception {
+		try (PrintWriter shareholderWriter = new PrintWriter(new FileWriter(shareholderCsvResource.getFile()))) {
+			shareholderWriter.println("shareholderId,name");
+			try (PrintWriter positionWriter = new PrintWriter(new FileWriter(positionCsvResource.getFile()))) {
+				positionWriter.println("shareholderId,isin,positions");
+				for (Shareholder shareholder : shareholderRepository.allShareholders()) {
+					StringJoiner joiner = new StringJoiner(",");
+					joiner.add(String.valueOf(shareholder.getShareholderId())).add(shareholder.getName());
+					shareholderWriter.println(joiner);
+					for (var entry : shareholder.getPositions().entrySet()) {
+						StringJoiner posJoiner = new StringJoiner(",");
+						posJoiner
+							.add(String.valueOf(shareholder.getShareholderId()))
+							.add(entry.getKey().getIsin())
+							.add(String.valueOf(entry.getValue()));
+						positionWriter.println(posJoiner);
+					}
+				}
+			}
+		}
+		log.info("Shareholders and Positions saved");
+	}
 
-    private static String getCSVString(Order order) {
-        StringJoiner orderJoiner = new StringJoiner(",");
-        orderJoiner.add(String.valueOf(order.getOrderId()))
-                .add(order.getSecurity().getIsin())
-                .add(order.getSide().toString())
-                .add(String.valueOf(order.getQuantity()))
-                .add(String.valueOf(order.getPrice()))
-                .add(String.valueOf(order.getBroker().getBrokerId()))
-                .add(String.valueOf(order.getShareholder().getShareholderId()))
-                .add(order.getEntryTime().toString());
-        if (order instanceof IcebergOrder icebergOrder) {
-            orderJoiner.add(String.valueOf(icebergOrder.getPeakSize()))
-                    .add(String.valueOf(icebergOrder.getDisplayedQuantity()));
-        } else {
-            orderJoiner.add("0").add("0");
-        }
-        return orderJoiner.toString();
-    }
+	private void saveSecuritiesAndOrderBooks() throws Exception {
+		try (PrintWriter securityWriter = new PrintWriter(new FileWriter(securityCsvResource.getFile()))) {
+			securityWriter.println("isin,tickSize,lotSize");
+			try (PrintWriter orderBookWriter = new PrintWriter(new FileWriter(orderBookCsvResource.getFile()))) {
+				orderBookWriter.println(
+					"orderId,isin,side,quantity,price,brokerId,shareholderId,entryTime,status,peakSize,displayedQuantity"
+				);
+				for (Security security : securityRepository.allSecurities()) {
+					StringJoiner joiner = new StringJoiner(",");
+					joiner
+						.add(security.getIsin())
+						.add(String.valueOf(security.getTickSize()))
+						.add(String.valueOf(security.getLotSize()));
+					securityWriter.println(joiner);
+					for (Order order : security.getOrderBook().getBuyQueue()) orderBookWriter.println(
+						getCSVString(order)
+					);
+					for (Order order : security.getOrderBook().getSellQueue()) orderBookWriter.println(
+						getCSVString(order)
+					);
+				}
+			}
+		}
+		log.info("Securities and OrderBook saved");
+	}
 
+	private static String getCSVString(Order order) {
+		StringJoiner orderJoiner = new StringJoiner(",");
+		orderJoiner
+			.add(String.valueOf(order.getOrderId()))
+			.add(order.getSecurity().getIsin())
+			.add(order.getSide().toString())
+			.add(String.valueOf(order.getQuantity()))
+			.add(String.valueOf(order.getPrice()))
+			.add(String.valueOf(order.getBroker().getBrokerId()))
+			.add(String.valueOf(order.getShareholder().getShareholderId()))
+			.add(order.getEntryTimes().getFirst().toString());
+		if (order instanceof IcebergOrder icebergOrder) {
+			orderJoiner
+				.add(String.valueOf(icebergOrder.getPeakSize()))
+				.add(String.valueOf(icebergOrder.getDisplayedQuantity()));
+		} else {
+			orderJoiner.add("0").add("0");
+		}
+		return orderJoiner.toString();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java
index a87d1c4..b879394 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/SecurityRepository.java
@@ -2,42 +2,41 @@ package ir.ramtung.tinyme.repository;
 
 import ir.ramtung.tinyme.domain.entity.Security;
 import ir.ramtung.tinyme.repository.exception.NotFoundException;
-
-import org.springframework.stereotype.Component;
-
 import java.util.HashMap;
+import org.springframework.stereotype.Component;
 
 @Component
 public class SecurityRepository {
-    private final HashMap<String, Security> securityByIsin = new HashMap<>();
-
-    public Security findSecurityByIsin(String isin) {
-        Security security = securityByIsin.get(isin);
-        if (security == null)
-            throw new NotFoundException();
-        else 
-            return security;
-    }
-
-    public boolean isThereSecurityWithIsin(String isin) {
-        try {
-            this.findSecurityByIsin(isin);
-            return true;
-        }
-        catch (NotFoundException exp) {
-            return false;
-        }
-    }
-
-    public void addSecurity(Security security) {
-        securityByIsin.put(security.getIsin(), security);
-    }
-
-    public void clear() {
-        securityByIsin.clear();
-    }
-
-    Iterable<? extends Security> allSecurities() {
-        return securityByIsin.values();
-    }
+
+	private final HashMap<String, Security> securityByIsin = new HashMap<>();
+
+	public Security findSecurityByIsin(String isin) {
+		Security security = securityByIsin.get(isin);
+		if (security == null) {
+			throw new NotFoundException();
+		}
+
+		return security;
+	}
+
+	public boolean isThereSecurityWithIsin(String isin) {
+		try {
+			this.findSecurityByIsin(isin);
+			return true;
+		} catch (NotFoundException exp) {
+			return false;
+		}
+	}
+
+	public void addSecurity(Security security) {
+		securityByIsin.put(security.getIsin(), security);
+	}
+
+	public void clear() {
+		securityByIsin.clear();
+	}
+
+	Iterable<? extends Security> allSecurities() {
+		return securityByIsin.values();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java
index 9df65b3..15c04b9 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/ShareholderRepository.java
@@ -2,42 +2,41 @@ package ir.ramtung.tinyme.repository;
 
 import ir.ramtung.tinyme.domain.entity.Shareholder;
 import ir.ramtung.tinyme.repository.exception.NotFoundException;
-
-import org.springframework.stereotype.Component;
-
 import java.util.HashMap;
+import org.springframework.stereotype.Component;
 
 @Component
 public class ShareholderRepository {
-    private final HashMap<Long, Shareholder> shareholderById = new HashMap<>();
-    
-    public Shareholder findShareholderById(long shareholderId) {
-        Shareholder shareholder = shareholderById.get(shareholderId);
-        if(shareholder == null)
-            throw new NotFoundException();
-        else 
-            return shareholder;
-    }
-
-    public boolean isThereShareholderWithId(long id) {
-        try {
-            this.findShareholderById(id);
-            return true;
-        }
-        catch (NotFoundException exp) {
-            return false;
-        }
-    }
 
-    public void addShareholder(Shareholder shareholder) {
-        shareholderById.put(shareholder.getShareholderId(), shareholder);
-    }
+	private final HashMap<Long, Shareholder> shareholderById = new HashMap<>();
 
-    public void clear() {
-        shareholderById.clear();
-    }
-
-    Iterable<? extends Shareholder> allShareholders() {
-        return shareholderById.values();
-    }
+	public Shareholder findShareholderById(long shareholderId) {
+		Shareholder shareholder = shareholderById.get(shareholderId);
+		if (shareholder == null) {
+            throw new NotFoundException(); 
+        }
+        
+        return shareholder;
+	}
+
+	public boolean isThereShareholderWithId(long id) {
+		try {
+			this.findShareholderById(id);
+			return true;
+		} catch (NotFoundException exp) {
+			return false;
+		}
+	}
+
+	public void addShareholder(Shareholder shareholder) {
+		shareholderById.put(shareholder.getShareholderId(), shareholder);
+	}
+
+	public void clear() {
+		shareholderById.clear();
+	}
+
+	Iterable<? extends Shareholder> allShareholders() {
+		return shareholderById.values();
+	}
 }
diff --git a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/exception/NotFoundException.java b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/exception/NotFoundException.java
index ad5a657..42b0256 100644
--- a/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/exception/NotFoundException.java
+++ b/TinyME_v2.0/src/main/java/ir/ramtung/tinyme/repository/exception/NotFoundException.java
@@ -1,12 +1,12 @@
 package ir.ramtung.tinyme.repository.exception;
 
-public class NotFoundException extends RuntimeException{
+public class NotFoundException extends RuntimeException {
 
-    public NotFoundException(String msg) {
-        super(msg);
-    }
+	public NotFoundException(String msg) {
+		super(msg);
+	}
 
-    public NotFoundException() {
-        super();
-    }
+	public NotFoundException() {
+		super();
+	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java
index 516be54..4b72451 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/config/MockedJMSTestConfig.java
@@ -7,8 +7,10 @@ import org.springframework.boot.test.mock.mockito.MockBean;
 
 @TestConfiguration
 public class MockedJMSTestConfig {
-    @MockBean
-    EventPublisher eventPublisher;
-    @MockBean
-    RequestDispatcher requestDispatcher;
+
+	@MockBean
+	EventPublisher eventPublisher;
+
+	@MockBean
+	RequestDispatcher requestDispatcher;
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
index 0c3967c..ea4418d 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/MatcherTest.java
@@ -1,8 +1,12 @@
 package ir.ramtung.tinyme.domain;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import ir.ramtung.tinyme.config.MockedJMSTestConfig;
 import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.service.Matcher;
+import java.util.Arrays;
+import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -10,123 +14,68 @@ import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.annotation.DirtiesContext;
 
-import java.util.Arrays;
-import java.util.List;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
 @SpringBootTest
 @Import(MockedJMSTestConfig.class)
 @DirtiesContext
 public class MatcherTest {
-    private Security security;
-    private Broker broker;
-    private Shareholder shareholder;
-    private OrderBook orderBook;
-    private List<Order> orders;
-    @Autowired
-    private Matcher matcher;
-
-    @BeforeEach
-    void setupOrderBook() {
-        security = Security.builder().build();
-        broker = Broker.builder().credit(100_000_000L).build();
-        shareholder = Shareholder.builder().build();
-        shareholder.incPosition(security, 100_000);
-        orderBook = security.getOrderBook();
-        orders = Arrays.asList(
-            new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
-            new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
-            new Order(3, security, Side.BUY, 445, 15450, broker, shareholder),
-            new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
-            new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder),
-            new Order(6, security, Side.SELL, 350, 15800, broker, shareholder),
-            new Order(7, security, Side.SELL, 285, 15810, broker, shareholder),
-            new Order(8, security, Side.SELL, 800, 15810, broker, shareholder),
-            new Order(9, security, Side.SELL, 340, 15820, broker, shareholder),
-            new Order(10, security, Side.SELL, 65, 15820, broker, shareholder)
-        );
-        orders.forEach(order -> orderBook.enqueue(order));
-    }
-
-    @Test
-    void new_sell_order_matches_completely_with_part_of_the_first_buy() {
-        Order order = new Order(11, security, Side.SELL, 100, 15600, broker, shareholder);
-        Trade trade = new Trade(security, 15700, 100, orders.get(0), order);
-        List<Trade> trades = matcher.match(order);
-        assertThat(order.getQuantity()).isEqualTo(0);
-        assertThat(trades).containsExactly(trade);
-        assertThat(security.getOrderBook().getBuyQueue().getFirst().getQuantity()).isEqualTo(204);
-    }
-
-    @Test
-    void new_sell_order_matches_partially_with_the_first_buy() {
-        Order order = new Order(11, security, Side.SELL, 500, 15600, broker, shareholder);
-        Trade trade = new Trade(security, 15700, 304, orders.get(0), order);
-        List<Trade> trades = matcher.match(order);
-        assertThat(order.getQuantity()).isEqualTo(196);
-        assertThat(trades).containsExactly(trade);
-        assertThat(security.getOrderBook().getBuyQueue().getFirst().getOrderId()).isEqualTo(2);
-    }
-
-    // @Test
-    // void new_sell_order_matches_partially_with_two_buys() {
-    //     Order order = new Order(11, security, Side.SELL, 500, 15500, broker, shareholder);
-    //     Trade trade1 = new Trade(security, 15700, 304, orders.get(0), order);
-    //     Trade trade2 = new Trade(security, 15500, 43, orders.get(1), order.snapshotWithQuantity(196));
-    //     MatchResult result = matcher.match(order);
-    //     assertThat(result.remainder().getQuantity()).isEqualTo(153);
-    //     assertThat(result.trades()).containsExactly(trade1, trade2);
-    //     assertThat(security.getOrderBook().getBuyQueue().getFirst().getOrderId()).isEqualTo(3);
-    // }
 
-    // @Test
-    // void new_buy_order_matches_partially_with_the_entire_sell_queue() {
-    //     Order order = new Order(11, security, Side.BUY, 2000, 15820, broker, shareholder);
-    //     List<Trade> trades = new ArrayList<>();
-    //     int totalTraded = 0;
-    //     for (Order o : orders.subList(5, 10)) {
-    //         trades.add(new Trade(security, o.getPrice(), o.getQuantity(),
-    //                 order.snapshotWithQuantity(order.getQuantity() - totalTraded), o));
-    //         totalTraded += o.getQuantity();
-    //     }
+	private Security security;
+	private Broker broker;
+	private Shareholder shareholder;
+	private OrderBook orderBook;
+	private List<Order> orders;
 
-    //     MatchResult result = matcher.match(order);
-    //     assertThat(result.remainder().getQuantity()).isEqualTo(160);
-    //     assertThat(result.trades()).isEqualTo(trades);
-    //     assertThat(security.getOrderBook().getSellQueue()).isEmpty();
-    // }
+	@Autowired
+	private Matcher matcher;
 
-    @Test
-    void new_buy_order_does_not_match() {
-        Order order = new Order(11, security, Side.BUY, 2000, 15500, broker, shareholder);
-        List<Trade> trades = matcher.match(order);
-        assertThat(order).isEqualTo(order);
-        assertThat(trades).isEmpty();
-    }
+	@BeforeEach
+	void setupOrderBook() {
+		security = Security.builder().build();
+		broker = Broker.builder().credit(100_000_000L).build();
+		shareholder = Shareholder.builder().build();
+		shareholder.incPosition(security, 100_000);
+		orderBook = security.getOrderBook();
+		orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
+				new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
+				new Order(3, security, Side.BUY, 445, 15450, broker, shareholder),
+				new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
+				new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder),
+				new Order(6, security, Side.SELL, 350, 15800, broker, shareholder),
+				new Order(7, security, Side.SELL, 285, 15810, broker, shareholder),
+				new Order(8, security, Side.SELL, 800, 15810, broker, shareholder),
+				new Order(9, security, Side.SELL, 340, 15820, broker, shareholder),
+				new Order(10, security, Side.SELL, 65, 15820, broker, shareholder)
+			);
+		orders.forEach(order -> orderBook.enqueue(order));
+	}
 
-    // @Test
-    // void iceberg_order_in_queue_matched_completely_after_three_rounds() {
-    //     security = Security.builder().build();
-    //     broker = Broker.builder().build();
-    //     orderBook = security.getOrderBook();
-    //     orders = Arrays.asList(
-    //             new IcebergOrder(1, security, Side.BUY, 450, 15450, broker, shareholder, 200),
-    //             new Order(2, security, Side.BUY, 70, 15450, broker, shareholder),
-    //             new Order(3, security, Side.BUY, 1000, 15400, broker, shareholder)
-    //     );
-    //     orders.forEach(order -> orderBook.enqueue(order));
-    //     Order order = new Order(4, security, Side.SELL, 600, 15450, broker, shareholder);
-    //     List<Trade> trades = List.of(
-    //             new Trade(security, 15450, 200, orders.get(0).snapshotWithQuantity(200), order.snapshotWithQuantity(600)),
-    //             new Trade(security, 15450, 70, orders.get(1).snapshotWithQuantity(70), order.snapshotWithQuantity(400)),
-    //             new Trade(security, 15450, 200, orders.get(0).snapshotWithQuantity(200), order.snapshotWithQuantity(330)),
-    //             new Trade(security, 15450, 50, orders.get(0).snapshotWithQuantity(50), order.snapshotWithQuantity(130))
-    //     );
+	@Test
+	void new_sell_order_matches_completely_with_part_of_the_first_buy() {
+		Order order = new Order(11, security, Side.SELL, 100, 15600, broker, shareholder);
+		Trade trade = new Trade(security, 15700, 100, orders.get(0), order);
+		List<Trade> trades = matcher.match(order);
+		assertThat(order.getQuantity()).isEqualTo(0);
+		assertThat(trades).containsExactly(trade);
+		assertThat(security.getOrderBook().getBuyQueue().getFirst().getQuantity()).isEqualTo(204);
+	}
 
-    //     MatchResult result = matcher.match(order);
+	@Test
+	void new_sell_order_matches_partially_with_the_first_buy() {
+		Order order = new Order(11, security, Side.SELL, 500, 15600, broker, shareholder);
+		Trade trade = new Trade(security, 15700, 304, orders.get(0), order);
+		List<Trade> trades = matcher.match(order);
+		assertThat(order.getQuantity()).isEqualTo(196);
+		assertThat(trades).containsExactly(trade);
+		assertThat(security.getOrderBook().getBuyQueue().getFirst().getOrderId()).isEqualTo(2);
+	}
 
-    //     assertThat(result.remainder().getQuantity()).isEqualTo(80);
-    //     assertThat(result.trades()).isEqualTo(trades);
-    // }
+	@Test
+	void new_buy_order_does_not_match() {
+		Order order = new Order(11, security, Side.BUY, 2000, 15500, broker, shareholder);
+		List<Trade> trades = matcher.match(order);
+		assertThat(order).isEqualTo(order);
+		assertThat(trades).isEmpty();
+	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java
index b1125de..e260850 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderBookTest.java
@@ -1,82 +1,81 @@
 package ir.ramtung.tinyme.domain;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
+
 import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
-
+import java.util.Arrays;
+import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import java.util.Arrays;
-import java.util.List;
+class OrderBookTest {
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
+	private Security security;
+	private List<Order> orders;
 
-class OrderBookTest {
-    private Security security;
-    private List<Order> orders;
-    @BeforeEach
-    void setupOrderBook() {
-        security = Security.builder().build();
-        Broker broker = Broker.builder().credit(35_841_250).build();
-        Shareholder shareholder = Shareholder.builder().build();
-        shareholder.incPosition(security, 100_000);
-        orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
-                new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
-                new Order(3, security, Side.BUY, 445, 15450, broker, shareholder),
-                new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
-                new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder),
-                new Order(6, security, Side.SELL, 350, 15800, broker, shareholder),
-                new Order(7, security, Side.SELL, 285, 15810, broker, shareholder),
-                new Order(8, security, Side.SELL, 800, 15810, broker, shareholder),
-                new Order(9, security, Side.SELL, 340, 15820, broker, shareholder),
-                new Order(10, security, Side.SELL, 65, 15820, broker, shareholder)
-        );
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-    }
+	@BeforeEach
+	void setupOrderBook() {
+		security = Security.builder().build();
+		Broker broker = Broker.builder().credit(35_841_250).build();
+		Shareholder shareholder = Shareholder.builder().build();
+		shareholder.incPosition(security, 100_000);
+		orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
+				new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
+				new Order(3, security, Side.BUY, 445, 15450, broker, shareholder),
+				new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
+				new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder),
+				new Order(6, security, Side.SELL, 350, 15800, broker, shareholder),
+				new Order(7, security, Side.SELL, 285, 15810, broker, shareholder),
+				new Order(8, security, Side.SELL, 800, 15810, broker, shareholder),
+				new Order(9, security, Side.SELL, 340, 15820, broker, shareholder),
+				new Order(10, security, Side.SELL, 65, 15820, broker, shareholder)
+			);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+	}
 
-    @Test
-    void finds_the_first_order_by_id() {
-        assertThat(security.getOrderBook().findByOrderId(Side.BUY, 1))
-                .isEqualTo(orders.get(0));
-    }
+	@Test
+	void finds_the_first_order_by_id() {
+		assertThat(security.getOrderBook().findByOrderId(Side.BUY, 1)).isEqualTo(orders.get(0));
+	}
 
-    @Test
-    void fails_to_find_the_first_order_by_id_in_the_wrong_queue() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.getOrderBook().findByOrderId(Side.SELL, 1));
-    }
+	@Test
+	void fails_to_find_the_first_order_by_id_in_the_wrong_queue() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> security.getOrderBook().findByOrderId(Side.SELL, 1));
+	}
 
-    @Test
-    void finds_some_order_in_the_middle_by_id() {
-        assertThat(security.getOrderBook().findByOrderId(Side.BUY, 3))
-                .isEqualTo(orders.get(2));
-    }
+	@Test
+	void finds_some_order_in_the_middle_by_id() {
+		assertThat(security.getOrderBook().findByOrderId(Side.BUY, 3)).isEqualTo(orders.get(2));
+	}
 
-    @Test
-    void finds_the_last_order_by_id() {
-        assertThat(security.getOrderBook().findByOrderId(Side.SELL, 10))
-                .isEqualTo(orders.get(9));
-    }
+	@Test
+	void finds_the_last_order_by_id() {
+		assertThat(security.getOrderBook().findByOrderId(Side.SELL, 10)).isEqualTo(orders.get(9));
+	}
 
-    @Test
-    void removes_the_first_order_by_id() {
-        OrderBook orderBook = security.getOrderBook();
-        orderBook.removeByOrderId(Side.BUY, 1);
-        assertThat(orderBook.getBuyQueue()).isEqualTo(orders.subList(1, 5));
-    }
+	@Test
+	void removes_the_first_order_by_id() {
+		OrderBook orderBook = security.getOrderBook();
+		orderBook.removeByOrderId(Side.BUY, 1);
+		assertThat(orderBook.getBuyQueue()).isEqualTo(orders.subList(1, 5));
+	}
 
-    @Test
-    void fails_to_remove_the_first_order_by_id_in_the_wrong_queue() {
-        OrderBook orderBook = security.getOrderBook();
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> orderBook.removeByOrderId(Side.SELL, 1));
-        assertThat(orderBook.getBuyQueue()).isEqualTo(orders.subList(0, 5));
-    }
+	@Test
+	void fails_to_remove_the_first_order_by_id_in_the_wrong_queue() {
+		OrderBook orderBook = security.getOrderBook();
+		assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> orderBook.removeByOrderId(Side.SELL, 1));
+		assertThat(orderBook.getBuyQueue()).isEqualTo(orders.subList(0, 5));
+	}
 
-    @Test
-    void removes_the_last_order_by_id() {
-        OrderBook orderBook = security.getOrderBook();
-        orderBook.removeByOrderId(Side.SELL, 10);
-        assertThat(orderBook.getSellQueue()).isEqualTo(orders.subList(5, 9));
-    }
-}
\ No newline at end of file
+	@Test
+	void removes_the_last_order_by_id() {
+		OrderBook orderBook = security.getOrderBook();
+		orderBook.removeByOrderId(Side.SELL, 10);
+		assertThat(orderBook.getSellQueue()).isEqualTo(orders.subList(5, 9));
+	}
+}
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
index 935c5fe..e2476c6 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/OrderHandlerTest.java
@@ -1,7 +1,11 @@
 package ir.ramtung.tinyme.domain;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.*;
+
 import ir.ramtung.tinyme.config.MockedJMSTestConfig;
 import ir.ramtung.tinyme.domain.entity.*;
+import ir.ramtung.tinyme.domain.service.ApplicationServices;
 import ir.ramtung.tinyme.domain.service.Matcher;
 import ir.ramtung.tinyme.domain.service.OrderHandler;
 import ir.ramtung.tinyme.messaging.EventPublisher;
@@ -13,6 +17,9 @@ import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import ir.ramtung.tinyme.repository.BrokerRepository;
 import ir.ramtung.tinyme.repository.SecurityRepository;
 import ir.ramtung.tinyme.repository.ShareholderRepository;
+import java.time.LocalDateTime;
+import java.util.Arrays;
+import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
@@ -21,738 +28,1189 @@ import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.annotation.DirtiesContext;
 
-import java.time.LocalDateTime;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.*;
-
 @SpringBootTest
 @Import(MockedJMSTestConfig.class)
 @DirtiesContext
 public class OrderHandlerTest {
-    @Autowired
-    OrderHandler orderHandler;
-    @Autowired
-    EventPublisher eventPublisher;
-    @Autowired
-    SecurityRepository securityRepository;
-    @Autowired
-    BrokerRepository brokerRepository;
-    @Autowired
-    ShareholderRepository shareholderRepository;
-    private Security security;
-    private Shareholder shareholder;
-    private Broker broker1;
-    private Broker broker2;
-
-    private List<StopLimitOrder> stopLimitOrders;
-    private List<Order> orders;
-    OrderRejectedEvent captureOrderRejectedEvent() {
-        ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(OrderRejectedEvent.class);
-        verify(eventPublisher).publish(orderRejectedCaptor.capture());
-        OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
-
-        return outputEvent;
-    }
-
-    @BeforeEach
-    void setup() {
-        securityRepository.clear();
-        brokerRepository.clear();
-        shareholderRepository.clear();
-
-        security = Security.builder().lastTradePrice(550).isin("ABC").build();
-        securityRepository.addSecurity(security);
-
-        shareholder = Shareholder.builder().shareholderId(1).build();
-        shareholder.incPosition(security, 0);
-        shareholderRepository.addShareholder(shareholder);
-
-        broker1 = Broker.builder().brokerId(1).credit(0).build();
-        broker2 = Broker.builder().brokerId(2).credit(32500).build();
-        brokerRepository.addBroker(broker1);
-        brokerRepository.addBroker(broker2);
-    }
-
-    @Test
-    void new_order_invalid_fields() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC", -1, null, null, -1, -1, 1, 1, -1, -1));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.INVALID_ORDER_ID,
-                Message.ORDER_QUANTITY_NOT_POSITIVE,
-                Message.ORDER_PRICE_NOT_POSITIVE,
-                Message.INVALID_PEAK_SIZE,
-                Message.INVALID_MINIMUM_EXECUTION_QUANTITY,
-                Message.SIDE_CAN_NOT_BE_NULL
-        );
-    }
-
-    @Test
-    void new_order_invalid_repos() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "-1", 1, null, Side.BUY, 1, 1, -1, -1, 0, 1));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.UNKNOWN_SECURITY_ISIN,
-                Message.UNKNOWN_BROKER_ID,
-                Message.UNKNOWN_SHAREHOLDER_ID
-        );
-    }
-
-    @Test
-    void new_order_invalid_quantity_and_price_due_to_lot_and_tick_size() {
-        Security security2 = Security.builder().isin("ABC2").lotSize(3).tickSize(3).build();
-        securityRepository.addSecurity(security2);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC2", 1, null, Side.BUY, 4, 4, 1, 1, 0, 1));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE,
-                Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE
-        );
-    }
-
-    @Test
-    void update_order_id_not_found() {
-        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
-        broker1.increaseCreditBy(100 * 100);
-        security.getOrderBook().enqueue(inQueueOrder);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 2, null, Side.BUY, 1, 1, 1, 1, 0, 0));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.ORDER_ID_NOT_FOUND
-        );
-    }
-    
-    @Test
-    void update_order_invalid_peaksize() {
-        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
-        broker1.increaseCreditBy(100 * 100);
-        security.getOrderBook().enqueue(inQueueOrder);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 1, 0));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.INVALID_PEAK_SIZE
-        );
-    }
-    
-    @Test
-    void update_iceberg_order_invalid_peaksize() {
-        Order inQueueOrder = new IcebergOrder(1, security, Side.BUY, 100, 100, broker1, shareholder, 10);
-        broker1.increaseCreditBy(100 * 100);
-        security.getOrderBook().enqueue(inQueueOrder);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 0));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER
-        );
-    }
-    
-    @Test
-    void update_iceberg_order_invalid_min_exec() {
-        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
-        broker1.increaseCreditBy(100 * 100);
-        security.getOrderBook().enqueue(inQueueOrder);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 1));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY
-        );
-    }
-    
-    @Test
-    void delete_order_invalid_order_id() {
-        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
-        broker1.increaseCreditBy(100 * 100);
-        security.getOrderBook().enqueue(inQueueOrder);
-
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, -1));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.INVALID_ORDER_ID
-        );
-    }
-    
-    @Test
-    void delete_order_invalid_fields() {
-        Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
-        broker1.increaseCreditBy(100 * 100);
-        security.getOrderBook().enqueue(inQueueOrder);
-
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "-1", null, -1));
-        OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
-        
-        assertThat(outputEvent.getErrors()).containsOnly(
-                Message.INVALID_ORDER_ID,
-                Message.SIDE_CAN_NOT_BE_NULL,
-                Message.UNKNOWN_SECURITY_ISIN
-        );
-    }
-
-    @Test
-    void new_sell_order_without_enough_positions_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 10, 10, broker1, shareholder)  
-        );
-        broker1.increaseCreditBy(100);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.incPosition(security, 9);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 10, 5, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
-    }
-
-    @Test
-    void update_sell_order_without_enough_positions_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 10, 15, broker1, shareholder),
-                new Order(7, security, Side.SELL, 10, 16, broker2, shareholder)
-        );
-        broker1.increaseCreditBy(150);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.incPosition(security, 9);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 7, LocalDateTime.now(), Side.SELL, 10, 12, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 7, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
-    }
-
-    @Test
-    void new_buy_order_without_enough_credit_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.SELL, 10, 10, broker2, shareholder)  
-        );
-        shareholder.incPosition(security, 11);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        
-        broker1.increaseCreditBy(250 - 1);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 20, 15, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
-    }
-
-    @Test
-    void update_buy_order_without_enough_credit_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 20, 15, broker1, shareholder),
-                new Order(7, security, Side.SELL, 10, 20, broker2, shareholder)
-        );
-        broker1.increaseCreditBy(400);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.incPosition(security, 10);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 1, LocalDateTime.now(), Side.BUY, 20, 21, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 1, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
-    }
-
-    @Test
-    void new_buy_order_without_enough_minimum_execution_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.SELL, 10, 10, broker2, shareholder)  
-        );
-        shareholder.incPosition(security, 11);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        
-        broker1.increaseCreditBy(300);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 20, 15, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 11));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
-    }
-
-    @Test
-    void new_sell_order_without_enough_minimum_execution_is_rejected() {
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 10, 10, broker2, shareholder)  
-        );
-        broker2.increaseCreditBy(100);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        
-        shareholder.incPosition(security, 20);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 20, 15, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 11));
-
-        verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
-    }
-
-
-    @Test
-    void new_order_matched_completely_with_one_trade() {
-        Order matchingBuyOrder = new Order(100, security, Side.BUY, 1000, 15500, broker1, shareholder);
-        Order incomingSellOrder = new Order(200, security, Side.SELL, 300, 15450, broker2, shareholder);
-        broker1.increaseCreditBy(15_500_000);
-        shareholder.incPosition(security, 300);
-        security.getOrderBook().enqueue(matchingBuyOrder);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 2, shareholder.getShareholderId(), 0, 50));
-
-        Trade trade = new Trade(security, matchingBuyOrder.getPrice(), incomingSellOrder.getQuantity(),
-                matchingBuyOrder, incomingSellOrder);
-        verify(eventPublisher).publish((new OrderAcceptedEvent(1, 200)));
-        verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
-    }
-
-    @Test
-    void new_order_queued_with_no_trade() {
-        shareholder.incPosition(security, 300);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 2, shareholder.getShareholderId(), 0, 0));
-        verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
-    }
-
-    @Test
-    void new_order_matched_partially_with_two_trades() {
-        Order matchingBuyOrder1 = new Order(100, security, Side.BUY, 300, 15500, broker1, shareholder);
-        Order matchingBuyOrder2 = new Order(110, security, Side.BUY, 300, 15500, broker1, shareholder);
-        Order incomingSellOrder = new Order(200, security, Side.SELL, 1000, 15450, broker2, shareholder);
-        shareholder.incPosition(security, 1000);
-        broker1.increaseCreditBy(9_300_000);
-        security.getOrderBook().enqueue(matchingBuyOrder1);
-        security.getOrderBook().enqueue(matchingBuyOrder2);
-
-        Trade trade1 = new Trade(security, matchingBuyOrder1.getPrice(), matchingBuyOrder1.getQuantity(),
-                matchingBuyOrder1, incomingSellOrder);
-        Trade trade2 = new Trade(security, matchingBuyOrder2.getPrice(), matchingBuyOrder2.getQuantity(),
-                matchingBuyOrder2, incomingSellOrder.snapshotWithQuantity(700));
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1,
-                incomingSellOrder.getSecurity().getIsin(),
-                incomingSellOrder.getOrderId(),
-                incomingSellOrder.getEntryTime(),
-                incomingSellOrder.getSide(),
-                incomingSellOrder.getTotalQuantity(),
-                incomingSellOrder.getPrice(),
-                incomingSellOrder.getBroker().getBrokerId(),
-                incomingSellOrder.getShareholder().getShareholderId(), 0, 600));
-
-        verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
-        verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade1), new TradeDTO(trade2))));
-    }
-
-    @Test
-    void iceberg_order_behaves_normally_before_being_queued() {
-        Order matchingBuyOrder = new Order(100, security, Side.BUY, 1000, 15500, broker1, shareholder);
-        Order incomingSellOrder = new IcebergOrder(200, security, Side.SELL, 300, 15450, broker2, shareholder, 100);
-        shareholder.incPosition(security, 300);
-        broker1.increaseCreditBy(15_500_000);
-        security.getOrderBook().enqueue(matchingBuyOrder);
-        Trade trade = new Trade(security, matchingBuyOrder.getPrice(), incomingSellOrder.getQuantity(),
-                matchingBuyOrder, incomingSellOrder);
-
-        EventPublisher mockEventPublisher = mock(EventPublisher.class, withSettings().verboseLogging());
-        OrderHandler myOrderHandler = new OrderHandler(securityRepository, brokerRepository, shareholderRepository, mockEventPublisher, new Matcher());
-        myOrderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1,
-                incomingSellOrder.getSecurity().getIsin(),
-                incomingSellOrder.getOrderId(),
-                incomingSellOrder.getEntryTime(),
-                incomingSellOrder.getSide(),
-                incomingSellOrder.getTotalQuantity(),
-                incomingSellOrder.getPrice(),
-                incomingSellOrder.getBroker().getBrokerId(),
-                incomingSellOrder.getShareholder().getShareholderId(), 100, 150));
-
-        verify(mockEventPublisher).publish(new OrderAcceptedEvent(1, 200));
-        verify(mockEventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
-    }
-
-    @Test
-    void update_order_causing_no_trades() {
-        Order queuedOrder = new Order(200, security, Side.SELL, 500, 15450, broker1, shareholder);
-        shareholder.incPosition(security, 1000);
-        security.getOrderBook().enqueue(queuedOrder);
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, 1, shareholder.getShareholderId(), 0, 0));
-        verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
-    }
-
-    @Test
-    void handle_valid_update_with_trades() {
-        Order matchingOrder = new Order(1, security, Side.BUY, 500, 15450, broker1, shareholder);
-        Order beforeUpdate = new Order(200, security, Side.SELL, 1000, 15455, broker2, shareholder);
-        Order afterUpdate = new Order(200, security, Side.SELL, 500, 15450, broker2, shareholder);
-        shareholder.incPosition(security, 1000);
-        broker1.increaseCreditBy(7_725_000);
-        security.getOrderBook().enqueue(matchingOrder);
-        security.getOrderBook().enqueue(beforeUpdate);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 1000, 15450, broker2.getBrokerId(), shareholder.getShareholderId(), 0, 0));
-
-        Trade trade = new Trade(security, 15450, 500, matchingOrder, afterUpdate);
-        verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
-        verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
-    }
-
-
-    @Test
-    void update_sell_order_with_enough_positions_is_executed() {
-        Shareholder shareholder1 = Shareholder.builder().build();
-        shareholder1.incPosition(security, 100_000);
-        shareholderRepository.addShareholder(shareholder1);
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
-                new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
-                new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
-                new Order(6, security, Side.SELL, 350, 250, 580, broker1, shareholder),
-                new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-        );
-        broker1.increaseCreditBy(100_652_305);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.incPosition(security, 350);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(1, "ABC", 6, LocalDateTime.now(), Side.SELL, 250, 570, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 250));
-
-        verify(eventPublisher).publish(any(OrderExecutedEvent.class));
-        assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000 + 250)).isTrue();
-        assertThat(shareholder.hasEnoughPositionsOn(security, 101)).isFalse();
-    }
-
-    @Test
-    void new_buy_order_does_not_check_for_position() {
-        shareholder.incPosition(security, 100_000);
-        Shareholder shareholder1 = Shareholder.builder().build();
-        shareholder1.incPosition(security, 100_000);
-        shareholderRepository.addShareholder(shareholder1);
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
-                new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
-                new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
-                new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-                new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-        );
-        broker1.increaseCreditBy(100_652_305);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.decPosition(security, 99_500);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.BUY, 500, 570, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0));
-
-        verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
-        assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000)).isTrue();
-        assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
-    }
-
-    @Test
-    void update_buy_order_does_not_check_for_position() {
-        shareholder.incPosition(security, 100_000);
-        Shareholder shareholder1 = Shareholder.builder().build();
-        shareholder1.incPosition(security, 100_000);
-        shareholderRepository.addShareholder(shareholder1);
-        List<Order> orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
-                new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
-                new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
-                new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
-                new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
-        );
-        broker1.increaseCreditBy(100_652_305);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        shareholder.decPosition(security, 99_500);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, "ABC", 3, LocalDateTime.now(), Side.BUY, 500, 545, broker1.getBrokerId(), shareholder1.getShareholderId(), 0, 0));
-
-        verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
-        assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000)).isTrue();
-        assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
-    }
-
-
-    @Test
-    void delete_orders() {
-        List<Order> orders = Arrays.asList(
-                    new Order(1, security, Side.BUY, 10, 15, broker1, shareholder),
-                    new Order(2, security, Side.SELL, 10, 16, broker2, shareholder)
-        );
-        broker1.increaseCreditBy(150);
-        shareholder.incPosition(security, 10);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
-
-        verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
-        verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
-    }
-
-
-    /////////////////// ** SLO Tests ** ///////////////////
-
-    @Test
-    void invalid_stop_limit_price() {
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(2, security.getIsin(), 3, LocalDateTime.now(), Side.BUY, 500, 250, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, -100));
-        verify(eventPublisher).publish(new OrderRejectedEvent(2, 3, List.of(Message.INVALID_STOP_PRICE)));
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(2, security.getIsin(), 3, LocalDateTime.now(), Side.BUY, 500, 250, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 10, 100));
-        verify(eventPublisher).publish(new OrderRejectedEvent(2, 3, List.of(Message.STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY)));
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(2, security.getIsin(), 3, LocalDateTime.now(), Side.BUY, 500, 250, broker1.getBrokerId(), shareholder.getShareholderId(), 10, 0, 100));
-        verify(eventPublisher).publish(new OrderRejectedEvent(2, 3, List.of(Message.STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG)));
-    }
-
-    @Test
-    void invalid_update_stop_limit_price() {
-        broker1.increaseCreditBy(300);
-
-        StopLimitOrder slo = new StopLimitOrder(20, security, Side.BUY, 10, 15, broker1, shareholder, 100);
-        security.getOrderBook().enqueueStopLimitOrder(slo);
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(2, security.getIsin(), 20, LocalDateTime.now(), Side.BUY, 11, 16, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 0));
-        verify(eventPublisher).publish(new OrderRejectedEvent(2, 20, List.of(Message.INVALID_STOP_LIMIT_UPDATE_PRICE)));
-
-        Order order = new Order(21, security, Side.BUY, 10, 15, broker1, shareholder);
-        security.getOrderBook().enqueue(order);
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 21, LocalDateTime.now(), Side.BUY, 11, 16, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 100));
-        verify(eventPublisher).publish(new OrderRejectedEvent(3, 21, List.of(Message.INVALID_STOP_LIMIT_UPDATE_PRICE)));
-    }
-
-    @Test void delete_stop_limit_orders() {
-        List<StopLimitOrder> orders = Arrays.asList(
-                new StopLimitOrder(1, security, Side.BUY, 10, 15, broker1, shareholder, 100),
-                new StopLimitOrder(2, security, Side.SELL, 10, 16, broker2, shareholder, 100)
-        );
-        broker1.increaseCreditBy(150);
-        shareholder.incPosition(security, 10);
-        orders.forEach(order -> security.getOrderBook().enqueueStopLimitOrder(order));
-
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
-        orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
-
-        verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
-        verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
-    }
-
-
-    void setLastTradePriceByTrade(int price) {
-        security.getOrderBook().enqueue(new Order(1000, security, Side.SELL, 1, price, broker1, shareholder));
-        broker1.increaseCreditBy(price);
-        shareholder.incPosition(security, 1);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1000, security.getIsin(), 2000, LocalDateTime.now(), Side.BUY, 1, price, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 0));
-    }
-
-    void create_stop_limit_scenario() {
-        shareholder.incPosition(security, 85);
-        this.stopLimitOrders = Arrays.asList(
-                new StopLimitOrder(6, security, Side.SELL, 15, 400, broker1, shareholder, 500),
-                new StopLimitOrder(7, security, Side.SELL, 15, 300, broker1, shareholder, 400),
-                new StopLimitOrder(8, security, Side.SELL, 15, 200, broker1, shareholder, 300),
-                new StopLimitOrder(6, security, Side.BUY,  15, 700, broker2, shareholder, 600),
-                new StopLimitOrder(7, security, Side.BUY,  15, 800, broker2, shareholder, 700),
-                new StopLimitOrder(8, security, Side.BUY,  15, 900, broker2, shareholder, 800)
-        );
-        shareholder.incPosition(security, 45);
-        broker2.increaseCreditBy(36000);
-
-        stopLimitOrders.forEach(order -> security.getOrderBook().enqueueStopLimitOrder(order));
-        this.orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 10, 100, broker2, shareholder),
-                new Order(2, security, Side.BUY, 10, 200, broker2, shareholder),
-                new Order(3, security, Side.BUY, 10, 300, broker2, shareholder),
-                new Order(4, security, Side.BUY, 10, 400, broker2, shareholder),
-                new IcebergOrder(5, security, Side.BUY, 45, 500, broker2, shareholder, 10),
-                new Order(1, security, Side.SELL, 10, 600, broker1, shareholder),
-                new Order(2, security, Side.SELL, 10, 700, broker1, shareholder),
-                new Order(3, security, Side.SELL, 10, 800, broker1, shareholder),
-                new Order(4, security, Side.SELL, 10, 900, broker1, shareholder),
-                new IcebergOrder(5, security, Side.SELL, 45, 1000, broker1, shareholder, 10)
-        );
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-    }
-
-    @Test
-    void new_sell_order_activate_all_sell_stop_limit_orders() {
-        create_stop_limit_scenario();
-        shareholder.incPosition(security, 45);
-
-        Trade firstTrade = new Trade(security, 400, 10, stopLimitOrders.get(0), orders.get(3));
-        Trade secondTrade = new Trade(security, 300, 10, stopLimitOrders.get(1), orders.get(2));
-        Trade thirdTrade = new Trade(security, 200, 10, stopLimitOrders.get(2), orders.get(1));
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, security.getIsin(), 9, LocalDateTime.now(), Side.SELL, 45, 500, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 0));
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(6));
-        verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(firstTrade))));
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(7));
-        verify(eventPublisher).publish(new OrderExecutedEvent(7, List.of(new TradeDTO(secondTrade))));
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(8));
-        verify(eventPublisher).publish(new OrderExecutedEvent(8, List.of(new TradeDTO(thirdTrade))));
-    }
-    @Test
-    void new_buy_order_activate_all_buy_stop_limit_orders() {
-        create_stop_limit_scenario();
-
-        broker2.increaseCreditBy(6000);
-
-        Trade firstTrade = new Trade(security, 700, 10, stopLimitOrders.get(3), orders.get(6));
-        Trade secondTrade = new Trade(security, 800, 10, stopLimitOrders.get(4), orders.get(7));
-        Trade thirdTrade = new Trade(security, 900, 10, stopLimitOrders.get(5), orders.get(8));
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(1, security.getIsin(), 9, LocalDateTime.now(), Side.BUY, 10, 600, broker2.getBrokerId(), shareholder.getShareholderId(), 0, 0, 0));
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(6));
-        verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(firstTrade))));
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(7));
-        verify(eventPublisher).publish(new OrderExecutedEvent(7, List.of(new TradeDTO(secondTrade))));
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(8));
-        verify(eventPublisher).publish(new OrderExecutedEvent(8, List.of(new TradeDTO(thirdTrade))));
-
-
-    }
-    @Test
-    void executed_order_activate_multiple_stop_limit_orders() {
-        broker1.increaseCreditBy(100_000);
-        List<StopLimitOrder> orders = Arrays.asList(
-                new StopLimitOrder(1, security, Side.BUY, 10, 550, broker1, shareholder, 500),
-                new StopLimitOrder(2, security, Side.BUY, 10, 600, broker1, shareholder, 300)
-        );
-        orders.forEach(order -> security.getOrderBook().enqueueStopLimitOrder(order));
-        setLastTradePriceByTrade(800);
-
-        verify(eventPublisher).publish(new OrderActivatedEvent(1));
-        verify(eventPublisher).publish(new OrderActivatedEvent(2));
-    }
-
-    @Test
-    void stop_limit_order_seller_has_not_enough_positions() {
-        EnterOrderRq orderRq = EnterOrderRq.createNewOrderRq(1, security.getIsin(), 3, LocalDateTime.now(), Side.SELL, 500, 250, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 200);
-        shareholder.incPosition(security, 500 - 1);
-        orderHandler.handleEnterOrder(orderRq);
-        OrderRejectedEvent output = captureOrderRejectedEvent();
-        assertThat(output.getErrors()).containsOnly(
-                Message.SELLER_HAS_NOT_ENOUGH_POSITIONS
-        );
-
-        shareholder.incPosition(security, 1);
-        orderHandler.handleEnterOrder(orderRq);
-        verify(eventPublisher).publish(new OrderAcceptedEvent(1, 3));
-    }
-
-    @Test
-    void stop_limit_order_buyer_has_not_enough_credit() {
-        EnterOrderRq orderRq = EnterOrderRq.createNewOrderRq(1, security.getIsin(), 3, LocalDateTime.now(), Side.BUY, 500, 250, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 200);
-        broker1.increaseCreditBy(500 * 250 - 1);
-        orderHandler.handleEnterOrder(orderRq);
-        OrderRejectedEvent output = captureOrderRejectedEvent();
-        assertThat(output.getErrors()).containsOnly(
-                Message.BUYER_HAS_NOT_ENOUGH_CREDIT
-        );
-
-        broker1.increaseCreditBy(1);
-        orderHandler.handleEnterOrder(orderRq);
-        verify(eventPublisher).publish(new OrderAcceptedEvent(1, 3));
-    }
-
-    @Test
-    void increase_stop_limit_order_quantity_not_enough_position() {
-        shareholder.incPosition(security, 10);
-        StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 10, 400, broker1, shareholder, 500);
-        security.getOrderBook().enqueueStopLimitOrder(order);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.SELL, 15, 400, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 500));
-        verify(eventPublisher).publish(new OrderRejectedEvent(3, 6, List.of(
-                Message.SELLER_HAS_NOT_ENOUGH_POSITIONS
-        )));
-    }
-
-    @Test
-    void increase_quantity_stop_limit_order_quantity_not_enough_credit() {
-        broker1.increaseCreditBy(4000);
-        StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
-        security.getOrderBook().enqueueStopLimitOrder(order);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 15, 400, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 500));
-        verify(eventPublisher).publish(new OrderRejectedEvent(3, 6, List.of(
-                Message.BUYER_HAS_NOT_ENOUGH_CREDIT
-        )));
-    }
-
-    @Test
-    void increase_price_stop_limit_order_quantity_not_enough_credit() {
-        broker1.increaseCreditBy(4000);
-        StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
-        security.getOrderBook().enqueueStopLimitOrder(order);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 10, 401, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 500));
-        verify(eventPublisher).publish(new OrderRejectedEvent(3, 6, List.of(
-                Message.BUYER_HAS_NOT_ENOUGH_CREDIT
-        )));
-    }
-
-    @Test
-    void update_stop_limit_order_no_activation() {
-        setLastTradePriceByTrade(400);
-        broker1.increaseCreditBy(4010);
-        StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
-        security.getOrderBook().enqueueStopLimitOrder(order);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 10, 401, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 450));
-        verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
-        verify(eventPublisher, never()).publish(any(OrderActivatedEvent.class));
-    }
-
-    @Test
-    void update_stop_limit_order_and_activate_no_execute() {
-        setLastTradePriceByTrade(500);
-        broker1.increaseCreditBy(4010);
-        StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 550);
-        security.getOrderBook().enqueueStopLimitOrder(order);
-
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 10, 401, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 400));
-        verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
-        verify(eventPublisher).publish(new OrderActivatedEvent(6));
-    }
-
-    @Test
-    void update_stop_limit_order_and_activate_and_execute() {
-        shareholder.incPosition(security, 1);
-        Order order = new Order(1, security, Side.SELL, 1, 600, broker2, shareholder);
-        security.getOrderBook().enqueue(order);
-
-        broker1.increaseCreditBy(600);
-        StopLimitOrder stopLimitOrder = new StopLimitOrder(6, security, Side.BUY, 1, 600, broker1, shareholder, 700);
-        security.getOrderBook().enqueueStopLimitOrder(stopLimitOrder);
-
-        Trade trade = new Trade(security, 600, 1, order, stopLimitOrder);
-        orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 1, 600, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 400));
-        verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
-        verify(eventPublisher).publish(new OrderActivatedEvent(6));
-        verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(trade))));
-
-    }
-
-    @Test
-    void new_stop_limit_order_with_submitted_stop_price_no_trade() {
-        broker1.increaseCreditBy(600);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 1, 600, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 400));
-        verify(eventPublisher).publish(new OrderAcceptedEvent(3, 6));
-        verify(eventPublisher).publish(new OrderActivatedEvent(6));
-    }
-
-    @Test
-    void new_stop_limit_order_with_submitted_stop_price_with_trade() {
-        shareholder.incPosition(security, 1);
-        Order order = new Order(1, security, Side.SELL, 1, 600, broker2, shareholder);
-        security.getOrderBook().enqueue(order);
-
-        broker1.increaseCreditBy(600);
-        StopLimitOrder stopLimitOrder = new StopLimitOrder(6, security, Side.BUY, 1, 600, broker1, shareholder, 700);
-        security.getOrderBook().enqueueStopLimitOrder(stopLimitOrder);
-
-        Trade trade = new Trade(security, 600, 1, order, stopLimitOrder);
-        broker1.increaseCreditBy(600);
-        orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(3, security.getIsin(), 6, LocalDateTime.now(), Side.BUY, 1, 600, broker1.getBrokerId(), shareholder.getShareholderId(), 0, 0, 400));
-        verify(eventPublisher).publish(new OrderAcceptedEvent(3, 6));
-        verify(eventPublisher).publish(new OrderActivatedEvent(6));
-    }
-
-}
\ No newline at end of file
+
+	@Autowired
+	OrderHandler orderHandler;
+
+	@Autowired
+	EventPublisher eventPublisher;
+
+	@Autowired
+	SecurityRepository securityRepository;
+
+	@Autowired
+	BrokerRepository brokerRepository;
+
+	@Autowired
+	ShareholderRepository shareholderRepository;
+
+	private Security security;
+	private Shareholder shareholder;
+	private Broker broker1;
+	private Broker broker2;
+
+	private List<StopLimitOrder> stopLimitOrders;
+	private List<Order> orders;
+
+	OrderRejectedEvent captureOrderRejectedEvent() {
+		ArgumentCaptor<OrderRejectedEvent> orderRejectedCaptor = ArgumentCaptor.forClass(OrderRejectedEvent.class);
+		verify(eventPublisher).publish(orderRejectedCaptor.capture());
+		OrderRejectedEvent outputEvent = orderRejectedCaptor.getValue();
+
+		return outputEvent;
+	}
+
+	@BeforeEach
+	void setup() {
+		securityRepository.clear();
+		brokerRepository.clear();
+		shareholderRepository.clear();
+
+		security = Security.builder().lastTradePrice(550).isin("ABC").build();
+		securityRepository.addSecurity(security);
+
+		shareholder = Shareholder.builder().shareholderId(1).build();
+		shareholder.incPosition(security, 0);
+		shareholderRepository.addShareholder(shareholder);
+
+		broker1 = Broker.builder().brokerId(1).credit(0).build();
+		broker2 = Broker.builder().brokerId(2).credit(32500).build();
+		brokerRepository.addBroker(broker1);
+		brokerRepository.addBroker(broker2);
+	}
+
+	@Test
+	void new_order_invalid_fields() {
+		orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC", -1, null, null, -1, -1, 1, 1, -1, -1));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors())
+			.containsOnly(
+				Message.INVALID_ORDER_ID,
+				Message.ORDER_QUANTITY_NOT_POSITIVE,
+				Message.ORDER_PRICE_NOT_POSITIVE,
+				Message.INVALID_PEAK_SIZE,
+				Message.INVALID_MINIMUM_EXECUTION_QUANTITY,
+				Message.SIDE_CAN_NOT_BE_NULL
+			);
+	}
+
+	@Test
+	void new_order_invalid_repos() {
+		orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "-1", 1, null, Side.BUY, 1, 1, -1, -1, 0, 1));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors())
+			.containsOnly(Message.UNKNOWN_SECURITY_ISIN, Message.UNKNOWN_BROKER_ID, Message.UNKNOWN_SHAREHOLDER_ID);
+	}
+
+	@Test
+	void new_order_invalid_quantity_and_price_due_to_lot_and_tick_size() {
+		Security security2 = Security.builder().isin("ABC2").lotSize(3).tickSize(3).build();
+		securityRepository.addSecurity(security2);
+		orderHandler.handleEnterOrder(EnterOrderRq.createNewOrderRq(0, "ABC2", 1, null, Side.BUY, 4, 4, 1, 1, 0, 1));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors())
+			.containsOnly(Message.QUANTITY_NOT_MULTIPLE_OF_LOT_SIZE, Message.PRICE_NOT_MULTIPLE_OF_TICK_SIZE);
+	}
+
+	@Test
+	void update_order_id_not_found() {
+		Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+		broker1.increaseCreditBy(100 * 100);
+		security.getOrderBook().enqueue(inQueueOrder);
+
+		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 2, null, Side.BUY, 1, 1, 1, 1, 0, 0));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors()).containsOnly(Message.ORDER_ID_NOT_FOUND);
+	}
+
+	@Test
+	void update_order_invalid_peak_size() {
+		Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+		broker1.increaseCreditBy(100 * 100);
+		security.getOrderBook().enqueue(inQueueOrder);
+
+		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 1, 0));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors()).containsOnly(Message.INVALID_PEAK_SIZE);
+	}
+
+	@Test
+	void update_iceberg_order_invalid_peak_size() {
+		Order inQueueOrder = new IcebergOrder(1, security, Side.BUY, 100, 100, broker1, shareholder, 10);
+		broker1.increaseCreditBy(100 * 100);
+		security.getOrderBook().enqueue(inQueueOrder);
+
+		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 0));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors()).containsOnly(Message.CANNOT_SPECIFY_0_PEAK_SIZE_FOR_A_ICEBERG_ORDER);
+	}
+
+	@Test
+	void update_iceberg_order_invalid_min_exec() {
+		Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+		broker1.increaseCreditBy(100 * 100);
+		security.getOrderBook().enqueue(inQueueOrder);
+
+		orderHandler.handleEnterOrder(EnterOrderRq.createUpdateOrderRq(0, "ABC", 1, null, Side.BUY, 5, 1, 1, 1, 0, 1));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors()).containsOnly(Message.CANNOT_UPDATE_MINIMUM_EXECUTION_QUANTITY);
+	}
+
+	@Test
+	void delete_order_invalid_order_id() {
+		Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+		broker1.increaseCreditBy(100 * 100);
+		security.getOrderBook().enqueue(inQueueOrder);
+
+		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, -1));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors()).containsOnly(Message.INVALID_ORDER_ID);
+	}
+
+	@Test
+	void delete_order_invalid_fields() {
+		Order inQueueOrder = new Order(1, security, Side.BUY, 100, 100, broker1, shareholder);
+		broker1.increaseCreditBy(100 * 100);
+		security.getOrderBook().enqueue(inQueueOrder);
+
+		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "-1", null, -1));
+		OrderRejectedEvent outputEvent = this.captureOrderRejectedEvent();
+
+		assertThat(outputEvent.getErrors())
+			.containsOnly(Message.INVALID_ORDER_ID, Message.SIDE_CAN_NOT_BE_NULL, Message.UNKNOWN_SECURITY_ISIN);
+	}
+
+	@Test
+	void new_sell_order_without_enough_positions_is_rejected() {
+		List<Order> orders = Arrays.asList(new Order(1, security, Side.BUY, 10, 10, broker1, shareholder));
+		broker1.increaseCreditBy(100);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		shareholder.incPosition(security, 9);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.SELL,
+				10,
+				5,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(1, 200, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
+	}
+
+	@Test
+	void update_sell_order_without_enough_positions_is_rejected() {
+		List<Order> orders = Arrays.asList(
+			new Order(1, security, Side.BUY, 10, 15, broker1, shareholder),
+			new Order(7, security, Side.SELL, 10, 16, broker2, shareholder)
+		);
+		broker1.increaseCreditBy(150);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		shareholder.incPosition(security, 9);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				"ABC",
+				7,
+				LocalDateTime.now(),
+				Side.SELL,
+				10,
+				12,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderRejectedEvent(1, 7, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
+	}
+
+	@Test
+	void new_buy_order_without_enough_credit_is_rejected() {
+		List<Order> orders = Arrays.asList(new Order(1, security, Side.SELL, 10, 10, broker2, shareholder));
+		shareholder.incPosition(security, 11);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+
+		broker1.increaseCreditBy(250 - 1);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.BUY,
+				20,
+				15,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderRejectedEvent(1, 200, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
+	}
+
+	@Test
+	void update_buy_order_without_enough_credit_is_rejected() {
+		List<Order> orders = Arrays.asList(
+			new Order(1, security, Side.BUY, 20, 15, broker1, shareholder),
+			new Order(7, security, Side.SELL, 10, 20, broker2, shareholder)
+		);
+		broker1.increaseCreditBy(400);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		shareholder.incPosition(security, 10);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				"ABC",
+				1,
+				LocalDateTime.now(),
+				Side.BUY,
+				20,
+				21,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderRejectedEvent(1, 1, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
+	}
+
+	@Test
+	void new_buy_order_without_enough_minimum_execution_is_rejected() {
+		List<Order> orders = Arrays.asList(new Order(1, security, Side.SELL, 10, 10, broker2, shareholder));
+		shareholder.incPosition(security, 11);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+
+		broker1.increaseCreditBy(300);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.BUY,
+				20,
+				15,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				11
+			)
+		);
+
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(1, 200, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
+	}
+
+	@Test
+	void new_sell_order_without_enough_minimum_execution_is_rejected() {
+		List<Order> orders = Arrays.asList(new Order(1, security, Side.BUY, 10, 10, broker2, shareholder));
+		broker2.increaseCreditBy(100);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+
+		shareholder.incPosition(security, 20);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.SELL,
+				20,
+				15,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				11
+			)
+		);
+
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(1, 200, List.of(Message.MINIMUM_EXECUTION_QUANTITY_NOT_MET)));
+	}
+
+	@Test
+	void new_order_matched_completely_with_one_trade() {
+		Order matchingBuyOrder = new Order(100, security, Side.BUY, 1000, 15500, broker1, shareholder);
+		Order incomingSellOrder = new Order(200, security, Side.SELL, 300, 15450, broker2, shareholder);
+		broker1.increaseCreditBy(15_500_000);
+		shareholder.incPosition(security, 300);
+		security.getOrderBook().enqueue(matchingBuyOrder);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.SELL,
+				300,
+				15450,
+				2,
+				shareholder.getShareholderId(),
+				0,
+				50
+			)
+		);
+
+		Trade trade = new Trade(
+			security,
+			matchingBuyOrder.getPrice(),
+			incomingSellOrder.getQuantity(),
+			matchingBuyOrder,
+			incomingSellOrder
+		);
+		verify(eventPublisher).publish((new OrderAcceptedEvent(1, 200)));
+		verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
+	}
+
+	@Test
+	void new_order_queued_with_no_trade() {
+		shareholder.incPosition(security, 300);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.SELL,
+				300,
+				15450,
+				2,
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
+	}
+
+	@Test
+	void new_order_matched_partially_with_two_trades() {
+		Order matchingBuyOrder1 = new Order(100, security, Side.BUY, 300, 15500, broker1, shareholder);
+		Order matchingBuyOrder2 = new Order(110, security, Side.BUY, 300, 15500, broker1, shareholder);
+		Order incomingSellOrder = new Order(200, security, Side.SELL, 1000, 15450, broker2, shareholder);
+		shareholder.incPosition(security, 1000);
+		broker1.increaseCreditBy(9_300_000);
+		security.getOrderBook().enqueue(matchingBuyOrder1);
+		security.getOrderBook().enqueue(matchingBuyOrder2);
+
+		Trade trade1 = new Trade(
+			security,
+			matchingBuyOrder1.getPrice(),
+			matchingBuyOrder1.getQuantity(),
+			matchingBuyOrder1,
+			incomingSellOrder
+		);
+		Trade trade2 = new Trade(
+			security,
+			matchingBuyOrder2.getPrice(),
+			matchingBuyOrder2.getQuantity(),
+			matchingBuyOrder2,
+			incomingSellOrder.snapshotWithQuantity(700)
+		);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				incomingSellOrder.getSecurity().getIsin(),
+				incomingSellOrder.getOrderId(),
+				incomingSellOrder.getEntryTimes().getFirst(),
+				incomingSellOrder.getSide(),
+				incomingSellOrder.getTotalQuantity(),
+				incomingSellOrder.getPrice(),
+				incomingSellOrder.getBroker().getBrokerId(),
+				incomingSellOrder.getShareholder().getShareholderId(),
+				0,
+				600
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 200));
+		verify(eventPublisher)
+			.publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade1), new TradeDTO(trade2))));
+	}
+
+	@Test
+	void iceberg_order_behaves_normally_before_being_queued() {
+		Order matchingBuyOrder = new Order(100, security, Side.BUY, 1000, 15500, broker1, shareholder);
+		Order incomingSellOrder = new IcebergOrder(200, security, Side.SELL, 300, 15450, broker2, shareholder, 100);
+		shareholder.incPosition(security, 300);
+		broker1.increaseCreditBy(15_500_000);
+		security.getOrderBook().enqueue(matchingBuyOrder);
+		Trade trade = new Trade(
+			security,
+			matchingBuyOrder.getPrice(),
+			incomingSellOrder.getQuantity(),
+			matchingBuyOrder,
+			incomingSellOrder
+		);
+
+		EventPublisher mockEventPublisher = mock(EventPublisher.class, withSettings().verboseLogging());
+		OrderHandler myOrderHandler = new OrderHandler(
+			new ApplicationServices(securityRepository, brokerRepository, shareholderRepository, new Matcher()),
+			mockEventPublisher
+		);
+		myOrderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				incomingSellOrder.getSecurity().getIsin(),
+				incomingSellOrder.getOrderId(),
+				incomingSellOrder.getEntryTimes().getFirst(),
+				incomingSellOrder.getSide(),
+				incomingSellOrder.getTotalQuantity(),
+				incomingSellOrder.getPrice(),
+				incomingSellOrder.getBroker().getBrokerId(),
+				incomingSellOrder.getShareholder().getShareholderId(),
+				100,
+				150
+			)
+		);
+
+		verify(mockEventPublisher).publish(new OrderAcceptedEvent(1, 200));
+		verify(mockEventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
+	}
+
+	@Test
+	void update_order_causing_no_trades() {
+		Order queuedOrder = new Order(200, security, Side.SELL, 500, 15450, broker1, shareholder);
+		shareholder.incPosition(security, 1000);
+		security.getOrderBook().enqueue(queuedOrder);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.SELL,
+				1000,
+				15450,
+				1,
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+		verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
+	}
+
+	@Test
+	void handle_valid_update_with_trades() {
+		Order matchingOrder = new Order(1, security, Side.BUY, 500, 15450, broker1, shareholder);
+		Order beforeUpdate = new Order(200, security, Side.SELL, 1000, 15455, broker2, shareholder);
+		Order afterUpdate = new Order(200, security, Side.SELL, 500, 15450, broker2, shareholder);
+		shareholder.incPosition(security, 1000);
+		broker1.increaseCreditBy(7_725_000);
+		security.getOrderBook().enqueue(matchingOrder);
+		security.getOrderBook().enqueue(beforeUpdate);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.SELL,
+				1000,
+				15450,
+				broker2.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		Trade trade = new Trade(security, 15450, 500, matchingOrder, afterUpdate);
+		verify(eventPublisher).publish(new OrderUpdatedEvent(1, 200));
+		verify(eventPublisher).publish(new OrderExecutedEvent(1, 200, List.of(new TradeDTO(trade))));
+	}
+
+	@Test
+	void update_sell_order_with_enough_positions_is_executed() {
+		Shareholder shareholder1 = Shareholder.builder().build();
+		shareholder1.incPosition(security, 100_000);
+		shareholderRepository.addShareholder(shareholder1);
+		List<Order> orders = Arrays.asList(
+			new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
+			new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
+			new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
+			new Order(6, security, Side.SELL, 350, 250, 580, broker1, shareholder),
+			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
+		);
+		broker1.increaseCreditBy(100_652_305);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		shareholder.incPosition(security, 350);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				1,
+				"ABC",
+				6,
+				LocalDateTime.now(),
+				Side.SELL,
+				250,
+				570,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				250
+			)
+		);
+
+		verify(eventPublisher).publish(any(OrderExecutedEvent.class));
+		assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000 + 250)).isTrue();
+		assertThat(shareholder.hasEnoughPositionsOn(security, 101)).isFalse();
+	}
+
+	@Test
+	void new_buy_order_does_not_check_for_position() {
+		shareholder.incPosition(security, 100_000);
+		Shareholder shareholder1 = Shareholder.builder().build();
+		shareholder1.incPosition(security, 100_000);
+		shareholderRepository.addShareholder(shareholder1);
+		List<Order> orders = Arrays.asList(
+			new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
+			new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
+			new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
+			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
+			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
+		);
+		broker1.increaseCreditBy(100_652_305);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		shareholder.decPosition(security, 99_500);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				200,
+				LocalDateTime.now(),
+				Side.BUY,
+				500,
+				570,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
+		assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000)).isTrue();
+		assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
+	}
+
+	@Test
+	void update_buy_order_does_not_check_for_position() {
+		shareholder.incPosition(security, 100_000);
+		Shareholder shareholder1 = Shareholder.builder().build();
+		shareholder1.incPosition(security, 100_000);
+		shareholderRepository.addShareholder(shareholder1);
+		List<Order> orders = Arrays.asList(
+			new Order(1, security, Side.BUY, 304, 570, broker1, shareholder1),
+			new Order(2, security, Side.BUY, 430, 550, broker1, shareholder1),
+			new Order(3, security, Side.BUY, 445, 545, broker1, shareholder1),
+			new Order(6, security, Side.SELL, 350, 580, broker1, shareholder),
+			new Order(7, security, Side.SELL, 100, 581, broker2, shareholder)
+		);
+		broker1.increaseCreditBy(100_652_305);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		shareholder.decPosition(security, 99_500);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				"ABC",
+				3,
+				LocalDateTime.now(),
+				Side.BUY,
+				500,
+				545,
+				broker1.getBrokerId(),
+				shareholder1.getShareholderId(),
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(any(OrderAcceptedEvent.class));
+		assertThat(shareholder1.hasEnoughPositionsOn(security, 100_000)).isTrue();
+		assertThat(shareholder.hasEnoughPositionsOn(security, 500)).isTrue();
+	}
+
+	@Test
+	void delete_orders() {
+		List<Order> orders = Arrays.asList(
+			new Order(1, security, Side.BUY, 10, 15, broker1, shareholder),
+			new Order(2, security, Side.SELL, 10, 16, broker2, shareholder)
+		);
+		broker1.increaseCreditBy(150);
+		shareholder.incPosition(security, 10);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+
+		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
+		orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
+
+		verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
+		verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
+	}
+
+	/////////////////// ** SLO Tests ** ///////////////////
+
+	@Test
+	void invalid_stop_limit_price() {
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				2,
+				security.getIsin(),
+				3,
+				LocalDateTime.now(),
+				Side.BUY,
+				500,
+				250,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				-100
+			)
+		);
+		verify(eventPublisher).publish(new OrderRejectedEvent(2, 3, List.of(Message.INVALID_STOP_PRICE)));
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				2,
+				security.getIsin(),
+				3,
+				LocalDateTime.now(),
+				Side.BUY,
+				500,
+				250,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				10,
+				100
+			)
+		);
+		verify(eventPublisher)
+			.publish(
+				new OrderRejectedEvent(2, 3, List.of(Message.STOP_LIMIT_ORDERS_CAN_NOT_HAVE_MINIMUM_EXECUTION_QUANTITY))
+			);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				2,
+				security.getIsin(),
+				3,
+				LocalDateTime.now(),
+				Side.BUY,
+				500,
+				250,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				10,
+				0,
+				100
+			)
+		);
+		verify(eventPublisher)
+			.publish(new OrderRejectedEvent(2, 3, List.of(Message.STOP_LIMIT_ORDERS_CAN_NOT_BE_ICEBERG)));
+	}
+
+	@Test
+	void invalid_update_stop_limit_price() {
+		broker1.increaseCreditBy(300);
+
+		StopLimitOrder slo = new StopLimitOrder(20, security, Side.BUY, 10, 15, broker1, shareholder, 100);
+		security.getOrderBook().enqueue(slo);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				2,
+				security.getIsin(),
+				20,
+				LocalDateTime.now(),
+				Side.BUY,
+				11,
+				16,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				0
+			)
+		);
+		verify(eventPublisher).publish(new OrderRejectedEvent(2, 20, List.of(Message.INVALID_STOP_LIMIT_UPDATE_PRICE)));
+
+		Order order = new Order(21, security, Side.BUY, 10, 15, broker1, shareholder);
+		security.getOrderBook().enqueue(order);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				21,
+				LocalDateTime.now(),
+				Side.BUY,
+				11,
+				16,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				100
+			)
+		);
+		verify(eventPublisher).publish(new OrderRejectedEvent(3, 21, List.of(Message.INVALID_STOP_LIMIT_UPDATE_PRICE)));
+	}
+
+	@Test
+	void delete_stop_limit_orders() {
+		List<StopLimitOrder> orders = Arrays.asList(
+			new StopLimitOrder(1, security, Side.BUY, 10, 15, broker1, shareholder, 100),
+			new StopLimitOrder(2, security, Side.SELL, 10, 16, broker2, shareholder, 100)
+		);
+		broker1.increaseCreditBy(150);
+		shareholder.incPosition(security, 10);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+
+		orderHandler.handleDeleteOrder(new DeleteOrderRq(1, "ABC", Side.BUY, 1));
+		orderHandler.handleDeleteOrder(new DeleteOrderRq(2, "ABC", Side.SELL, 2));
+
+		verify(eventPublisher).publish(new OrderDeletedEvent(1, 1));
+		verify(eventPublisher).publish(new OrderDeletedEvent(2, 2));
+	}
+
+	void setLastTradePriceByTrade(int price) {
+		security.getOrderBook().enqueue(new Order(1000, security, Side.SELL, 1, price, broker1, shareholder));
+		broker1.increaseCreditBy(price);
+		shareholder.incPosition(security, 1);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1000,
+				security.getIsin(),
+				2000,
+				LocalDateTime.now(),
+				Side.BUY,
+				1,
+				price,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				0
+			)
+		);
+	}
+
+	void create_stop_limit_scenario() {
+		shareholder.incPosition(security, 85);
+		this.stopLimitOrders =
+			Arrays.asList(
+				new StopLimitOrder(6, security, Side.SELL, 15, 400, broker1, shareholder, 500),
+				new StopLimitOrder(7, security, Side.SELL, 15, 300, broker1, shareholder, 400),
+				new StopLimitOrder(8, security, Side.SELL, 15, 200, broker1, shareholder, 300),
+				new StopLimitOrder(6, security, Side.BUY, 15, 700, broker2, shareholder, 600),
+				new StopLimitOrder(7, security, Side.BUY, 15, 800, broker2, shareholder, 700),
+				new StopLimitOrder(8, security, Side.BUY, 15, 900, broker2, shareholder, 800)
+			);
+		shareholder.incPosition(security, 45);
+		broker2.increaseCreditBy(36000);
+
+		stopLimitOrders.forEach(order -> security.getOrderBook().enqueue(order));
+		this.orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 10, 100, broker2, shareholder),
+				new Order(2, security, Side.BUY, 10, 200, broker2, shareholder),
+				new Order(3, security, Side.BUY, 10, 300, broker2, shareholder),
+				new Order(4, security, Side.BUY, 10, 400, broker2, shareholder),
+				new IcebergOrder(5, security, Side.BUY, 45, 500, broker2, shareholder, 10),
+				new Order(1, security, Side.SELL, 10, 600, broker1, shareholder),
+				new Order(2, security, Side.SELL, 10, 700, broker1, shareholder),
+				new Order(3, security, Side.SELL, 10, 800, broker1, shareholder),
+				new Order(4, security, Side.SELL, 10, 900, broker1, shareholder),
+				new IcebergOrder(5, security, Side.SELL, 45, 1000, broker1, shareholder, 10)
+			);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+	}
+
+	@Test
+	void new_sell_order_activate_all_sell_stop_limit_orders() {
+		create_stop_limit_scenario();
+		shareholder.incPosition(security, 45);
+
+		Trade firstTrade = new Trade(security, 400, 10, stopLimitOrders.get(0), orders.get(3));
+		Trade secondTrade = new Trade(security, 300, 10, stopLimitOrders.get(1), orders.get(2));
+		Trade thirdTrade = new Trade(security, 200, 10, stopLimitOrders.get(2), orders.get(1));
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				security.getIsin(),
+				9,
+				LocalDateTime.now(),
+				Side.SELL,
+				45,
+				500,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(6));
+		verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(firstTrade))));
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(7));
+		verify(eventPublisher).publish(new OrderExecutedEvent(7, List.of(new TradeDTO(secondTrade))));
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(8));
+		verify(eventPublisher).publish(new OrderExecutedEvent(8, List.of(new TradeDTO(thirdTrade))));
+	}
+
+	@Test
+	void new_buy_order_activate_all_buy_stop_limit_orders() {
+		create_stop_limit_scenario();
+
+		broker2.increaseCreditBy(6000);
+
+		Trade firstTrade = new Trade(security, 700, 10, stopLimitOrders.get(3), orders.get(6));
+		Trade secondTrade = new Trade(security, 800, 10, stopLimitOrders.get(4), orders.get(7));
+		Trade thirdTrade = new Trade(security, 900, 10, stopLimitOrders.get(5), orders.get(8));
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				1,
+				security.getIsin(),
+				9,
+				LocalDateTime.now(),
+				Side.BUY,
+				10,
+				600,
+				broker2.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				0
+			)
+		);
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(6));
+		verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(firstTrade))));
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(7));
+		verify(eventPublisher).publish(new OrderExecutedEvent(7, List.of(new TradeDTO(secondTrade))));
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(8));
+		verify(eventPublisher).publish(new OrderExecutedEvent(8, List.of(new TradeDTO(thirdTrade))));
+	}
+
+	@Test
+	void executed_order_activate_multiple_stop_limit_orders() {
+		broker1.increaseCreditBy(100_000);
+		List<StopLimitOrder> orders = Arrays.asList(
+			new StopLimitOrder(1, security, Side.BUY, 10, 550, broker1, shareholder, 500),
+			new StopLimitOrder(2, security, Side.BUY, 10, 600, broker1, shareholder, 300)
+		);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		setLastTradePriceByTrade(800);
+
+		verify(eventPublisher).publish(new OrderActivatedEvent(1));
+		verify(eventPublisher).publish(new OrderActivatedEvent(2));
+	}
+
+	@Test
+	void stop_limit_order_seller_has_not_enough_positions() {
+		EnterOrderRq orderRq = EnterOrderRq.createNewOrderRq(
+			1,
+			security.getIsin(),
+			3,
+			LocalDateTime.now(),
+			Side.SELL,
+			500,
+			250,
+			broker1.getBrokerId(),
+			shareholder.getShareholderId(),
+			0,
+			0,
+			200
+		);
+		shareholder.incPosition(security, 500 - 1);
+		orderHandler.handleEnterOrder(orderRq);
+		OrderRejectedEvent output = captureOrderRejectedEvent();
+		assertThat(output.getErrors()).containsOnly(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS);
+
+		shareholder.incPosition(security, 1);
+		orderHandler.handleEnterOrder(orderRq);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 3));
+	}
+
+	@Test
+	void stop_limit_order_buyer_has_not_enough_credit() {
+		EnterOrderRq orderRq = EnterOrderRq.createNewOrderRq(
+			1,
+			security.getIsin(),
+			3,
+			LocalDateTime.now(),
+			Side.BUY,
+			500,
+			250,
+			broker1.getBrokerId(),
+			shareholder.getShareholderId(),
+			0,
+			0,
+			200
+		);
+		broker1.increaseCreditBy(500 * 250 - 1);
+		orderHandler.handleEnterOrder(orderRq);
+		OrderRejectedEvent output = captureOrderRejectedEvent();
+		assertThat(output.getErrors()).containsOnly(Message.BUYER_HAS_NOT_ENOUGH_CREDIT);
+
+		broker1.increaseCreditBy(1);
+		orderHandler.handleEnterOrder(orderRq);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(1, 3));
+	}
+
+	@Test
+	void increase_stop_limit_order_quantity_not_enough_position() {
+		shareholder.incPosition(security, 10);
+		StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 10, 400, broker1, shareholder, 500);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.SELL,
+				15,
+				400,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				500
+			)
+		);
+		verify(eventPublisher).publish(new OrderRejectedEvent(3, 6, List.of(Message.SELLER_HAS_NOT_ENOUGH_POSITIONS)));
+	}
+
+	@Test
+	void increase_quantity_stop_limit_order_quantity_not_enough_credit() {
+		broker1.increaseCreditBy(4000);
+		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				15,
+				400,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				500
+			)
+		);
+		verify(eventPublisher).publish(new OrderRejectedEvent(3, 6, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
+	}
+
+	@Test
+	void increase_price_stop_limit_order_quantity_not_enough_credit() {
+		broker1.increaseCreditBy(4000);
+		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				10,
+				401,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				500
+			)
+		);
+		verify(eventPublisher).publish(new OrderRejectedEvent(3, 6, List.of(Message.BUYER_HAS_NOT_ENOUGH_CREDIT)));
+	}
+
+	@Test
+	void update_stop_limit_order_no_activation() {
+		setLastTradePriceByTrade(400);
+		broker1.increaseCreditBy(4010);
+		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 500);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				10,
+				401,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				450
+			)
+		);
+		verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
+		verify(eventPublisher, never()).publish(any(OrderActivatedEvent.class));
+	}
+
+	@Test
+	void update_stop_limit_order_and_activate_no_execute() {
+		setLastTradePriceByTrade(500);
+		broker1.increaseCreditBy(4010);
+		StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 400, broker1, shareholder, 550);
+		security.getOrderBook().enqueue(order);
+
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				10,
+				401,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				400
+			)
+		);
+		verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
+		verify(eventPublisher).publish(new OrderActivatedEvent(6));
+	}
+
+	@Test
+	void update_stop_limit_order_and_activate_and_execute() {
+		shareholder.incPosition(security, 1);
+		Order order = new Order(1, security, Side.SELL, 1, 600, broker2, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		broker1.increaseCreditBy(600);
+		StopLimitOrder stopLimitOrder = new StopLimitOrder(6, security, Side.BUY, 1, 600, broker1, shareholder, 700);
+		security.getOrderBook().enqueue(stopLimitOrder);
+
+		Trade trade = new Trade(security, 600, 1, order, stopLimitOrder);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createUpdateOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				1,
+				600,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				400
+			)
+		);
+		verify(eventPublisher).publish(new OrderUpdatedEvent(3, 6));
+		verify(eventPublisher).publish(new OrderActivatedEvent(6));
+		verify(eventPublisher).publish(new OrderExecutedEvent(6, List.of(new TradeDTO(trade))));
+	}
+
+	@Test
+	void new_stop_limit_order_with_submitted_stop_price_no_trade() {
+		broker1.increaseCreditBy(600);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				1,
+				600,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				400
+			)
+		);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(3, 6));
+		verify(eventPublisher).publish(new OrderActivatedEvent(6));
+	}
+
+	@Test
+	void new_stop_limit_order_with_submitted_stop_price_with_trade() {
+		shareholder.incPosition(security, 1);
+		Order order = new Order(1, security, Side.SELL, 1, 600, broker2, shareholder);
+		security.getOrderBook().enqueue(order);
+
+		broker1.increaseCreditBy(600);
+		StopLimitOrder stopLimitOrder = new StopLimitOrder(6, security, Side.BUY, 1, 600, broker1, shareholder, 700);
+		security.getOrderBook().enqueue(stopLimitOrder);
+
+		broker1.increaseCreditBy(600);
+		orderHandler.handleEnterOrder(
+			EnterOrderRq.createNewOrderRq(
+				3,
+				security.getIsin(),
+				6,
+				LocalDateTime.now(),
+				Side.BUY,
+				1,
+				600,
+				broker1.getBrokerId(),
+				shareholder.getShareholderId(),
+				0,
+				0,
+				400
+			)
+		);
+		verify(eventPublisher).publish(new OrderAcceptedEvent(3, 6));
+		verify(eventPublisher).publish(new OrderActivatedEvent(6));
+	}
+}
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
index 2c6a0a3..20338cd 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/SecurityTest.java
@@ -1,136 +1,142 @@
 package ir.ramtung.tinyme.domain;
 
+import static org.assertj.core.api.Assertions.*;
+
 import ir.ramtung.tinyme.config.MockedJMSTestConfig;
 import ir.ramtung.tinyme.domain.entity.*;
 import ir.ramtung.tinyme.domain.exception.NotFoundException;
 import ir.ramtung.tinyme.domain.service.Matcher;
+import java.time.LocalDateTime;
+import java.util.Arrays;
+import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Import;
 
-import java.util.Arrays;
-import java.util.List;
-
-import static org.assertj.core.api.Assertions.*;
-
 @SpringBootTest
 @Import(MockedJMSTestConfig.class)
 class SecurityTest {
-    private Security security;
-    private Broker broker;
-    private Shareholder shareholder;
-    private List<Order> orders;
-    @Autowired
-    Matcher matcher;
-    @BeforeEach
-    void setupOrderBook() {
-        security = Security.builder().build();
-        broker = Broker.builder().brokerId(0).credit(36_841_250L).build();
-        shareholder = Shareholder.builder().shareholderId(0).build();
-        shareholder.incPosition(security, 100_000);
-        orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
-                new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
-                new Order(3, security, Side.BUY, 445, 15450, broker, shareholder),
-                new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
-                new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder),
-                new Order(6, security, Side.SELL, 350, 15800, broker, shareholder),
-                new Order(7, security, Side.SELL, 285, 15810, broker, shareholder),
-                new Order(8, security, Side.SELL, 800, 15810, broker, shareholder),
-                new Order(9, security, Side.SELL, 340, 15820, broker, shareholder),
-                new Order(10, security, Side.SELL, 65, 15820, broker, shareholder)
-        );
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-    }
 
-    @Test
-    void reducing_quantity_does_not_change_priority() {
-        Order updateOrder = new Order(3, security, Side.BUY, 440, 15450, broker, shareholder);
-        assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
-        assertThat(security.getOrderBook().getBuyQueue().get(2).getQuantity()).isEqualTo(440);
-        assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
-    }
+	private Security security;
+	private Broker broker;
+	private Shareholder shareholder;
+	private List<Order> orders;
+	LocalDateTime entryTime = LocalDateTime.of(2001, 9, 11, 2, 14, 0);
+
+	@Autowired
+	Matcher matcher;
+
+	@BeforeEach
+	void setupOrderBook() {
+		security = Security.builder().build();
+		broker = Broker.builder().brokerId(0).credit(36_841_250L).build();
+		shareholder = Shareholder.builder().shareholderId(0).build();
+		shareholder.incPosition(security, 100_000);
+		orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 304, 15700, broker, shareholder, entryTime),
+				new Order(2, security, Side.BUY, 43, 15500, broker, shareholder, entryTime),
+				new Order(3, security, Side.BUY, 445, 15450, broker, shareholder, entryTime),
+				new Order(4, security, Side.BUY, 526, 15450, broker, shareholder, entryTime),
+				new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder, entryTime),
+				new Order(6, security, Side.SELL, 350, 15800, broker, shareholder, entryTime),
+				new Order(7, security, Side.SELL, 285, 15810, broker, shareholder, entryTime),
+				new Order(8, security, Side.SELL, 800, 15810, broker, shareholder, entryTime),
+				new Order(9, security, Side.SELL, 340, 15820, broker, shareholder, entryTime),
+				new Order(10, security, Side.SELL, 65, 15820, broker, shareholder, entryTime)
+			);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+	}
+
+	@Test
+	void reducing_quantity_does_not_change_priority() {
+		Order updateOrder = new Order(3, security, Side.BUY, 440, 15450, broker, shareholder);
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThat(security.getOrderBook().getBuyQueue().get(2).getQuantity()).isEqualTo(440);
+		assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
+	}
 
-    @Test
-    void increasing_quantity_changes_priority() {
-        Order updateOrder = new Order(3, security, Side.BUY, 450, 15450, broker, shareholder);
-        assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(450);
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
-    }
+	@Test
+	void increasing_quantity_changes_priority() {
+		Order updateOrder = new Order(3, security, Side.BUY, 450, 15450, broker, shareholder);
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(450);
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
+	}
 
-    @Test
-    void changing_price_changes_priority() {
-        Order updateOrder = new Order(1, security, Side.BUY, 300, 15450, broker, shareholder);
-        assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(300);
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getPrice()).isEqualTo(15450);
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(1);
-        assertThat(security.getOrderBook().getBuyQueue().get(0).getOrderId()).isEqualTo(2);
-    }
-    @Test
-    void changing_price_causes_trades_to_happen() {
-        Order updateOrder = new Order(6, security, Side.SELL, 350, 15700, broker, shareholder);
-        assertThatNoException().isThrownBy(() ->
-                assertThat(security.updateOrder(updateOrder, matcher).getFirst().trades()).isNotEmpty()
-        );
-    }
+	@Test
+	void changing_price_changes_priority() {
+		Order updateOrder = new Order(1, security, Side.BUY, 300, 15450, broker, shareholder);
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(300);
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getPrice()).isEqualTo(15450);
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(1);
+		assertThat(security.getOrderBook().getBuyQueue().get(0).getOrderId()).isEqualTo(2);
+	}
 
-    @Test
-    void updating_non_existing_order_fails() {
-        Order updateOrder = new Order(6, security, Side.BUY, 350, 15700, broker, shareholder);
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.updateOrder(updateOrder, matcher));
-    }
+	@Test
+	void changing_price_causes_trades_to_happen() {
+		Order updateOrder = new Order(6, security, Side.SELL, 350, 15700, broker, shareholder);
+		assertThatNoException()
+			.isThrownBy(() -> assertThat(security.updateOrder(updateOrder, matcher).getFirst().trades()).isNotEmpty());
+	}
 
-    @Test
-    void delete_order_works() {
-        assertThatNoException().isThrownBy(() -> security.deleteOrder(Side.SELL, 6));
-        assertThat(security.getOrderBook().getBuyQueue()).isEqualTo(orders.subList(0, 5));
-        assertThat(security.getOrderBook().getSellQueue()).isEqualTo(orders.subList(6, 10));
-    }
+	@Test
+	void updating_non_existing_order_fails() {
+		Order updateOrder = new Order(6, security, Side.BUY, 350, 15700, broker, shareholder);
+		assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+	}
 
-    @Test
-    void deleting_non_existing_order_fails() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.deleteOrder(Side.SELL, 1));
-    }
+	@Test
+	void delete_order_works() {
+		assertThatNoException().isThrownBy(() -> security.deleteOrder(Side.SELL, 6));
+		assertThat(security.getOrderBook().getBuyQueue()).isEqualTo(orders.subList(0, 5));
+		assertThat(security.getOrderBook().getSellQueue()).isEqualTo(orders.subList(6, 10));
+	}
 
-    @Test
-    void increasing_iceberg_peak_size_changes_priority() {
-        security = Security.builder().build();
-        broker = Broker.builder().credit(1_000_000L).build();
-        orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
-                new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
-                new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 100),
-                new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
-                new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder)
-        );
-        broker.increaseCreditBy(35_841_250);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        Order updateOrder = new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 150);
-        assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(150);
-        assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
-    }
+	@Test
+	void deleting_non_existing_order_fails() {
+		assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> security.deleteOrder(Side.SELL, 1));
+	}
 
-    @Test
-    void decreasing_iceberg_quantity_to_amount_larger_than_peak_size_does_not_changes_priority() {
-        security = Security.builder().build();
-        broker = Broker.builder().build();
-        orders = Arrays.asList(
-                new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
-                new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
-                new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 100),
-                new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
-                new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder)
-        );
-        broker.increaseCreditBy(35_841_250);
-        orders.forEach(order -> security.getOrderBook().enqueue(order));
-        Order updateOrder = new IcebergOrder(3, security, Side.BUY, 300, 15450, broker, shareholder, 100);
-        assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
-        assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
-    }
+	@Test
+	void increasing_iceberg_peak_size_changes_priority() {
+		security = Security.builder().build();
+		broker = Broker.builder().credit(1_000_000L).build();
+		orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 304, 15700, broker, shareholder, entryTime),
+				new Order(2, security, Side.BUY, 43, 15500, broker, shareholder, entryTime),
+				new IcebergOrder(3, security, Side.BUY, 445, 0, 15450, broker, shareholder, entryTime, 100),
+				new Order(4, security, Side.BUY, 526, 15450, broker, shareholder, entryTime),
+				new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder, entryTime)
+			);
+		broker.increaseCreditBy(35_841_250);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		Order updateOrder = new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 150);
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getQuantity()).isEqualTo(150);
+		assertThat(security.getOrderBook().getBuyQueue().get(3).getOrderId()).isEqualTo(3);
+	}
 
-}
\ No newline at end of file
+	@Test
+	void decreasing_iceberg_quantity_to_amount_larger_than_peak_size_does_not_changes_priority() {
+		security = Security.builder().build();
+		broker = Broker.builder().build();
+		orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 304, 15700, broker, shareholder),
+				new Order(2, security, Side.BUY, 43, 15500, broker, shareholder),
+				new IcebergOrder(3, security, Side.BUY, 445, 15450, broker, shareholder, 100),
+				new Order(4, security, Side.BUY, 526, 15450, broker, shareholder),
+				new Order(5, security, Side.BUY, 1000, 15400, broker, shareholder)
+			);
+		broker.increaseCreditBy(35_841_250);
+		orders.forEach(order -> security.getOrderBook().enqueue(order));
+		Order updateOrder = new IcebergOrder(3, security, Side.BUY, 300, 15450, broker, shareholder, 100);
+		assertThatNoException().isThrownBy(() -> security.updateOrder(updateOrder, matcher));
+		assertThat(security.getOrderBook().getBuyQueue().get(2).getOrderId()).isEqualTo(3);
+	}
+}
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
index 7a20fe5..a247d2b 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/domain/entity/SecurityTest.java
@@ -3,4514 +3,5019 @@ package ir.ramtung.tinyme.domain.entity;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
+import ir.ramtung.tinyme.domain.exception.NotFoundException;
+import ir.ramtung.tinyme.domain.service.Matcher;
 import java.time.LocalDateTime;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
-
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 
-import ir.ramtung.tinyme.domain.exception.NotFoundException;
-import ir.ramtung.tinyme.domain.service.Matcher;
-
 @SpringBootTest
 public class SecurityTest {
-    private Security security;
-    private Broker sellerBroker;
-    private Broker buyerBroker;
-    private Shareholder sellerShareholder;
-    private Shareholder buyerShareholder;
-    private OrderBook orderBook;
-    private List<Order> orders;
-    private AssertingPack assertPack;
-    private ScenarioGenerator scenarioGenerator;
-    @Autowired
-    private Matcher matcher;
-
-
-    // --------------------------------------------------------------------------------
-    // Helper classes
-    // --------------------------------------------------------------------------------
-
-    // Helper class to assert the state of the system
-    private class AssertingPack {
-        private long exceptedSellerCredit;
-        private long exceptedBuyerCredit;
-        private Integer exceptedSellerPosition;
-        private Integer exceptedBuyerPosition;
-        private Integer exceptedLastTradePrice;
-        private LinkedList<Order> sellQueue;
-        private LinkedList<Order> buyQueue;
-        private LinkedList<StopLimitOrder> sellStopLimitQueue;
-        private LinkedList<StopLimitOrder> buyStopLimitQueue;
-
-        private AssertingPack() {
-            exceptedSellerCredit = SecurityTest.this.sellerBroker.getCredit();
-            exceptedBuyerCredit = SecurityTest.this.buyerBroker.getCredit();
-            exceptedSellerPosition = SecurityTest.this.sellerShareholder.getPositionBySecurity(security);
-            exceptedBuyerPosition = SecurityTest.this.buyerShareholder.getPositionBySecurity(security);
-            exceptedLastTradePrice = SecurityTest.this.security.getLastTradePrice();
-            sellQueue = SecurityTest.this.orderBook.getSellQueue();
-            buyQueue = SecurityTest.this.orderBook.getBuyQueue();
-            sellStopLimitQueue = SecurityTest.this.orderBook.getStopLimitOrderSellQueue();
-            buyStopLimitQueue = SecurityTest.this.orderBook.getStopLimitOrderBuyQueue();
-        }
-
-        private void assertSellerCredit() {
-            assertThat(SecurityTest.this.sellerBroker.getCredit()).isEqualTo(exceptedSellerCredit);
-        }
-
-        private void assertBuyerCredit() {
-            assertThat(SecurityTest.this.buyerBroker.getCredit()).isEqualTo(exceptedBuyerCredit);
-        }
-
-        private void assertSellerPosition() {
-            assertThat(SecurityTest.this.sellerShareholder.getPositionBySecurity(security)).isEqualTo(exceptedSellerPosition);
-        }
-
-        private void assertBuyerPosition() {
-            assertThat(SecurityTest.this.buyerShareholder.getPositionBySecurity(security)).isEqualTo(exceptedBuyerPosition);
-        }
-
-        private void assertLastTradePrice() {
-            assertThat(SecurityTest.this.security.getLastTradePrice()).isEqualTo(exceptedLastTradePrice);
-        }
-
-        private void assertOrderInStopLimitQueue(Side side, int idx, long orderId, int quantity, int price, int stopPrice) {
-            StopLimitOrder order = (side == Side.BUY) ? buyStopLimitQueue.get(idx) : sellStopLimitQueue.get(idx);
-            long actualId = order.getOrderId();
-            int actualquantity = order.getTotalQuantity();
-            int actualPrice = order.getPrice();
-            int actualStopPrice = order.getStopPrice();
-
-            assertThat(actualId).isEqualTo(orderId);
-            assertThat(actualquantity).isEqualTo(quantity);
-            assertThat(actualPrice).isEqualTo(price);
-            assertThat(actualStopPrice).isEqualTo(stopPrice);
-        }
-
-        private void assertMatchResult(MatchResult result, MatchingOutcome outcome, long orderId, int numOfTrades) {
-            MatchingOutcome actualOutcome = result.outcome();
-            long actualOrderId = result.remainder().getOrderId();
-            int actualNumOfTrades = result.trades().size();
-
-            assertThat(actualOutcome).isEqualTo(outcome);
-            assertThat(actualOrderId).isEqualTo(orderId);
-            assertThat(actualNumOfTrades).isEqualTo(numOfTrades);
-        }
-
-        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int minexteQuantity, int price) {
-            Order order = (side == Side.BUY) ? buyQueue.get(idx) : sellQueue.get(idx);
-            long actualId = order.getOrderId();
-            int actualquantity = order.getTotalQuantity();
-            int actualPrice = order.getPrice();
-            int actualMinexteQuantity = order.getMinimumExecutionQuantity();
-
-            assertThat(actualId).isEqualTo(orderId);
-            assertThat(actualquantity).isEqualTo(quantity);
-            assertThat(actualMinexteQuantity).isEqualTo(minexteQuantity);
-            assertThat(actualPrice).isEqualTo(price);
-        }
-
-        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price) {
-            assertOrderInQueue(side, idx, orderId, quantity, 0, price);
-        }
-
-        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int minexteQuantity, int price, int peakSize, int displayedQuantity) {
-            assertOrderInQueue(side, idx, orderId, quantity, minexteQuantity, price);
-            Order order = (side == Side.BUY) ? buyQueue.get(idx) : sellQueue.get(idx);
-            IcebergOrder iceOrder = (IcebergOrder) order;
-            int actualPeakSize = iceOrder.getPeakSize(); 
-            int actualDisplayedQuantity = iceOrder.getDisplayedQuantity();
-
-            assertThat(actualPeakSize).isEqualTo(peakSize);
-            assertThat(actualDisplayedQuantity).isEqualTo(displayedQuantity);
-        }
-
-        private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price, int peakSize, int displayedQuantity) {
-            assertOrderInQueue(side, idx, orderId, quantity, 0, price, peakSize, displayedQuantity);
-        }
-    }
-
-    // Helper class to generate scenarios
-    private class ScenarioGenerator {
-        public void delete_sell_order() {
-            security.deleteOrder(Side.SELL, 2);
-        }
-
-        public void delete_sell_ice_order() {
-            security.deleteOrder(Side.SELL, 5);
-        }
-
-        public void delete_buy_order() {
-            security.deleteOrder(Side.BUY, 3);
-        }
-
-        public void delete_buy_ice_order() {
-            security.deleteOrder(Side.BUY, 5);
-        }
-
-        public void delete_non_existing_sell_order() {
-            security.deleteOrder(Side.SELL, 6);
-        }
-
-        public void delete_non_existing_buy_order() {
-            security.deleteOrder(Side.BUY, 8);
-        }
-
-        public MatchResult decrease_sell_order_quantity() {
-            Order order = new Order(1, security, Side.SELL, 4, 600, sellerBroker, sellerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_sell_ice_order_quantity() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 30, 1000, sellerBroker, sellerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();   
-        }
-
-        public MatchResult decrease_buy_order_quantity() {
-            Order order = new Order(3, security, Side.BUY, 7, 300, buyerBroker, buyerShareholder);
-            return security.updateOrder(order, matcher).getFirst();   
-        }
-
-        public MatchResult decrease_buy_ice_order_quantity() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 7, 500, buyerBroker, buyerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_sell_order_quantity() {
-            Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 5);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_sell_ice_order_quantity() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 60, 1000, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 15);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_sell_order_quantity_but_not_enough_position() {
-            Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_sell_ice_order_quantity_but_not_enough_position() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 60, 1000, sellerBroker, sellerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();            
-        }
-
-        public MatchResult increase_buy_order_quantity() {
-            Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(6000);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_quantity() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(7500);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_order_quantity_but_not_enough_credit() {
-            Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_quantity_but_not_enough_credit() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_sell_order_price_no_trading_happens() {
-            Order order = new Order(3, security, Side.SELL, 10, 650, sellerBroker, sellerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_sell_ice_order_price_no_trading_happens() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 600, sellerBroker, sellerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();   
-        }
-
-        public MatchResult decrease_sell_order_price_and_completely_traded() {
-            Order order = new Order(3, security, Side.SELL, 10, 450, sellerBroker, sellerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_sell_ice_order_price_and_completely_traded() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 450, sellerBroker, sellerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_sell_order_price_and_partially_traded() {
-            Order order = new Order(3, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 40);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_sell_ice_order_price_and_partially_traded() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 5);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_buy_order_price() {
-            Order order = new Order(3, security, Side.BUY, 10, 150, buyerBroker, buyerShareholder);
-            return security.updateOrder(order, matcher).getFirst();   
-        }
-
-        public MatchResult decrease_buy_ice_order_price() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 200, buyerBroker, buyerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_sell_order_price() {
-            Order order = new Order(3, security, Side.SELL, 10, 950, sellerBroker, sellerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_sell_ice_order_price() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 1100, sellerBroker, sellerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_order_price_no_trading_happens() {
-            Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(1500);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_price_no_trading_happens() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(2250);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_order_price_no_trading_happens_and_not_enough_credit() {
-            Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_order_price_and_completely_traded() {
-            Order order = new Order(2, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(5000);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_price_and_completely_traded() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 1000, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(12500);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_order_price_and_partially_traded() {
-            Order order = new Order(3, security, Side.BUY, 25, 700, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(13500);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_price_and_partially_traded() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(80000);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_order_price_and_trade_happens_but_not_enough_credit() {
-            Order order = new Order(3, security, Side.BUY, 25, 800, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(13500);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback() {
-            IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(57000);
-            return security.updateOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_no_trades_happens() {
-            Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 15);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_no_trades_happens() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
-            sellerShareholder.incPosition(security, 20);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_and_not_enough_position() {
-            Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_and_not_enough_position() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_and_completely_traded() {
-            Order order = new Order(8, security, Side.SELL, 13, 400, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 13);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_and_completely_traded() {
-            IcebergOrder order = new IcebergOrder(8, security, Side.SELL, 67, 100, sellerBroker, sellerShareholder, 9);
-            sellerShareholder.incPosition(security, 67);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_and_partially_traded() {
-            Order order = new Order(7, security, Side.SELL, 60, 500, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 60);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
-            IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 3);
-            sellerShareholder.incPosition(security, 60);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
-            IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 7);
-            sellerShareholder.incPosition(security, 60);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_matches_with_all_buyer_queue_and_finished() {
-            Order order = new Order(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 85);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_finished() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 85);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_matches_with_all_buyer_queue_and_not_finished() {
-            Order order = new Order(6, security, Side.SELL, 120, 100, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 120);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 100, 100, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 100);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_with_min_execution_quantity_and_next_go_to_queue() {
-            Order order = new Order(6, security, Side.SELL, 50, 10, 500, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 50);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 50, 10, 500, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 50);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_not_enough_execution_cause_rollback() {
-            Order order = new Order(6, security, Side.SELL, 60, 50, 500, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 60);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_not_enough_execution_cause_rollback() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 100, 70, 300, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 100);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_quantity_is_equal_to_min_execution_quantity() {
-            Order order = new Order(6, security, Side.SELL, 50, 50, 300, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 50);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_ice_order_quantity_is_equal_to_min_execution_quantity() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 50, 50, 300, sellerBroker, sellerShareholder, 10);
-            sellerShareholder.incPosition(security, 50);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_no_trades_happens() {
-            Order order = new Order(6, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(6600);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_no_trades_happens() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
-            buyerBroker.increaseCreditBy(2250);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_but_not_enough_credit() {
-            Order order = new Order(10, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(6000);
-            return  security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_but_not_enough_credit() {
-            IcebergOrder order = new IcebergOrder(10, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
-            buyerBroker.increaseCreditBy(2000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_and_completely_traded() {
-            Order order = new Order(8, security, Side.BUY, 13, 700, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(8100);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_and_completely_traded() {
-            IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 52, 1100, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(42000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_and_partially_traded() {
-            Order order = new Order(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(7800);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder, 2);
-            buyerBroker.increaseCreditBy(7800);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 14, 600, buyerBroker, buyerShareholder, 5);
-            buyerBroker.increaseCreditBy(8400);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_not_enough_credit_causes_rollback() {
-            Order order = new Order(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(9000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_not_enough_credit_causes_rollback() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(78000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_matches_with_all_seller_queue_and_finished() {
-            Order order = new Order(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(75000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_finished() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(75000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_matches_with_all_seller_queue_and_not_finished() {
-            Order order = new Order(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(90000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_not_finished() {
-            IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(90000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_with_min_execution_quantity_and_next_go_to_queue() {
-            Order order = new Order(6, security, Side.BUY, 22, 17, 700, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(14400);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 32, 20, 700, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(21400);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_not_enough_execution_cause_rollback() {
-            Order order = new Order(6, security, Side.BUY, 60, 50, 600, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(36000);
-            return security.addNewOrder(order, matcher).getFirst();   
-        }
-
-        public MatchResult add_buy_ice_order_not_enough_execution_cause_rollback() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 100, 70, 800, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(80000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_order_quantity_is_equal_to_min_execution_quantity() {
-            Order order = new Order(6, security, Side.BUY, 40, 40, 1000, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(40000);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_ice_order_quantity_is_equal_to_min_execution_quantity() {
-            IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 22, 22, 800, buyerBroker, buyerShareholder, 10);
-            buyerBroker.increaseCreditBy(14600);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        
-        public void add_two_buy_orders_with_same_price() {
-            Order order1 = new Order(6, security, Side.BUY, 10, 0, 300, buyerBroker, 
-                                     buyerShareholder, LocalDateTime.now().minusHours(1));
-            Order order2 = new Order(7, security, Side.BUY, 10, 0, 300, buyerBroker, 
-                                     buyerShareholder, LocalDateTime.now().minusHours(2));
-
-            buyerBroker.increaseCreditBy(6000);
-            security.addNewOrder(order1, matcher);
-            security.addNewOrder(order2, matcher);
-        }
-
-        public void add_two_buy_ice_orders_with_same_price() {
-            IcebergOrder order1 = new IcebergOrder(6, security, Side.BUY, 10, 0, 300, buyerBroker, 
-                                                   buyerShareholder, LocalDateTime.now().plusHours(1), 10);
-            IcebergOrder order2 = new IcebergOrder(7, security, Side.BUY, 10, 0, 300, buyerBroker, 
-                                                   buyerShareholder, LocalDateTime.now().plusHours(2), 10);
-
-            buyerBroker.increaseCreditBy(6000);
-            security.addNewOrder(order1, matcher);
-            security.addNewOrder(order2, matcher);
-        }
-
-        public MatchResult add_sell_order_causes_rollback_for_buy_orders_with_same_price() {
-            this.add_two_buy_orders_with_same_price();
-            Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 300);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price() {
-            this.add_two_buy_ice_orders_with_same_price();
-            Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 300);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_sell_stop_limit_order_but_not_enough_position() {
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 10, 100, sellerBroker, sellerShareholder, 525);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult add_buy_stop_limit_order_but_not_enough_credit() {
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 100, buyerBroker, buyerShareholder, 575);
-            return security.addNewOrder(order, matcher).getFirst();
-        }
-
-        public void add_three_stop_limit_order_both_buy_and_sell() {
-            List<StopLimitOrder> orders = Arrays.asList(
-                new StopLimitOrder(6, security, Side.SELL, 15, 400, sellerBroker, sellerShareholder, 500),
-                new StopLimitOrder(7, security, Side.SELL, 15, 300, sellerBroker, sellerShareholder, 400),
-                new StopLimitOrder(8, security, Side.SELL, 15, 200, sellerBroker, sellerShareholder, 300),
-                new StopLimitOrder(6, security, Side.BUY,  15, 700, buyerBroker, buyerShareholder, 600),
-                new StopLimitOrder(7, security, Side.BUY,  15, 800, buyerBroker, buyerShareholder, 700),
-                new StopLimitOrder(8, security, Side.BUY,  15, 900, buyerBroker, buyerShareholder, 800)
-            );
-            sellerShareholder.incPosition(security, 45);
-            buyerBroker.increaseCreditBy(36000);
-            orders.forEach(order -> security.addNewOrder(order, matcher));
-        }
-
-        public List<MatchResult> new_sell_order_activate_all_sell_stop_limit_orders() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            Order order = new Order(9, security, Side.SELL, 45, 500, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 45);
-            return security.addNewOrder(order, matcher);
-        }
-
-        public List<MatchResult> new_buy_order_activate_all_buy_stop_limit_orders() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            Order order = new Order(9, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
-            buyerBroker.increaseCreditBy(6000);
-            return security.addNewOrder(order, matcher);
-        }
-
-        public List<MatchResult> new_sell_order_activate_one_sell_stop_limit_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            Order order = new Order(9, security, Side.SELL, 30, 500, sellerBroker, sellerShareholder);
-            sellerShareholder.incPosition(security, 30);
-            return security.addNewOrder(order, matcher);
-        }
-
-        public List<MatchResult> new_buy_order_activate_one_buy_stop_limit_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            Order order1 = new Order(10, security, Side.SELL, 10, 600, sellerBroker, sellerShareholder);
-            Order order2 = new Order(9, security, Side.BUY, 5, 600, buyerBroker, buyerShareholder);
-            sellerShareholder.incPosition(security, 10);
-            buyerBroker.increaseCreditBy(3000);
-            security.addNewOrder(order1, matcher);
-            return security.addNewOrder(order2, matcher);
-        }
-
-        public List<MatchResult> new_sell_stop_limit_order_and_active_at_the_first() {
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 10, 500, sellerBroker, sellerShareholder, 600);
-            sellerShareholder.incPosition(security, 10);
-            return security.addNewOrder(order, matcher);
-        }
-
-        public List<MatchResult> new_buy_stop_limit_order_and_active_at_the_first() {
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 3, 700, buyerBroker, buyerShareholder, 500);
-            buyerBroker.increaseCreditBy(2100);
-            return security.addNewOrder(order, matcher);
-        }
-
-        public MatchResult decrease_price_stop_limit_sell_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 15, 350, sellerBroker, sellerShareholder, 500);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_price_stop_limit_sell_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 15, 450, sellerBroker, sellerShareholder, 500);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_quantity_stop_limit_sell_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 10, 400, sellerBroker, sellerShareholder, 500);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_quantity_stop_limit_sell_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 20, 400, sellerBroker, sellerShareholder, 500);
-            sellerShareholder.incPosition(security, 5);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_quantity_stop_limit_sell_order_and_not_enough_position() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 20, 400, sellerBroker, sellerShareholder, 500);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_stop_price_stop_limit_sell_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 15, 400, sellerBroker, sellerShareholder, 350);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_stop_price_stop_limit_sell_order_and_not_activated() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 15, 400, sellerBroker, sellerShareholder, 525);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public List<MatchResult> increase_stop_price_stop_limit_sell_order_and_activated() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.SELL, 15, 400, sellerBroker, sellerShareholder, 555);
-            return security.updateSloOrder(order, matcher);
-        }
-        public MatchResult decrease_price_stop_limit_buy_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 15, 600, buyerBroker, buyerShareholder, 600);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_price_stop_limit_buy_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder, 600);
-            buyerBroker.increaseCreditBy(750);
-            return security.updateSloOrder(order, matcher).getFirst();
-        
-        }
-        public MatchResult increase_price_stop_limit_buy_order_and_not_enough_credit() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder, 600);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_quantity_stop_limit_buy_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 10, 700, buyerBroker, buyerShareholder, 600);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_quantity_stop_limit_buy_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 20, 700, buyerBroker, buyerShareholder, 600);
-            buyerBroker.increaseCreditBy(3500);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult increase_quantity_stop_limit_buy_order_and_not_enough_credit() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 20, 700, buyerBroker, buyerShareholder, 600);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public MatchResult decrease_stop_price_stop_limit_buy_order_and_not_activated() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(7, security, Side.BUY, 15, 800, buyerBroker, buyerShareholder, 575);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-
-        public List<MatchResult> decrease_stop_price_stop_limit_buy_order_and_activated() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 15, 700, buyerBroker, buyerShareholder, 500);
-            return security.updateSloOrder(order, matcher);
-        }
-
-        public MatchResult increase_stop_price_stop_limit_buy_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            StopLimitOrder order = new StopLimitOrder(6, security, Side.BUY, 15, 700, buyerBroker, buyerShareholder, 750);
-            return security.updateSloOrder(order, matcher).getFirst();
-        }
-        
-        public void delete_stop_limit_sell_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            security.deleteOrder(Side.SELL, 7);
-        }
-        
-        public void delete_stop_limit_buy_order() {
-            this.add_three_stop_limit_order_both_buy_and_sell();
-            security.deleteOrder(Side.BUY, 7);
-        }
-    }
-
-
-    // --------------------------------------------------------------------------------
-    // Test cases
-    // --------------------------------------------------------------------------------
-
-    @BeforeEach
-    void setup() {
-        security = Security.builder().lastTradePrice(550).build();
-        sellerBroker = Broker.builder().credit(0).build();
-        buyerBroker = Broker.builder().credit(32500).build();
-        sellerShareholder = Shareholder.builder().build();
-        buyerShareholder = Shareholder.builder().build();
-        sellerShareholder.incPosition(security, 85);
-        buyerShareholder.incPosition(security, 0);
-        orderBook = security.getOrderBook();
-        orders = Arrays.asList(
-            new Order(1, security, Side.BUY, 10, 100, buyerBroker, buyerShareholder),
-            new Order(2, security, Side.BUY, 10, 200, buyerBroker, buyerShareholder),
-            new Order(3, security, Side.BUY, 10, 300, buyerBroker, buyerShareholder),
-            new Order(4, security, Side.BUY, 10, 400, buyerBroker, buyerShareholder),
-            new IcebergOrder(5, security, Side.BUY, 45, 500, buyerBroker, buyerShareholder, 10),
-            new Order(1, security, Side.SELL, 10, 600, sellerBroker, sellerShareholder),
-            new Order(2, security, Side.SELL, 10, 700, sellerBroker, sellerShareholder),
-            new Order(3, security, Side.SELL, 10, 800, sellerBroker, sellerShareholder),
-            new Order(4, security, Side.SELL, 10, 900, sellerBroker, sellerShareholder),
-            new IcebergOrder(5, security, Side.SELL, 45, 1000, sellerBroker, sellerShareholder, 10)
-        );
-        orders.forEach(order -> orderBook.enqueue(order));
-        assertPack = new AssertingPack();
-        scenarioGenerator = new ScenarioGenerator();
-    }
-
-    @Test
-    public void delete_sell_order_and_check_buyer_credit() {
-        scenarioGenerator.delete_sell_order();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void delete_sell_order_and_check_buyer_position() {
-        scenarioGenerator.delete_sell_order();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void delete_sell_order_and_check_seller_position() {
-        scenarioGenerator.delete_sell_order();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void delete_sell_order_and_check_seller_credit() {
-        scenarioGenerator.delete_sell_order();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void delete_sell_order_and_check_sell_side_in_queue() {
-        scenarioGenerator.delete_sell_order();
-        assertPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 800);
-    }
-
-    @Test
-    public void delete_sell_order_and_check_buy_side_in_queue() {
-        scenarioGenerator.delete_sell_order();
-        assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
-    }
-    
-    @Test
-    public void delete_sell_ice_order_and_check_buyer_credit() {
-        scenarioGenerator.delete_sell_ice_order();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void delete_sell_ice_order_and_check_buyer_position() {
-        scenarioGenerator.delete_sell_ice_order();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void delete_sell_ice_order_and_check_seller_position() {
-        scenarioGenerator.delete_sell_ice_order();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void delete_sell_ice_order_and_check_seller_credit() {
-        scenarioGenerator.delete_sell_ice_order();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void delete_sell_ice_order_and_check_buy_side_in_queue() {
-        scenarioGenerator.delete_sell_ice_order();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test
-    public void delete_sell_ice_order_and_check_sell_side_in_queue() {
-        scenarioGenerator.delete_sell_ice_order();
-        assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> orderBook.getSellQueue().get(4));
-    }
-
-    @Test
-    public void delete_buy_order_and_check_buyer_credit() {
-        scenarioGenerator.delete_buy_order();
-        assertPack.exceptedBuyerCredit = 3000;
-        assertPack.assertBuyerCredit();
-    }
-    
-    @Test
-    public void delete_buy_order_and_check_buyer_position() {
-        scenarioGenerator.delete_buy_order();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void delete_buy_order_and_check_seller_credit() {
-        scenarioGenerator.delete_buy_order();
-        assertPack.assertSellerCredit();
-    }
-    
-    @Test
-    public void delete_buy_order_and_check_seller_position() {
-        scenarioGenerator.delete_buy_order();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void delete_buy_order_and_check_sell_side_in_queue() {
-        scenarioGenerator.delete_buy_order();
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-    }
-
-    @Test
-    public void delete_buy_order_and_check_buy_side_in_queue() {
-        scenarioGenerator.delete_buy_order();
-        assertPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
-    }
-
-    @Test
-    public void delete_buy_ice_order_and_check_buyer_credit() {
-        scenarioGenerator.delete_buy_ice_order();
-        assertPack.exceptedBuyerCredit = 22500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void delete_buy_ice_order_and_check_buyer_position() {
-        scenarioGenerator.delete_buy_ice_order();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void delete_buy_ice_order_and_check_seller_credit() {
-        scenarioGenerator.delete_buy_ice_order();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void delete_buy_ice_order_and_check_seller_position() {
-        scenarioGenerator.delete_buy_ice_order();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void delete_buy_ice_order_and_check_sell_side_in_queue() {
-        scenarioGenerator.delete_buy_ice_order();
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-    }
-
-    @Test
-    public void delete_buy_ice_order_and_check_buy_side_in_queue() {
-        scenarioGenerator.delete_buy_ice_order();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-    }
-
-    @Test
-    public void delete_non_existing_sell_order_and_check_buyer_credit() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void delete_non_existing_sell_order_and_check_buyer_position() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void delete_non_existing_sell_order_and_check_buy_side_in_queue() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
-    }
-
-    @Test
-    public void delete_non_existing_sell_order_and_check_seller_credit() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void delete_non_existing_sell_order_and_check_seller_position() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void delete_non_existing_sell_order_and_check_sell_side_in_queue() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-    }
-
-    @Test
-    public void delete_non_existing_buy_order_and_check_buyer_credit() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void delete_non_existing_buy_order_and_check_buyer_position() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void delete_non_existing_buy_order_and_check_buy_side_in_queue() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
-    }
-
-    @Test
-    public void delete_non_existing_buy_order_and_check_seller_credit() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void delete_non_existing_buy_order_and_check_seller_position() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void delete_non_existing_buy_order_and_check_sell_side_in_queue() {
-        assertThatExceptionOfType(NotFoundException.class).isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-    }
-
-    // TODO
-    // what if new quantity be zero? what should happen in that case?
-
-    @Test
-    public void decrease_sell_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_sell_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_order_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_quantity_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_order_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.decrease_sell_order_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 4, 600);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_ice_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_sell_ice_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_ice_order_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_ice_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_ice_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_quantity_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_ice_order_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.decrease_sell_ice_order_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 30, 1000, 10, 10);
-    }
-
-    @Test
-    public void decrease_buy_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_buy_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_buy_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.decrease_buy_order_quantity();
-        assertPack.exceptedBuyerCredit = 900;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_buy_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.decrease_buy_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_buy_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.decrease_buy_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_buy_order_quantity_and_check_seller_position() {
-        scenarioGenerator.decrease_buy_order_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_buy_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.decrease_buy_order_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 7, 300);
-    }
-
-    @Test
-    public void decrease_buy_ice_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_buy_ice_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_buy_ice_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.decrease_buy_ice_order_quantity();
-        assertPack.exceptedBuyerCredit = 19000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.decrease_buy_ice_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.decrease_buy_ice_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_quantity_and_check_seller_position() {
-        scenarioGenerator.decrease_buy_ice_order_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.decrease_buy_ice_order_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 7, 500, 10, 7);
-    }
-    
-    @Test
-    public void increase_sell_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_sell_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_sell_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.increase_sell_order_quantity();
-        assertPack.assertBuyerCredit();
-    }
-    
-    @Test
-    public void increase_sell_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.increase_sell_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_sell_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.increase_sell_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-    
-    @Test
-    public void increase_sell_order_quantity_and_check_seller_position() {
-        scenarioGenerator.increase_sell_order_quantity();
-        assertPack.exceptedSellerPosition = 90;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_sell_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.increase_sell_order_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 15, 700);
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_and_check_matcu_result() {
-        MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_sell_ice_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.increase_sell_ice_order_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.increase_sell_ice_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.increase_sell_ice_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_and_check_seller_position() {
-        scenarioGenerator.increase_sell_ice_order_quantity();
-        assertPack.exceptedSellerPosition = 100;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.increase_sell_ice_order_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 60, 1000, 10, 10);
-    }
-
-    @Test
-    public void increase_sell_order_quantity_but_not_enough_position_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-    }
-
-    @Test
-    public void increase_sell_order_quantity_but_not_enough_position_and_check_buyer_credit() {
-        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_sell_order_quantity_but_not_enough_position_and_check_buyer_position() {
-        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_sell_order_quantity_but_not_enough_position_and_check_seller_credit() {
-        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_sell_order_quantity_but_not_enough_position_and_check_seller_position() {
-        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_sell_order_quantity_but_not_enough_position_and_check_order_in_queue() {
-        scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-    }
-
-    @Test
-   public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-   }
-
-   @Test
-   public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_buyer_credit() {
-        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_buyer_position() {
-        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_seller_credit() {
-        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_seller_position() {
-        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_order_in_queue() {
-        scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-    }
-
-    @Test
-    public void increase_buy_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_order_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 25, 400);
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_ice_order_quantity_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_ice_order_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_quantity();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_quantity();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 60, 500, 10, 10);
-    }
-
-    @Test
-    public void increase_buy_order_quantity_but_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-    
-    @Test
-    public void increase_buy_order_quantity_but_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_but_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_but_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_but_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_quantity_but_not_enough_credit_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    // TODO
-    // add peakSize scenarios after you are sure how they work
-
-    @Test
-    public void decrease_sell_order_price_no_trading_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_sell_order_price_no_trading_happens_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-        assertPack.assertBuyerCredit();
-    }
-    
-    @Test
-    public void decrease_sell_order_price_no_trading_happens_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_price_no_trading_happens_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_price_no_trading_happens_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_price_no_trading_happens_and_check_order_in_queue() {
-        scenarioGenerator.decrease_sell_order_price_no_trading_happens();
-        assertPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 650);
-    }
-    
-    @Test
-    public void decrease_sell_ice_order_price_no_trading_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_no_trading_happens_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_no_trading_happens_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_no_trading_happens_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_no_trading_happens_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test   
-    public void decrease_sell_ice_order_price_no_trading_happens_and_check_order_in_queue() {
-        scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
-        assertPack.assertOrderInQueue(Side.SELL, 1, 5, 45, 600, 10, 10);
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 10;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.exceptedSellerCredit = 5000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.exceptedSellerPosition = 75;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 2, 4, 10, 900);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 3)).isFalse();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 35, 500, 10, 10);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertPack.exceptedSellerCredit = 22500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertPack.exceptedSellerPosition = 40;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isFalse();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertPack.exceptedSellerCredit = 22500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertPack.exceptedSellerPosition = 80;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 5, 450);
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_partially_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.decrease_sell_order_price_and_partially_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_buyer_credit() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_buyer_position() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_seller_credit() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertPack.exceptedSellerCredit = 22500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_seller_position() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertPack.exceptedSellerPosition = 45;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 5, 450, 10, 5);
-    }
-
-    @Test
-    public void decrease_sell_ice_order_price_and_partially_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-    }
-
-    @Test
-    public void decrease_buy_order_price_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_buy_order_price();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test
-    public void decrease_buy_order_price_and_check_buyer_credit() {
-        scenarioGenerator.decrease_buy_order_price();
-        assertPack.exceptedBuyerCredit = 1500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_buy_order_price_and_check_buyer_position() {
-        scenarioGenerator.decrease_buy_order_price();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_buy_order_price_and_check_seller_credit() {
-        scenarioGenerator.decrease_buy_order_price();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_buy_order_price_and_check_seller_position() {
-        scenarioGenerator.decrease_buy_order_price();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_buy_order_price_and_check_order_in_queue() {
-        scenarioGenerator.decrease_buy_order_price();
-        assertPack.assertOrderInQueue(Side.BUY, 3, 3, 10, 150);
-    }
-
-    @Test
-    public void decrease_buy_ice_order_price_and_check_match_result() {
-        MatchResult res = scenarioGenerator.decrease_buy_ice_order_price();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void decrease_buy_ice_order_price_and_check_buyer_credit() {
-        scenarioGenerator.decrease_buy_ice_order_price();
-        assertPack.exceptedBuyerCredit = 13500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_price_and_check_buyer_position() {
-        scenarioGenerator.decrease_buy_ice_order_price();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_price_and_check_seller_credit() {
-        scenarioGenerator.decrease_buy_ice_order_price();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_price_and_check_seller_position() {
-        scenarioGenerator.decrease_buy_ice_order_price();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void decrease_buy_ice_order_price_and_check_order_in_queue() {
-        scenarioGenerator.decrease_buy_ice_order_price();
-        assertPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 200, 10, 10);
-    }
-
-    @Test
-    public void increase_sell_order_price_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_sell_order_price();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_sell_order_price_and_check_buyer_credit() {
-        scenarioGenerator.increase_sell_order_price();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_sell_order_price_and_check_buyer_position() {
-        scenarioGenerator.increase_sell_order_price();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_sell_order_price_and_check_seller_credit() {
-        scenarioGenerator.increase_sell_order_price();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_sell_order_price_and_check_seller_position() {
-        scenarioGenerator.increase_sell_order_price();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_sell_order_price_and_check_order_in_queue() {
-        scenarioGenerator.increase_sell_order_price();
-        assertPack.assertOrderInQueue(Side.SELL, 3, 3, 10, 950);
-    }
-
-    @Test
-    public void increase_sell_ice_order_price_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_sell_ice_order_price();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_sell_ice_order_price_and_check_buyer_credit() {
-        scenarioGenerator.increase_sell_ice_order_price();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_sell_ice_order_price_and_check_buyer_position() {
-        scenarioGenerator.increase_sell_ice_order_price();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_sell_ice_order_price_and_check_seller_credit() {
-        scenarioGenerator.increase_sell_ice_order_price();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_sell_ice_order_price_and_check_seller_position() {
-        scenarioGenerator.increase_sell_ice_order_price();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_sell_ice_order_price_and_check_order_in_queue() {
-        scenarioGenerator.increase_sell_ice_order_price();
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1100, 10, 10);
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens();
-        assertPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 250);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 550, 10, 10);
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_order_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertPack.exceptedBuyerCredit = 1000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 10;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertPack.exceptedSellerCredit = 6000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertPack.exceptedSellerPosition = 75;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
-    }
-
-    @Test
-    public void increase_buy_order_price_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.increase_buy_order_price_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 100);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertPack.exceptedSellerCredit = 35000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertPack.exceptedSellerPosition = 40;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 40, 1000, 10, 5);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isTrue();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-    }
-    
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertPack.exceptedBuyerPosition = 20;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertPack.exceptedSellerCredit = 13000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertPack.exceptedSellerPosition = 65;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 2)).isFalse();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
-    }
-
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 3, 5, 700);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertPack.exceptedBuyerCredit = 22500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertPack.exceptedSellerCredit = 75000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertPack.exceptedSellerPosition = 0;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_partially_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 5, 1000, 10, 5);
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertPack.exceptedBuyerCredit = 13500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_sell_side_in_queue() {
-        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isTrue();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buy_side_in_queue() {
-        scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_bueyr_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertPack.exceptedBuyerCredit = 57000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buyer_position() {
-        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_seller_credit() {
-        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_seller_position() {
-        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
-        assertPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-    }
-
-    @Test
-    public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
-    }
-
-    // TODO
-    // add some test about updating a ice order that its display is not equal to its quantity
-    
-    public void add_sell_order_no_trades_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_no_trades_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_order_no_trades_happens_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_no_trades_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_no_trades_happens_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_no_trades_happens();
-        assertPack.assertBuyerPosition();
-    }
-    
-    @Test
-    public void add_sell_order_no_trades_happens_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_no_trades_happens();
-        assertPack.assertSellerCredit();
-    }
-    
-    @Test
-    public void add_sell_order_no_trades_happens_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_no_trades_happens();
-        assertPack.exceptedSellerPosition = 100;
-        assertPack.assertSellerPosition();
-    }
-    
-    @Test
-    public void add_sell_order_no_trades_happens_and_check_order_in_queue() {
-        scenarioGenerator.add_sell_order_no_trades_happens();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 1, 6, 15, 650);
-        assertPack.assertOrderInQueue(Side.SELL, 2, 2, 10, 700);
-    }
-    
-    @Test
-    public void add_sell_ice_order_no_trades_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_no_trades_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_ice_order_no_trades_happens_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_no_trades_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_no_trades_happens_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_no_trades_happens();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_no_trades_happens_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_no_trades_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_no_trades_happens_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_no_trades_happens();
-        assertPack.exceptedSellerPosition = 105;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_no_trades_happens_and_check_order_in_queue() {
-        scenarioGenerator.add_sell_ice_order_no_trades_happens();
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
-        assertPack.assertOrderInQueue(Side.SELL, 5, 6, 20, 1000, 7, 7);
-    }
-
-    @Test
-    public void add_sell_order_and_not_enough_position_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_and_not_enough_position();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-    }
-
-    @Test
-    public void add_sell_order_and_not_enough_position_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_and_not_enough_position();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_and_not_enough_position_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_and_not_enough_position();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_and_not_enough_position_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_and_not_enough_position();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_and_not_enough_position_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_and_not_enough_position();
-        assertPack.exceptedSellerPosition = 85;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_and_not_enough_position_and_check_order_in_queue() {
-        scenarioGenerator.add_sell_order_and_not_enough_position();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_not_enough_position_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-    }
-
-    @Test
-    public void add_sell_ice_order_and_not_enough_position_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_not_enough_position_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_not_enough_position_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_not_enough_position_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_not_enough_position_and_check_order_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_not_enough_position();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6));
-    }
-
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 13;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_and_completely_traded();
-        assertPack.exceptedSellerCredit = 6500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_and_completely_traded();
-        assertPack.exceptedSellerPosition = 85;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_and_completely_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
-    }
-
-    @Test
-    public void add_sell_order_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 32, 500, 10, 7);
-    }
-
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 67;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertPack.exceptedSellerCredit = 29900;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 2, 8, 200);
-    }
-
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_and_partially_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_and_partially_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_and_partially_traded();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_and_partially_traded();
-        assertPack.exceptedSellerCredit = 22500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_and_partially_traded();
-        assertPack.exceptedSellerPosition = 100;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 7, 15, 500);
-    }
-
-    @Test
-    public void add_sell_order_and_partially_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_and_partially_traded();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedBuyerPosition = 55;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedSellerCredit = 26500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedSellerPosition = 90;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 3, 3);
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.exceptedBuyerPosition = 55;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.exceptedSellerCredit = 26500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.exceptedSellerPosition = 90;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 7, 5);
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.exceptedSellerCredit = 32500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.exceptedSellerPosition = 85;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.exceptedSellerCredit = 32500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.exceptedSellerCredit = 32500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.exceptedSellerPosition = 120;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 35, 100);
-    }
-
-    @Test
-    public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_check() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.exceptedSellerCredit = 32500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.exceptedSellerPosition = 100;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 15, 100, 10, 10);
-    }
-
-    @Test
-    public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
-        assertThat(orderBook.getBuyQueue().size()).isZero();
-    }
-
-    @Test 
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test 
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerCredit = 22500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerPosition = 90;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 5, 10, 500);
-    }
-    
-    @Test
-    public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-    }
-
-    @Test 
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test 
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedBuyerPosition = 45;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerCredit = 22500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerPosition = 90;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 6, 5, 10, 500, 10, 5);
-    }
-
-    @Test
-    public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-    }
-
-    @Test 
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
-    }    
-    
-    @Test 
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertPack.assertSellerCredit();
-    }
-    
-    @Test
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertPack.exceptedSellerPosition = 145;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
-    }
-
-    @Test
-    public void add_sell_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test 
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
-    }
-    
-    @Test 
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertPack.exceptedSellerPosition = 185;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-    }
-
-    @Test
-    public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
-        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
-    }
-
-    @Test 
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test 
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
-        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedBuyerPosition = 50;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
-        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedSellerCredit = 24500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
-        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
-    }
-
-    @Test
-    public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 5, 400);
-    }
-
-    @Test 
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test 
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
-        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
-        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedBuyerPosition = 50;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
-        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedSellerCredit = 24500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
-        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
-    }
-
-    @Test
-    public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 5, 400);
-    }
-
-    @Test
-    public void add_buy_order_no_trades_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_no_trades_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_order_no_trades_happens_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_no_trades_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_no_trades_happens_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_no_trades_happens();
-        assertPack.exceptedBuyerPosition = 0;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_no_trades_happens_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_no_trades_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_no_trades_happens_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_no_trades_happens();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_no_trades_happens_and_check_order_in_queue() {
-        scenarioGenerator.add_buy_order_no_trades_happens();
-        assertPack.assertOrderInQueue(Side.BUY, 4, 2, 10, 200);
-        assertPack.assertOrderInQueue(Side.BUY, 3, 6, 22, 300);
-        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
-    }
-
-    @Test
-    public void add_buy_ice_order_no_trades_happens_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_no_trades_happens();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_ice_order_no_trades_happens_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_no_trades_happens();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_no_trades_happens_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_no_trades_happens();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_no_trades_happens_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_no_trades_happens();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_no_trades_happens_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_no_trades_happens();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_no_trades_happens_and_check_order_in_queue() {
-        scenarioGenerator.add_buy_ice_order_no_trades_happens();
-        assertPack.assertOrderInQueue(Side.BUY, 2, 4, 10, 400);
-        assertPack.assertOrderInQueue(Side.BUY, 1, 6, 5, 450, 1, 1);
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test
-    public void add_buy_order_but_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_but_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-    
-    @Test
-    public void add_buy_order_but_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_but_not_enough_credit();
-        assertPack.exceptedBuyerCredit = 6000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_but_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_but_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_but_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_but_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_but_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_but_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_but_not_enough_credit_and_check_order_in_queue() {
-        scenarioGenerator.add_buy_order_but_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
-        assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
-    }
-
-    @Test
-    public void add_buy_ice_order_but_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-    
-    @Test
-    public void add_buy_ice_order_but_not_enough_credit_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-        assertPack.exceptedBuyerCredit = 2000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_but_not_enough_credit_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_but_not_enough_credit_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_but_not_enough_credit_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_but_not_enough_credit_and_check_order_in_queue() {
-        scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
-        assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 13;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_and_completely_traded();
-        assertPack.exceptedSellerCredit = 8100;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_and_completely_traded();
-        assertPack.exceptedSellerPosition = 72;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 7, 700);
-    }
-
-    @Test
-    public void add_buy_order_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
-    }
-
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_matc_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertPack.exceptedBuyerPosition = 52;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertPack.exceptedSellerCredit = 42000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertPack.exceptedSellerPosition = 33;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 33, 1000, 10, 8);
-    }
-
-    @Test
-    public void add_buy_ice_order_and_completely_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_and_completely_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
-    }
-    
-    public void add_buy_order_and_partially_traded_and_check_match_check() {
-        MatchResult res = scenarioGenerator.add_buy_order_and_partially_traded();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    public void add_buy_order_and_partially_traded_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_and_partially_traded();
-        assertPack.assertBuyerCredit();
-    }
-
-    public void add_buy_order_and_partially_traded_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_and_partially_traded();
-        assertPack.exceptedBuyerPosition = 10;
-        assertPack.assertBuyerPosition();
-    }
-
-    public void add_buy_order_and_partially_traded_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_and_partially_traded();
-        assertPack.exceptedSellerCredit = 6000;
-        assertPack.assertSellerCredit();
-    }
-
-    public void add_buy_order_and_partially_traded_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_and_partially_traded();
-        assertPack.exceptedSellerPosition = 75;
-        assertPack.assertSellerPosition();
-    }
-
-    public void add_buy_order_and_partially_traded_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
-    }
-
-    public void add_buy_order_and_partially_traded_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_and_partially_traded();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600);
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_check() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.assertBuyerCredit();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedBuyerPosition = 10;
-        assertPack.assertBuyerPosition();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedSellerCredit = 6000;
-        assertPack.assertSellerCredit();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedSellerPosition = 75;
-        assertPack.assertSellerPosition();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600, 2, 2);
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_check() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.assertBuyerCredit();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.exceptedBuyerPosition = 10;
-        assertPack.assertBuyerPosition();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.exceptedSellerCredit = 6000;
-        assertPack.assertSellerCredit();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.exceptedSellerPosition = 75;
-        assertPack.assertSellerPosition();
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
-    }
-
-    public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 4, 600, 5, 4);
-    }
-    
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_match_check() {
-        MatchResult res = scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertPack.exceptedBuyerCredit = 9000;
-        assertPack.assertBuyerCredit();
-    }
-
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertPack.assertSellerCredit();
-    }
-
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertPack.assertSellerPosition();
-    }
-
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-    }
-
-    public void add_buy_order_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_match_check() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertPack.exceptedBuyerCredit = 78000;
-        assertPack.assertBuyerCredit();
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertPack.assertSellerCredit();
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertPack.assertSellerPosition();
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
-        assertPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
-        assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000);
-    }
-
-    public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertPack.exceptedSellerCredit = 75000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertPack.exceptedSellerPosition = 0;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertPack.exceptedSellerCredit = 75000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertPack.exceptedSellerPosition = 0;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedSellerCredit = 75000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedSellerPosition = 0;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000);
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedBuyerPosition = 85;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedSellerCredit = 75000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedSellerPosition = 0;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertThat(orderBook.getSellQueue().size()).isZero();
-    }
-
-    @Test
-    public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000, 10, 10);
-    }
-
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedBuyerPosition = 20;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerCredit = 13000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerPosition = 65;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
-    }
-
-    @Test
-    public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 2, 17, 700);
-    }
-
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedBuyerPosition = 20;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerCredit = 13000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.exceptedSellerPosition = 65;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
-    }
-
-    @Test
-    public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 6, 12, 20, 700, 10, 10);
-    }
-
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
-    }
-    
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertPack.exceptedBuyerCredit = 36000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-    }
-
-    @Test
-    public void add_buy_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
-    }
-    
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertPack.exceptedBuyerCredit = 80000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
-        assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
-        assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);    }
-
-    @Test
-    public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-    }
-
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-    
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedBuyerCredit = 10000;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
-        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedBuyerPosition = 40;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
-        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedSellerCredit = 30000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
-        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedSellerPosition = 45;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 45, 1000, 10, 10);
-    }
-
-    @Test
-    public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-    }
-
-    @Test 
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
-    }
-
-    @Test 
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
-        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
-        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedBuyerPosition = 22;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
-        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedSellerCredit = 14600;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
-        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.exceptedSellerPosition = 63;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 3, 8, 800);
-    }
-
-    @Test
-    public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
-        scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
-        assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
-    }
-
-    // FIXME: These three have race condition problem
-    // @Test
-    // public void add_two_buy_orders_with_same_price_and_check_orders_in_queue() {
-    //     scenarioGenerator.add_two_buy_orders_with_same_price();
-    //     assertPack.assertOrderInQueue(Side.BUY, 2, 7, 10, 300);
-    //     assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300);
-    //     assertPack.assertOrderInQueue(Side.BUY, 4, 3, 10, 300);
-    // }
-
-    // @Test
-    // public void add_two_buy_ice_orders_with_same_price_and_check_orders_in_queue() {
-        //     scenarioGenerator.add_two_buy_ice_orders_with_same_price();
-        //     assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
-        //     assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300, 10, 10);
-        //     assertPack.assertOrderInQueue(Side.BUY, 4, 7, 10, 300, 10, 10);
-    // }
-
-    // @Test
-    // public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_match_result() {
-        //     MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
-        //     assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
-        // }
-        
-    @Test
-    public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_orders_in_queue() {
-        scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
-        assertPack.assertOrderInQueue(Side.BUY, 2, 7, 10, 300);
-        assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300);
-        assertPack.assertOrderInQueue(Side.BUY, 4, 3, 10, 300);
-    }
-    
-    @Test
-    public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
-    }
-    
-    // FIXME: This has race condition problem
-    // @Test
-    // public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_orders_in_queue() {
-    //     scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
-    //     assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
-    //     assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300, 10, 10);
-    //     assertPack.assertOrderInQueue(Side.BUY, 4, 7, 10, 300, 10, 10);
-    // }
-
-    @Test
-    public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_last_trade_price() {
-        scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
-        assertPack.exceptedLastTradePrice = 1000;
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_last_trade_price() {
-        scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
-        assertPack.exceptedLastTradePrice = 400;
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void decrease_sell_order_price_and_completely_traded_and_check_last_trade_price() {
-        scenarioGenerator.decrease_sell_order_price_and_completely_traded();
-        assertPack.exceptedLastTradePrice = 500;
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void increase_buy_order_price_and_partially_traded_and_check_last_trade_price() {
-        scenarioGenerator.increase_buy_order_price_and_partially_traded();
-        assertPack.exceptedLastTradePrice = 700;
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void new_sell_stop_limit_order_and_active_at_the_first_and_check_match_results() {
-        List<MatchResult> results = scenarioGenerator.new_sell_stop_limit_order_and_active_at_the_first();
-        assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-        assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
-    }
-
-    @Test
-    public void new_sell_stop_limit_order_and_active_at_the_first_and_check_last_trade_price() {
-        scenarioGenerator.new_sell_stop_limit_order_and_active_at_the_first();
-        assertPack.exceptedLastTradePrice = 500;
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void new_buy_stop_limit_order_and_active_at_the_first_and_check_match_results() {
-        List<MatchResult> results = scenarioGenerator.new_buy_stop_limit_order_and_active_at_the_first();
-        assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-        assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
-    }
-
-    @Test
-    public void new_buy_stop_limit_order_and_active_at_the_first_and_check_last_trade_price() {
-        scenarioGenerator.new_buy_stop_limit_order_and_active_at_the_first();
-        assertPack.exceptedLastTradePrice = 600;
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void add_sell_stop_limit_order_but_not_enough_position_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_sell_stop_limit_order_but_not_enough_position();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-    }
-
-    @Test
-    public void add_buy_stop_limit_order_but_not_enough_credit_and_check_match_result() {
-        MatchResult res = scenarioGenerator.add_buy_stop_limit_order_but_not_enough_credit();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_buyer_credit() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_buyer_position() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_seller_credit() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.assertSellerCredit();
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_seller_position() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.exceptedSellerPosition = 130;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_last_trade_price() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.assertLastTradePrice();
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_stop_limit_sell_queue() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 500);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 7, 15, 300, 400);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 2, 8, 15, 200, 300);
-    }
-
-    @Test
-    public void add_three_stop_limit_order_both_buy_and_sell_and_check_stop_limit_buy_queue() {
-        scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 700, 600);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 7, 15, 800, 700);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 2, 8, 15, 900, 800);
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_match_results() {
-        List<MatchResult> results = scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 9, 5);
-        assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
-        assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 1);
-        assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
-    }
-    
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_buyer_credit() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_buyer_position() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.exceptedBuyerPosition = 75;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_seller_credit() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.exceptedSellerCredit = 31500;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_seller_position() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.exceptedSellerPosition = 100;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_sell_queue() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 8, 5, 200);
-        assertPack.assertOrderInQueue(Side.SELL, 1, 7, 5, 300);
-        assertPack.assertOrderInQueue(Side.SELL, 2, 6, 5, 400);
-        assertPack.assertOrderInQueue(Side.SELL, 3, 1, 10, 600);
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_buy_queue() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 1, 10, 100);
-        assertThat(orderBook.getBuyQueue().size()).isEqualTo(1);
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_stop_limit_sell_queue() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertThat(orderBook.getStopLimitOrderSellQueue().isEmpty()).isTrue();
-    }
-
-    @Test 
-    public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_stop_limit_buy_queue() {
-        scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 700, 600);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 7, 15, 800, 700);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 2, 8, 15, 900, 800);
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_match_results() {
-        List<MatchResult> results = scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 9, 1);
-        assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
-        assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 1);
-        assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
-    }
-    
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_buyer_credit() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_buyer_position() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.exceptedBuyerPosition = 40;
-        assertPack.assertBuyerPosition();
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_seller_credit() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.exceptedSellerCredit = 30000;
-        assertPack.assertSellerCredit();
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_seller_position() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.exceptedSellerPosition = 90;
-        assertPack.assertSellerPosition();
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_sell_queue() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 5, 45, 1000, 10, 10);
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_buy_queue() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 8, 5, 900);
-        assertPack.assertOrderInQueue(Side.BUY, 1, 7, 5, 800);
-        assertPack.assertOrderInQueue(Side.BUY, 2, 6, 5, 700);
-        assertPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 500, 10, 10);        
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_stop_limit_sell_queue() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 500);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 7, 15, 300, 400);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 2, 8, 15, 200, 300);
-    }
-
-    @Test 
-    public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_stop_limit_buy_queue() {
-        scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
-        assertThat(orderBook.getStopLimitOrderBuyQueue().isEmpty()).isTrue(); 
-    }
-
-    @Test
-    public void new_sell_order_activate_one_sell_stop_limit_order_and_check_buy_queue() {
-        scenarioGenerator.new_sell_order_activate_one_sell_stop_limit_order();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
-    }
-
-    @Test
-    public void new_sell_order_activate_one_sell_stop_limit_order_and_check_stop_limit_sell_queue() {
-        scenarioGenerator.new_sell_order_activate_one_sell_stop_limit_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 7, 15, 300, 400);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 8, 15, 200, 300);
-    }
-
-    @Test
-    public void new_buy_order_activate_one_buy_stop_limit_order_and_check_sell_queue() {
-        scenarioGenerator.new_buy_order_activate_one_buy_stop_limit_order();
-        assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
-    }
-
-    @Test
-    public void new_buy_order_activate_one_buy_stop_limit_order_and_check_stop_limit_buy_queue() {
-        scenarioGenerator.new_buy_order_activate_one_buy_stop_limit_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 7, 15, 800, 700);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 8, 15, 900, 800);
-    }
-
-    @Test
-    public void decrease_price_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
-        scenarioGenerator.decrease_price_stop_limit_sell_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 350, 500);
-    }
-
-    @Test
-    public void increase_price_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
-        scenarioGenerator.increase_price_stop_limit_sell_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 450, 500);
-    }
-
-    @Test
-    public void decrease_quantity_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
-        scenarioGenerator.decrease_quantity_stop_limit_sell_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 10, 400, 500);
-    }
-
-    @Test
-    public void increase_quantity_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
-        scenarioGenerator.increase_quantity_stop_limit_sell_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 20, 400, 500);
-    }
-
-    @Test
-    public void increase_quantity_stop_limit_sell_order_and_not_enough_position_and_check_match_result() {
-        MatchResult res = scenarioGenerator.increase_quantity_stop_limit_sell_order_and_not_enough_position();
-        assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
-    }
-
-    @Test
-    public void decrease_stop_price_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
-        scenarioGenerator.decrease_stop_price_stop_limit_sell_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 7, 15, 300, 400);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 6, 15, 400, 350);
-    }
-
-    @Test
-    public void increase_stop_price_stop_limit_sell_order_and_not_activated_and_check_order_in_stop_limit_sell_queue() {
-        scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_not_activated();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 525);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 7, 15, 300, 400);
-    }
-
-    @Test
-    public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_match_results() {
-        List<MatchResult> results = scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
-        assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-        assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 2);
-    }
-
-    @Test
-    public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_stop_limit_sell_queue() {
-        scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 7, 15, 300, 400);
-    }
-
-    @Test
-    public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_buy_queue() {
-        scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
-        assertPack.assertOrderInQueue(Side.BUY, 0, 5, 30, 500, 10, 5);
-    }
-
-    @Test
-    public void decrease_price_stop_limit_buy_order_and_check_order_in_stop_limit_buy_queue() {
-        scenarioGenerator.decrease_price_stop_limit_buy_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 600, 600);
-    }
-
-    @Test
-    public void decrease_price_stop_limit_buy_order_and_check_buyer_credit() {
-        scenarioGenerator.decrease_price_stop_limit_buy_order();
-        assertPack.exceptedBuyerCredit = 1500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_price_stop_limit_buy_order_and_check_order_in_stop_limit_buy_queue() {
-        scenarioGenerator.increase_price_stop_limit_buy_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 750, 600);
-    }
-
-    @Test
-    public void increase_price_stop_limit_buy_order_and_check_buyer_credit() {
-        scenarioGenerator.increase_price_stop_limit_buy_order();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_price_stop_limit_buy_order_and_not_enough_creadit() {
-        MatchResult result = scenarioGenerator.increase_price_stop_limit_buy_order_and_not_enough_credit();
-        assertThat(result.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void decrease_quantity_stop_limit_buy_order_and_check_order_in_stop_limit_buy_queue() {
-        scenarioGenerator.decrease_quantity_stop_limit_buy_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 10, 700, 600);
-    }
-
-    @Test
-    public void decrease_quantity_stop_limit_buy_order_and_check_buyer_credit() {
-        scenarioGenerator.decrease_quantity_stop_limit_buy_order();
-        assertPack.exceptedBuyerCredit = 3500;
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_quantity_stop_limit_buy_order_and_check_in_stop_limit_buy_queue() {
-        scenarioGenerator.increase_quantity_stop_limit_buy_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 20, 700, 600);
-    }
-
-    @Test
-    public void increase_quantity_stop_limit_buy_order_and_check_buyer_credit() {
-        scenarioGenerator.increase_quantity_stop_limit_buy_order();
-        assertPack.assertBuyerCredit();
-    }
-
-    @Test
-    public void increase_quantity_stop_limit_buy_order_and_not_enough_credit_and_check_match_result() {
-        MatchResult result = scenarioGenerator.increase_quantity_stop_limit_buy_order_and_not_enough_credit();
-        assertThat(result.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
-    }
-
-    @Test
-    public void decrease_stop_price_stop_limit_buy_order_and_not_activated_and_check_in_stop_limit_buy_order() {
-        scenarioGenerator.decrease_stop_price_stop_limit_buy_order_and_not_activated();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 7, 15, 800, 575);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 6, 15, 700, 600);
-    }
-
-    @Test
-    public void decrease_stop_price_stop_limit_buy_order_and_activated_and_check_match_results() {
-        List<MatchResult> results = scenarioGenerator.decrease_stop_price_stop_limit_buy_order_and_activated();
-        assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
-        assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 2);
-        assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 2);
-        assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
-    }
-
-    @Test
-    public void increase_stop_price_stop_limit_buy_order_and_check_order_in_stop_order_buy_queue() {
-        scenarioGenerator.increase_stop_price_stop_limit_buy_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 7, 15, 800, 700);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 6, 15, 700, 750);
-    }
-
-    @Test
-    public void delete_stop_limit_sell_order_and_check_order_in_stop_order_sell_queue() {
-        scenarioGenerator.delete_stop_limit_sell_order();
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 500);
-        assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 8, 15, 200, 300);
-    }
-    
-    @Test
-    public void delete_stop_limit_buy_order_and_check_order_in_stop_order_buy_queue() {
-        scenarioGenerator.delete_stop_limit_buy_order();
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 700, 600);
-        assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 8, 15, 900, 800);
-    }
-
-    @Test
-    public void delete_stop_limit_buy_order_and_check_order_buyer_credit() {
-        scenarioGenerator.delete_stop_limit_buy_order();
-        assertPack.exceptedBuyerCredit = 12000;
-        assertPack.assertBuyerCredit();
-    }
+
+	private Security security;
+	private Broker sellerBroker;
+	private Broker buyerBroker;
+	private Shareholder sellerShareholder;
+	private Shareholder buyerShareholder;
+	private OrderBook orderBook;
+	private List<Order> orders;
+	private AssertingPack assertPack;
+	private ScenarioGenerator scenarioGenerator;
+	LocalDateTime entryTime = LocalDateTime.of(2001, 9, 11, 2, 14, 0);
+
+	@Autowired
+	private Matcher matcher;
+
+	// --------------------------------------------------------------------------------
+	// Helper classes
+	// --------------------------------------------------------------------------------
+
+	// Helper class to assert the state of the system
+	private class AssertingPack {
+
+		private long exceptedSellerCredit;
+		private long exceptedBuyerCredit;
+		private Integer exceptedSellerPosition;
+		private Integer exceptedBuyerPosition;
+		private Integer exceptedLastTradePrice;
+		private LinkedList<Order> sellQueue;
+		private LinkedList<Order> buyQueue;
+		private LinkedList<Order> sellStopLimitQueue;
+		private LinkedList<Order> buyStopLimitQueue;
+
+		private AssertingPack() {
+			exceptedSellerCredit = SecurityTest.this.sellerBroker.getCredit();
+			exceptedBuyerCredit = SecurityTest.this.buyerBroker.getCredit();
+			exceptedSellerPosition = SecurityTest.this.sellerShareholder.getPositionBySecurity(security);
+			exceptedBuyerPosition = SecurityTest.this.buyerShareholder.getPositionBySecurity(security);
+			exceptedLastTradePrice = SecurityTest.this.security.getLastTradePrice();
+			sellQueue = SecurityTest.this.orderBook.getSellQueue();
+			buyQueue = SecurityTest.this.orderBook.getBuyQueue();
+			sellStopLimitQueue = SecurityTest.this.orderBook.getStopLimitOrderSellQueue();
+			buyStopLimitQueue = SecurityTest.this.orderBook.getStopLimitOrderBuyQueue();
+		}
+
+		private void assertSellerCredit() {
+			assertThat(SecurityTest.this.sellerBroker.getCredit()).isEqualTo(exceptedSellerCredit);
+		}
+
+		private void assertBuyerCredit() {
+			assertThat(SecurityTest.this.buyerBroker.getCredit()).isEqualTo(exceptedBuyerCredit);
+		}
+
+		private void assertSellerPosition() {
+			assertThat(SecurityTest.this.sellerShareholder.getPositionBySecurity(security))
+				.isEqualTo(exceptedSellerPosition);
+		}
+
+		private void assertBuyerPosition() {
+			assertThat(SecurityTest.this.buyerShareholder.getPositionBySecurity(security))
+				.isEqualTo(exceptedBuyerPosition);
+		}
+
+		private void assertLastTradePrice() {
+			assertThat(SecurityTest.this.security.getLastTradePrice()).isEqualTo(exceptedLastTradePrice);
+		}
+
+		private void assertOrderInStopLimitQueue(
+			Side side,
+			int idx,
+			long orderId,
+			int quantity,
+			int price,
+			int stopPrice
+		) {
+			StopLimitOrder order = (StopLimitOrder) (
+				(side == Side.BUY) ? buyStopLimitQueue.get(idx) : sellStopLimitQueue.get(idx)
+			);
+			long actualId = order.getOrderId();
+			int actualQuantity = order.getTotalQuantity();
+			int actualPrice = order.getPrice();
+			int actualStopPrice = order.getStopPrice();
+
+			assertThat(actualId).isEqualTo(orderId);
+			assertThat(actualQuantity).isEqualTo(quantity);
+			assertThat(actualPrice).isEqualTo(price);
+			assertThat(actualStopPrice).isEqualTo(stopPrice);
+		}
+
+		private void assertMatchResult(MatchResult result, MatchingOutcome outcome, long orderId, int numOfTrades) {
+			MatchingOutcome actualOutcome = result.outcome();
+			long actualOrderId = result.remainder().getOrderId();
+			int actualNumOfTrades = result.trades().size();
+
+			assertThat(actualOutcome).isEqualTo(outcome);
+			assertThat(actualOrderId).isEqualTo(orderId);
+			assertThat(actualNumOfTrades).isEqualTo(numOfTrades);
+		}
+
+		private void assertOrderInQueue(
+			Side side,
+			int idx,
+			long orderId,
+			int quantity,
+			int minExecutionQuantity,
+			int price
+		) {
+			Order order = (side == Side.BUY) ? buyQueue.get(idx) : sellQueue.get(idx);
+			long actualId = order.getOrderId();
+			int actualQuantity = order.getTotalQuantity();
+			int actualPrice = order.getPrice();
+			int actualMinExecutionQuantity = order.getMinimumExecutionQuantity();
+
+			assertThat(actualId).isEqualTo(orderId);
+			assertThat(actualQuantity).isEqualTo(quantity);
+			assertThat(actualMinExecutionQuantity).isEqualTo(minExecutionQuantity);
+			assertThat(actualPrice).isEqualTo(price);
+		}
+
+		private void assertOrderInQueue(Side side, int idx, long orderId, int quantity, int price) {
+			assertOrderInQueue(side, idx, orderId, quantity, 0, price);
+		}
+
+		private void assertOrderInQueue(
+			Side side,
+			int idx,
+			long orderId,
+			int quantity,
+			int minExecutionQuantity,
+			int price,
+			int peakSize,
+			int displayedQuantity
+		) {
+			assertOrderInQueue(side, idx, orderId, quantity, minExecutionQuantity, price);
+			Order order = (side == Side.BUY) ? buyQueue.get(idx) : sellQueue.get(idx);
+			IcebergOrder iceOrder = (IcebergOrder) order;
+			int actualPeakSize = iceOrder.getPeakSize();
+			int actualDisplayedQuantity = iceOrder.getDisplayedQuantity();
+
+			assertThat(actualPeakSize).isEqualTo(peakSize);
+			assertThat(actualDisplayedQuantity).isEqualTo(displayedQuantity);
+		}
+
+		private void assertOrderInQueue(
+			Side side,
+			int idx,
+			long orderId,
+			int quantity,
+			int price,
+			int peakSize,
+			int displayedQuantity
+		) {
+			assertOrderInQueue(side, idx, orderId, quantity, 0, price, peakSize, displayedQuantity);
+		}
+	}
+
+	// Helper class to generate scenarios
+	private class ScenarioGenerator {
+
+		public void delete_sell_order() {
+			security.deleteOrder(Side.SELL, 2);
+		}
+
+		public void delete_sell_ice_order() {
+			security.deleteOrder(Side.SELL, 5);
+		}
+
+		public void delete_buy_order() {
+			security.deleteOrder(Side.BUY, 3);
+		}
+
+		public void delete_buy_ice_order() {
+			security.deleteOrder(Side.BUY, 5);
+		}
+
+		public void delete_non_existing_sell_order() {
+			security.deleteOrder(Side.SELL, 6);
+		}
+
+		public void delete_non_existing_buy_order() {
+			security.deleteOrder(Side.BUY, 8);
+		}
+
+		public MatchResult decrease_sell_order_quantity() {
+			Order order = new Order(1, security, Side.SELL, 4, 600, sellerBroker, sellerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_ice_order_quantity() {
+			IcebergOrder order = new IcebergOrder(
+				5,
+				security,
+				Side.SELL,
+				30,
+				1000,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_buy_order_quantity() {
+			Order order = new Order(3, security, Side.BUY, 7, 300, buyerBroker, buyerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_buy_ice_order_quantity() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 7, 500, buyerBroker, buyerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_sell_order_quantity() {
+			Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 5);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_sell_ice_order_quantity() {
+			IcebergOrder order = new IcebergOrder(
+				5,
+				security,
+				Side.SELL,
+				60,
+				1000,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			sellerShareholder.incPosition(security, 15);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_sell_order_quantity_but_not_enough_position() {
+			Order order = new Order(2, security, Side.SELL, 15, 700, sellerBroker, sellerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_sell_ice_order_quantity_but_not_enough_position() {
+			IcebergOrder order = new IcebergOrder(
+				5,
+				security,
+				Side.SELL,
+				60,
+				1000,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_quantity() {
+			Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(6000);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_quantity() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(7500);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_quantity_but_not_enough_credit() {
+			Order order = new Order(4, security, Side.BUY, 25, 400, buyerBroker, buyerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_quantity_but_not_enough_credit() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 60, 500, buyerBroker, buyerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_order_price_no_trading_happens() {
+			Order order = new Order(3, security, Side.SELL, 10, 650, sellerBroker, sellerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_ice_order_price_no_trading_happens() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 600, sellerBroker, sellerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_order_price_and_completely_traded() {
+			Order order = new Order(3, security, Side.SELL, 10, 450, sellerBroker, sellerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_ice_order_price_and_completely_traded() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 450, sellerBroker, sellerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_order_price_and_partially_traded() {
+			Order order = new Order(3, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 40);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_sell_ice_order_price_and_partially_traded() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 50, 450, sellerBroker, sellerShareholder, 10);
+			sellerShareholder.incPosition(security, 5);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_buy_order_price() {
+			Order order = new Order(3, security, Side.BUY, 10, 150, buyerBroker, buyerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_buy_ice_order_price() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 200, buyerBroker, buyerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_sell_order_price() {
+			Order order = new Order(3, security, Side.SELL, 10, 950, sellerBroker, sellerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_sell_ice_order_price() {
+			IcebergOrder order = new IcebergOrder(
+				5,
+				security,
+				Side.SELL,
+				45,
+				1100,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_price_no_trading_happens() {
+			Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(1500);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_price_no_trading_happens() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(2250);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_price_no_trading_happens_and_not_enough_credit() {
+			Order order = new Order(1, security, Side.BUY, 10, 250, buyerBroker, buyerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 550, buyerBroker, buyerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_price_and_completely_traded() {
+			Order order = new Order(2, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(5000);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_price_and_completely_traded() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 1000, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(12500);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_price_and_partially_traded() {
+			Order order = new Order(3, security, Side.BUY, 25, 700, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(13500);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_price_and_partially_traded() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(80000);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_order_price_and_trade_happens_but_not_enough_credit() {
+			Order order = new Order(3, security, Side.BUY, 25, 800, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(13500);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(57000);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_no_trades_happens() {
+			Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 15);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_no_trades_happens() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
+			sellerShareholder.incPosition(security, 20);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_and_not_enough_position() {
+			Order order = new Order(6, security, Side.SELL, 15, 650, sellerBroker, sellerShareholder);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_and_not_enough_position() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 20, 1000, sellerBroker, sellerShareholder, 7);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_and_completely_traded() {
+			Order order = new Order(8, security, Side.SELL, 13, 400, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 13);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_and_completely_traded() {
+			IcebergOrder order = new IcebergOrder(8, security, Side.SELL, 67, 100, sellerBroker, sellerShareholder, 9);
+			sellerShareholder.incPosition(security, 67);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_and_partially_traded() {
+			Order order = new Order(7, security, Side.SELL, 60, 500, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 60);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
+			IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 3);
+			sellerShareholder.incPosition(security, 60);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
+			IcebergOrder order = new IcebergOrder(7, security, Side.SELL, 60, 400, sellerBroker, sellerShareholder, 7);
+			sellerShareholder.incPosition(security, 60);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_matches_with_all_buyer_queue_and_finished() {
+			Order order = new Order(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 85);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_finished() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.SELL, 85, 100, sellerBroker, sellerShareholder, 10);
+			sellerShareholder.incPosition(security, 85);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_matches_with_all_buyer_queue_and_not_finished() {
+			Order order = new Order(6, security, Side.SELL, 120, 100, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 120);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.SELL,
+				100,
+				100,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			sellerShareholder.incPosition(security, 100);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_with_min_execution_quantity_and_next_go_to_queue() {
+			Order order = new Order(6, security, Side.SELL, 50, 10, 500, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 50);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.SELL,
+				50,
+				10,
+				500,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			sellerShareholder.incPosition(security, 50);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_not_enough_execution_cause_rollback() {
+			Order order = new Order(6, security, Side.SELL, 60, 50, 500, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 60);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_not_enough_execution_cause_rollback() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.SELL,
+				100,
+				70,
+				300,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			sellerShareholder.incPosition(security, 100);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_quantity_is_equal_to_min_execution_quantity() {
+			Order order = new Order(6, security, Side.SELL, 50, 50, 300, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 50);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_ice_order_quantity_is_equal_to_min_execution_quantity() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.SELL,
+				50,
+				50,
+				300,
+				sellerBroker,
+				sellerShareholder,
+				10
+			);
+			sellerShareholder.incPosition(security, 50);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_no_trades_happens() {
+			Order order = new Order(6, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(6600);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_no_trades_happens() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
+			buyerBroker.increaseCreditBy(2250);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_but_not_enough_credit() {
+			Order order = new Order(10, security, Side.BUY, 22, 300, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(6000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_but_not_enough_credit() {
+			IcebergOrder order = new IcebergOrder(10, security, Side.BUY, 5, 450, buyerBroker, buyerShareholder, 1);
+			buyerBroker.increaseCreditBy(2000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_and_completely_traded() {
+			Order order = new Order(8, security, Side.BUY, 13, 700, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(8100);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_and_completely_traded() {
+			IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 52, 1100, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(42000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_and_partially_traded() {
+			Order order = new Order(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(7800);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 13, 600, buyerBroker, buyerShareholder, 2);
+			buyerBroker.increaseCreditBy(7800);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 14, 600, buyerBroker, buyerShareholder, 5);
+			buyerBroker.increaseCreditBy(8400);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_not_enough_credit_causes_rollback() {
+			Order order = new Order(6, security, Side.BUY, 15, 750, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(9000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_not_enough_credit_causes_rollback() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 90, 1000, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(78000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_matches_with_all_seller_queue_and_finished() {
+			Order order = new Order(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(75000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_finished() {
+			IcebergOrder order = new IcebergOrder(6, security, Side.BUY, 85, 1000, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(75000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_matches_with_all_seller_queue_and_not_finished() {
+			Order order = new Order(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(90000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_matches_with_all_seller_queue_and_not_finished() {
+			IcebergOrder order = new IcebergOrder(8, security, Side.BUY, 100, 1000, buyerBroker, buyerShareholder, 10);
+			buyerBroker.increaseCreditBy(90000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_with_min_execution_quantity_and_next_go_to_queue() {
+			Order order = new Order(6, security, Side.BUY, 22, 17, 700, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(14400);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.BUY,
+				32,
+				20,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				10
+			);
+			buyerBroker.increaseCreditBy(21400);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_not_enough_execution_cause_rollback() {
+			Order order = new Order(6, security, Side.BUY, 60, 50, 600, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(36000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_not_enough_execution_cause_rollback() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.BUY,
+				100,
+				70,
+				800,
+				buyerBroker,
+				buyerShareholder,
+				10
+			);
+			buyerBroker.increaseCreditBy(80000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_order_quantity_is_equal_to_min_execution_quantity() {
+			Order order = new Order(6, security, Side.BUY, 40, 40, 1000, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(40000);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_ice_order_quantity_is_equal_to_min_execution_quantity() {
+			IcebergOrder order = new IcebergOrder(
+				6,
+				security,
+				Side.BUY,
+				22,
+				22,
+				800,
+				buyerBroker,
+				buyerShareholder,
+				10
+			);
+			buyerBroker.increaseCreditBy(14600);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public void add_two_buy_orders_with_same_price() {
+			Order order1 = new Order(
+				6,
+				security,
+				Side.BUY,
+				10,
+				0,
+				300,
+				buyerBroker,
+				buyerShareholder,
+				entryTime.minusHours(1)
+			);
+			Order order2 = new Order(
+				7,
+				security,
+				Side.BUY,
+				10,
+				0,
+				300,
+				buyerBroker,
+				buyerShareholder,
+				entryTime.minusHours(2)
+			);
+
+			buyerBroker.increaseCreditBy(6000);
+			security.addNewOrder(order1, matcher);
+			security.addNewOrder(order2, matcher);
+		}
+
+		public void add_two_buy_ice_orders_with_same_price() {
+			IcebergOrder order1 = new IcebergOrder(
+				6,
+				security,
+				Side.BUY,
+				10,
+				0,
+				300,
+				buyerBroker,
+				buyerShareholder,
+				entryTime.plusHours(1),
+				10
+			);
+			IcebergOrder order2 = new IcebergOrder(
+				7,
+				security,
+				Side.BUY,
+				10,
+				0,
+				300,
+				buyerBroker,
+				buyerShareholder,
+				entryTime.plusHours(2),
+				10
+			);
+
+			buyerBroker.increaseCreditBy(6000);
+			security.addNewOrder(order1, matcher);
+			security.addNewOrder(order2, matcher);
+		}
+
+		public void add_two_sell_orders_with_same_price() {
+			Order order1 = new Order(
+				6,
+				security,
+				Side.SELL,
+				10,
+				0,
+				575,
+				sellerBroker,
+				sellerShareholder,
+				entryTime.minusHours(1)
+			);
+			Order order2 = new Order(
+				7,
+				security,
+				Side.SELL,
+				10,
+				0,
+				575,
+				sellerBroker,
+				sellerShareholder,
+				entryTime.minusHours(2)
+			);
+
+			sellerShareholder.incPosition(security, 20);
+			security.addNewOrder(order1, matcher);
+			security.addNewOrder(order2, matcher);
+		}
+
+		public void add_two_sell_ice_orders_with_same_price() {
+			IcebergOrder order1 = new IcebergOrder(
+				6,
+				security,
+				Side.SELL,
+				10,
+				0,
+				575,
+				sellerBroker,
+				sellerShareholder,
+				entryTime.plusHours(1),
+				10
+			);
+			IcebergOrder order2 = new IcebergOrder(
+				7,
+				security,
+				Side.SELL,
+				10,
+				0,
+				575,
+				sellerBroker,
+				sellerShareholder,
+				entryTime.plusHours(2),
+				10
+			);
+
+			sellerShareholder.incPosition(security, 20);
+			security.addNewOrder(order1, matcher);
+			security.addNewOrder(order2, matcher);
+		}
+
+		public MatchResult add_sell_order_causes_rollback_for_buy_orders_with_same_price() {
+			this.add_two_buy_orders_with_same_price();
+			Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 300);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price() {
+			this.add_two_buy_ice_orders_with_same_price();
+			Order order = new Order(9, security, Side.SELL, 300, 300, 0, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 300);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult change_buy_order_price_and_equals_it_with_another_order() {
+			Order order = new Order(4, security, Side.BUY, 10, 200, buyerBroker, buyerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult change_sell_order_price_and_equals_it_with_another_order() {
+			Order order = new Order(4, security, Side.SELL, 10, 700, sellerBroker, sellerShareholder);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult change_buy_ice_order_price_and_equals_it_with_another_order() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.BUY, 45, 300, buyerBroker, buyerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult change_sell_ice_order_price_and_equals_it_with_another_order() {
+			IcebergOrder order = new IcebergOrder(5, security, Side.SELL, 45, 700, sellerBroker, sellerShareholder, 10);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_sell_stop_limit_order_but_not_enough_position() {
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				10,
+				100,
+				sellerBroker,
+				sellerShareholder,
+				525
+			);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult add_buy_stop_limit_order_but_not_enough_credit() {
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				10,
+				100,
+				buyerBroker,
+				buyerShareholder,
+				575
+			);
+			return security.addNewOrder(order, matcher).getFirst();
+		}
+
+		public void add_three_stop_limit_order_both_buy_and_sell() {
+			List<StopLimitOrder> orders = Arrays.asList(
+				new StopLimitOrder(6, security, Side.SELL, 15, 400, sellerBroker, sellerShareholder, 500),
+				new StopLimitOrder(7, security, Side.SELL, 15, 300, sellerBroker, sellerShareholder, 400),
+				new StopLimitOrder(8, security, Side.SELL, 15, 200, sellerBroker, sellerShareholder, 300),
+				new StopLimitOrder(6, security, Side.BUY, 15, 700, buyerBroker, buyerShareholder, 600),
+				new StopLimitOrder(7, security, Side.BUY, 15, 800, buyerBroker, buyerShareholder, 700),
+				new StopLimitOrder(8, security, Side.BUY, 15, 900, buyerBroker, buyerShareholder, 800)
+			);
+			sellerShareholder.incPosition(security, 45);
+			buyerBroker.increaseCreditBy(36000);
+			orders.forEach(order -> security.addNewOrder(order, matcher));
+		}
+
+		public List<MatchResult> new_sell_order_activate_all_sell_stop_limit_orders() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			Order order = new Order(9, security, Side.SELL, 45, 500, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 45);
+			return security.addNewOrder(order, matcher);
+		}
+
+		public List<MatchResult> new_buy_order_activate_all_buy_stop_limit_orders() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			Order order = new Order(9, security, Side.BUY, 10, 600, buyerBroker, buyerShareholder);
+			buyerBroker.increaseCreditBy(6000);
+			return security.addNewOrder(order, matcher);
+		}
+
+		public List<MatchResult> new_sell_order_activate_one_sell_stop_limit_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			Order order = new Order(9, security, Side.SELL, 30, 500, sellerBroker, sellerShareholder);
+			sellerShareholder.incPosition(security, 30);
+			return security.addNewOrder(order, matcher);
+		}
+
+		public List<MatchResult> new_buy_order_activate_one_buy_stop_limit_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			Order order1 = new Order(10, security, Side.SELL, 10, 600, sellerBroker, sellerShareholder);
+			Order order2 = new Order(9, security, Side.BUY, 5, 600, buyerBroker, buyerShareholder);
+			sellerShareholder.incPosition(security, 10);
+			buyerBroker.increaseCreditBy(3000);
+			security.addNewOrder(order1, matcher);
+			return security.addNewOrder(order2, matcher);
+		}
+
+		public List<MatchResult> new_sell_stop_limit_order_and_active_at_the_first() {
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				10,
+				500,
+				sellerBroker,
+				sellerShareholder,
+				600
+			);
+			sellerShareholder.incPosition(security, 10);
+			return security.addNewOrder(order, matcher);
+		}
+
+		public List<MatchResult> new_buy_stop_limit_order_and_active_at_the_first() {
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				3,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				500
+			);
+			buyerBroker.increaseCreditBy(2100);
+			return security.addNewOrder(order, matcher);
+		}
+
+		public MatchResult decrease_price_stop_limit_sell_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				15,
+				350,
+				sellerBroker,
+				sellerShareholder,
+				500
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_price_stop_limit_sell_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				15,
+				450,
+				sellerBroker,
+				sellerShareholder,
+				500
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_quantity_stop_limit_sell_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				10,
+				400,
+				sellerBroker,
+				sellerShareholder,
+				500
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_quantity_stop_limit_sell_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				20,
+				400,
+				sellerBroker,
+				sellerShareholder,
+				500
+			);
+			sellerShareholder.incPosition(security, 5);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_quantity_stop_limit_sell_order_and_not_enough_position() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				20,
+				400,
+				sellerBroker,
+				sellerShareholder,
+				500
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_stop_price_stop_limit_sell_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				15,
+				400,
+				sellerBroker,
+				sellerShareholder,
+				350
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_stop_price_stop_limit_sell_order_and_not_activated() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				15,
+				400,
+				sellerBroker,
+				sellerShareholder,
+				525
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public List<MatchResult> increase_stop_price_stop_limit_sell_order_and_activated() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.SELL,
+				15,
+				400,
+				sellerBroker,
+				sellerShareholder,
+				555
+			);
+			return security.updateOrder(order, matcher);
+		}
+
+		public MatchResult decrease_price_stop_limit_buy_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				15,
+				600,
+				buyerBroker,
+				buyerShareholder,
+				600
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_price_stop_limit_buy_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				15,
+				750,
+				buyerBroker,
+				buyerShareholder,
+				600
+			);
+			buyerBroker.increaseCreditBy(750);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_price_stop_limit_buy_order_and_not_enough_credit() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				15,
+				750,
+				buyerBroker,
+				buyerShareholder,
+				600
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_quantity_stop_limit_buy_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				10,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				600
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_quantity_stop_limit_buy_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				20,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				600
+			);
+			buyerBroker.increaseCreditBy(3500);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult increase_quantity_stop_limit_buy_order_and_not_enough_credit() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				20,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				600
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public MatchResult decrease_stop_price_stop_limit_buy_order_and_not_activated() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				7,
+				security,
+				Side.BUY,
+				15,
+				800,
+				buyerBroker,
+				buyerShareholder,
+				575
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public List<MatchResult> decrease_stop_price_stop_limit_buy_order_and_activated() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				15,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				500
+			);
+			return security.updateOrder(order, matcher);
+		}
+
+		public MatchResult increase_stop_price_stop_limit_buy_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			StopLimitOrder order = new StopLimitOrder(
+				6,
+				security,
+				Side.BUY,
+				15,
+				700,
+				buyerBroker,
+				buyerShareholder,
+				750
+			);
+			return security.updateOrder(order, matcher).getFirst();
+		}
+
+		public void delete_stop_limit_sell_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			security.deleteOrder(Side.SELL, 7);
+		}
+
+		public void delete_stop_limit_buy_order() {
+			this.add_three_stop_limit_order_both_buy_and_sell();
+			security.deleteOrder(Side.BUY, 7);
+		}
+	}
+
+	// --------------------------------------------------------------------------------
+	// Test cases
+	// --------------------------------------------------------------------------------
+
+	@BeforeEach
+	void setup() {
+		security = Security.builder().lastTradePrice(550).build();
+		sellerBroker = Broker.builder().credit(0).build();
+		buyerBroker = Broker.builder().credit(32500).build();
+		sellerShareholder = Shareholder.builder().build();
+		buyerShareholder = Shareholder.builder().build();
+		sellerShareholder.incPosition(security, 85);
+		buyerShareholder.incPosition(security, 0);
+		orderBook = security.getOrderBook();
+		orders =
+			Arrays.asList(
+				new Order(1, security, Side.BUY, 10, 100, buyerBroker, buyerShareholder, entryTime),
+				new Order(2, security, Side.BUY, 10, 200, buyerBroker, buyerShareholder, entryTime),
+				new Order(3, security, Side.BUY, 10, 300, buyerBroker, buyerShareholder, entryTime),
+				new Order(4, security, Side.BUY, 10, 400, buyerBroker, buyerShareholder, entryTime),
+				new IcebergOrder(5, security, Side.BUY, 45, 0, 500, buyerBroker, buyerShareholder, entryTime, 10),
+				new Order(1, security, Side.SELL, 10, 600, sellerBroker, sellerShareholder, entryTime),
+				new Order(2, security, Side.SELL, 10, 700, sellerBroker, sellerShareholder, entryTime),
+				new Order(3, security, Side.SELL, 10, 800, sellerBroker, sellerShareholder, entryTime),
+				new Order(4, security, Side.SELL, 10, 900, sellerBroker, sellerShareholder, entryTime),
+				new IcebergOrder(5, security, Side.SELL, 45, 0, 1000, sellerBroker, sellerShareholder, entryTime, 10)
+			);
+		orders.forEach(order -> orderBook.enqueue(order));
+		assertPack = new AssertingPack();
+		scenarioGenerator = new ScenarioGenerator();
+	}
+
+	@Test
+	public void delete_sell_order_and_check_buyer_credit() {
+		scenarioGenerator.delete_sell_order();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_sell_order_and_check_buyer_position() {
+		scenarioGenerator.delete_sell_order();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_sell_order_and_check_seller_position() {
+		scenarioGenerator.delete_sell_order();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_sell_order_and_check_seller_credit() {
+		scenarioGenerator.delete_sell_order();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_sell_order_and_check_sell_side_in_queue() {
+		scenarioGenerator.delete_sell_order();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 800);
+	}
+
+	@Test
+	public void delete_sell_order_and_check_buy_side_in_queue() {
+		scenarioGenerator.delete_sell_order();
+		assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
+	}
+
+	@Test
+	public void delete_sell_ice_order_and_check_buyer_credit() {
+		scenarioGenerator.delete_sell_ice_order();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_sell_ice_order_and_check_buyer_position() {
+		scenarioGenerator.delete_sell_ice_order();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_sell_ice_order_and_check_seller_position() {
+		scenarioGenerator.delete_sell_ice_order();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_sell_ice_order_and_check_seller_credit() {
+		scenarioGenerator.delete_sell_ice_order();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_sell_ice_order_and_check_buy_side_in_queue() {
+		scenarioGenerator.delete_sell_ice_order();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void delete_sell_ice_order_and_check_sell_side_in_queue() {
+		scenarioGenerator.delete_sell_ice_order();
+		assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> orderBook.getSellQueue().get(4));
+	}
+
+	@Test
+	public void delete_buy_order_and_check_buyer_credit() {
+		scenarioGenerator.delete_buy_order();
+		assertPack.exceptedBuyerCredit = 3000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_buy_order_and_check_buyer_position() {
+		scenarioGenerator.delete_buy_order();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_buy_order_and_check_seller_credit() {
+		scenarioGenerator.delete_buy_order();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_buy_order_and_check_seller_position() {
+		scenarioGenerator.delete_buy_order();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_buy_order_and_check_sell_side_in_queue() {
+		scenarioGenerator.delete_buy_order();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void delete_buy_order_and_check_buy_side_in_queue() {
+		scenarioGenerator.delete_buy_order();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
+	}
+
+	@Test
+	public void delete_buy_ice_order_and_check_buyer_credit() {
+		scenarioGenerator.delete_buy_ice_order();
+		assertPack.exceptedBuyerCredit = 22500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_buy_ice_order_and_check_buyer_position() {
+		scenarioGenerator.delete_buy_ice_order();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_buy_ice_order_and_check_seller_credit() {
+		scenarioGenerator.delete_buy_ice_order();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_buy_ice_order_and_check_seller_position() {
+		scenarioGenerator.delete_buy_ice_order();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_buy_ice_order_and_check_sell_side_in_queue() {
+		scenarioGenerator.delete_buy_ice_order();
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+	}
+
+	@Test
+	public void delete_buy_ice_order_and_check_buy_side_in_queue() {
+		scenarioGenerator.delete_buy_ice_order();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+	}
+
+	@Test
+	public void delete_non_existing_sell_order_and_check_buyer_credit() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_non_existing_sell_order_and_check_buyer_position() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_non_existing_sell_order_and_check_buy_side_in_queue() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+	}
+
+	@Test
+	public void delete_non_existing_sell_order_and_check_seller_credit() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_non_existing_sell_order_and_check_seller_position() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_non_existing_sell_order_and_check_sell_side_in_queue() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_sell_order());
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+	}
+
+	@Test
+	public void delete_non_existing_buy_order_and_check_buyer_credit() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void delete_non_existing_buy_order_and_check_buyer_position() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void delete_non_existing_buy_order_and_check_buy_side_in_queue() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+	}
+
+	@Test
+	public void delete_non_existing_buy_order_and_check_seller_credit() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void delete_non_existing_buy_order_and_check_seller_position() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void delete_non_existing_buy_order_and_check_sell_side_in_queue() {
+		assertThatExceptionOfType(NotFoundException.class)
+			.isThrownBy(() -> scenarioGenerator.delete_non_existing_buy_order());
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+	}
+
+	// TODO: what if new quantity be zero? what should happen in that case?
+
+	@Test
+	public void decrease_sell_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_order_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_order_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.decrease_sell_order_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 4, 600);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_ice_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_ice_order_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_ice_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_ice_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_quantity_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_ice_order_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.decrease_sell_ice_order_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 30, 1000, 10, 10);
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_buy_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.decrease_buy_order_quantity();
+		assertPack.exceptedBuyerCredit = 900;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.decrease_buy_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.decrease_buy_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_and_check_seller_position() {
+		scenarioGenerator.decrease_buy_order_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_buy_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.decrease_buy_order_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 7, 300);
+	}
+
+	@Test
+	public void decrease_buy_ice_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_buy_ice_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_buy_ice_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.decrease_buy_ice_order_quantity();
+		assertPack.exceptedBuyerCredit = 19000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.decrease_buy_ice_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.decrease_buy_ice_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_quantity_and_check_seller_position() {
+		scenarioGenerator.decrease_buy_ice_order_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.decrease_buy_ice_order_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 7, 500, 10, 7);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_sell_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.increase_sell_order_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.increase_sell_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.increase_sell_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_and_check_seller_position() {
+		scenarioGenerator.increase_sell_order_quantity();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.increase_sell_order_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 15, 700);
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.increase_sell_ice_order_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.increase_sell_ice_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.increase_sell_ice_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_and_check_seller_position() {
+		scenarioGenerator.increase_sell_ice_order_quantity();
+		assertPack.exceptedSellerPosition = 100;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.increase_sell_ice_order_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 60, 1000, 10, 10);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_but_not_enough_position_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+	}
+
+	@Test
+	public void increase_sell_order_quantity_but_not_enough_position_and_check_buyer_credit() {
+		scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_but_not_enough_position_and_check_buyer_position() {
+		scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_but_not_enough_position_and_check_seller_credit() {
+		scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_but_not_enough_position_and_check_seller_position() {
+		scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_quantity_but_not_enough_position_and_check_order_in_queue() {
+		scenarioGenerator.increase_sell_order_quantity_but_not_enough_position();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_buyer_credit() {
+		scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_buyer_position() {
+		scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_seller_credit() {
+		scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_seller_position() {
+		scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_ice_order_quantity_but_not_enough_position_and_check_order_in_queue() {
+		scenarioGenerator.increase_sell_ice_order_quantity_but_not_enough_position();
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_order_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 1, 4, 25, 400);
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_quantity();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_quantity();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 60, 500, 10, 10);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_but_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void increase_buy_order_quantity_but_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_but_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_but_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_but_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_quantity_but_not_enough_credit_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_order_quantity_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_quantity_but_not_enough_credit_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_quantity_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	// TODO: add peakSize scenarios after you are sure how they work
+
+	@Test
+	public void decrease_sell_order_price_no_trading_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_order_price_no_trading_happens_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_price_no_trading_happens_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_price_no_trading_happens_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_price_no_trading_happens_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_price_no_trading_happens_and_check_order_in_queue() {
+		scenarioGenerator.decrease_sell_order_price_no_trading_happens();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 3, 10, 650);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_no_trading_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_no_trading_happens_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_no_trading_happens_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_no_trading_happens_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_no_trading_happens_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_no_trading_happens_and_check_order_in_queue() {
+		scenarioGenerator.decrease_sell_ice_order_price_no_trading_happens();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 5, 45, 600, 10, 10);
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 10;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.exceptedSellerCredit = 5000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.exceptedSellerPosition = 75;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 2, 4, 10, 900);
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 3)).isFalse();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 35, 500, 10, 10);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertPack.exceptedSellerCredit = 22500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertPack.exceptedSellerPosition = 40;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isFalse();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertPack.exceptedSellerCredit = 22500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertPack.exceptedSellerPosition = 80;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 3, 5, 450);
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.decrease_sell_order_price_and_partially_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_buyer_credit() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_buyer_position() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_seller_credit() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertPack.exceptedSellerCredit = 22500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_seller_position() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertPack.exceptedSellerPosition = 45;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 5, 5, 450, 10, 5);
+	}
+
+	@Test
+	public void decrease_sell_ice_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.decrease_sell_ice_order_price_and_partially_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+	}
+
+	@Test
+	public void decrease_buy_order_price_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_buy_order_price();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_buy_order_price_and_check_buyer_credit() {
+		scenarioGenerator.decrease_buy_order_price();
+		assertPack.exceptedBuyerCredit = 1500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_buy_order_price_and_check_buyer_position() {
+		scenarioGenerator.decrease_buy_order_price();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_buy_order_price_and_check_seller_credit() {
+		scenarioGenerator.decrease_buy_order_price();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_buy_order_price_and_check_seller_position() {
+		scenarioGenerator.decrease_buy_order_price();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_buy_order_price_and_check_order_in_queue() {
+		scenarioGenerator.decrease_buy_order_price();
+		assertPack.assertOrderInQueue(Side.BUY, 3, 3, 10, 150);
+	}
+
+	@Test
+	public void decrease_buy_ice_order_price_and_check_match_result() {
+		MatchResult res = scenarioGenerator.decrease_buy_ice_order_price();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void decrease_buy_ice_order_price_and_check_buyer_credit() {
+		scenarioGenerator.decrease_buy_ice_order_price();
+		assertPack.exceptedBuyerCredit = 13500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_price_and_check_buyer_position() {
+		scenarioGenerator.decrease_buy_ice_order_price();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_price_and_check_seller_credit() {
+		scenarioGenerator.decrease_buy_ice_order_price();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_price_and_check_seller_position() {
+		scenarioGenerator.decrease_buy_ice_order_price();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void decrease_buy_ice_order_price_and_check_order_in_queue() {
+		scenarioGenerator.decrease_buy_ice_order_price();
+		assertPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 200, 10, 10);
+	}
+
+	@Test
+	public void increase_sell_order_price_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_sell_order_price();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_sell_order_price_and_check_buyer_credit() {
+		scenarioGenerator.increase_sell_order_price();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_sell_order_price_and_check_buyer_position() {
+		scenarioGenerator.increase_sell_order_price();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_price_and_check_seller_credit() {
+		scenarioGenerator.increase_sell_order_price();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_sell_order_price_and_check_seller_position() {
+		scenarioGenerator.increase_sell_order_price();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_order_price_and_check_order_in_queue() {
+		scenarioGenerator.increase_sell_order_price();
+		assertPack.assertOrderInQueue(Side.SELL, 3, 3, 10, 950);
+	}
+
+	@Test
+	public void increase_sell_ice_order_price_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_sell_ice_order_price();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_sell_ice_order_price_and_check_buyer_credit() {
+		scenarioGenerator.increase_sell_ice_order_price();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_sell_ice_order_price_and_check_buyer_position() {
+		scenarioGenerator.increase_sell_ice_order_price();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_sell_ice_order_price_and_check_seller_credit() {
+		scenarioGenerator.increase_sell_ice_order_price();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_sell_ice_order_price_and_check_seller_position() {
+		scenarioGenerator.increase_sell_ice_order_price();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_sell_ice_order_price_and_check_order_in_queue() {
+		scenarioGenerator.increase_sell_ice_order_price();
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1100, 10, 10);
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens();
+		assertPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 250);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 550, 10, 10);
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_no_trading_happens_and_not_enough_credit_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 4, 1, 10, 100);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit_and_check_order_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_no_trading_happens_and_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertPack.exceptedBuyerCredit = 1000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 10;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertPack.exceptedSellerCredit = 6000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertPack.exceptedSellerPosition = 75;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.increase_buy_order_price_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 3, 1, 10, 100);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertPack.exceptedSellerCredit = 35000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertPack.exceptedSellerPosition = 40;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 5, 40, 1000, 10, 5);
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 5)).isTrue();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertPack.exceptedBuyerPosition = 20;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertPack.exceptedSellerCredit = 13000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertPack.exceptedSellerPosition = 65;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isFalse();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 2)).isFalse();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 3, 5, 700);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertPack.exceptedBuyerCredit = 22500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertPack.exceptedSellerCredit = 75000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertPack.exceptedSellerPosition = 0;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertThat(orderBook.getSellQueue().size()).isZero();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_partially_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 5, 1000, 10, 5);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertPack.exceptedBuyerCredit = 13500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_sell_side_in_queue() {
+		scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 1)).isTrue();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_trade_happens_but_not_enough_credit_and_check_buy_side_in_queue() {
+		scenarioGenerator.increase_buy_order_price_and_trade_happens_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buyer_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertPack.exceptedBuyerCredit = 57000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buyer_position() {
+		scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_seller_credit() {
+		scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_seller_position() {
+		scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
+		assertPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+	}
+
+	@Test
+	public void increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.increase_buy_ice_order_price_and_trade_happens_but_not_enough_credit_causes_rollback();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500);
+	}
+
+	// TODO: add some test about updating a ice order that its display is not equal to its quantity
+
+	public void add_sell_order_no_trades_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_no_trades_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_no_trades_happens_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_no_trades_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_no_trades_happens_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_no_trades_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_no_trades_happens_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_no_trades_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_no_trades_happens_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_no_trades_happens();
+		assertPack.exceptedSellerPosition = 100;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_no_trades_happens_and_check_order_in_queue() {
+		scenarioGenerator.add_sell_order_no_trades_happens();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 6, 15, 650);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 2, 10, 700);
+	}
+
+	@Test
+	public void add_sell_ice_order_no_trades_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_no_trades_happens_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_no_trades_happens_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_no_trades_happens_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_no_trades_happens_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		assertPack.exceptedSellerPosition = 105;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_no_trades_happens_and_check_order_in_queue() {
+		scenarioGenerator.add_sell_ice_order_no_trades_happens();
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 5, 6, 20, 1000, 7, 7);
+	}
+
+	@Test
+	public void add_sell_order_and_not_enough_position_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_and_not_enough_position();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+	}
+
+	@Test
+	public void add_sell_order_and_not_enough_position_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_and_not_enough_position();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_and_not_enough_position_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_and_not_enough_position();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_and_not_enough_position_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_and_not_enough_position();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_and_not_enough_position_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_and_not_enough_position();
+		assertPack.exceptedSellerPosition = 85;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_and_not_enough_position_and_check_order_in_queue() {
+		scenarioGenerator.add_sell_order_and_not_enough_position();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_not_enough_position_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_not_enough_position_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_not_enough_position_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_not_enough_position_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_not_enough_position_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_not_enough_position_and_check_order_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_not_enough_position();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6));
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 13;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_and_completely_traded();
+		assertPack.exceptedSellerCredit = 6500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_and_completely_traded();
+		assertPack.exceptedSellerPosition = 85;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_and_completely_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
+	}
+
+	@Test
+	public void add_sell_order_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 32, 500, 10, 7);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 67;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertPack.exceptedSellerCredit = 29900;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 8)).isFalse();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 2, 8, 200);
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_and_partially_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_and_partially_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_and_partially_traded();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_and_partially_traded();
+		assertPack.exceptedSellerCredit = 22500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_and_partially_traded();
+		assertPack.exceptedSellerPosition = 100;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 7, 15, 500);
+	}
+
+	@Test
+	public void add_sell_order_and_partially_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_and_partially_traded();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedBuyerPosition = 55;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedSellerCredit = 26500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 3, 3);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.exceptedBuyerPosition = 55;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.exceptedSellerCredit = 26500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 7, 5, 400, 7, 5);
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 5)).isFalse();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 4)).isFalse();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 3, 10, 300);
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.exceptedSellerCredit = 32500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.exceptedSellerPosition = 85;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_finished();
+		assertThat(orderBook.getBuyQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.exceptedSellerCredit = 32500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_finished();
+		assertThat(orderBook.getBuyQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.exceptedSellerCredit = 32500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.exceptedSellerPosition = 120;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 35, 100);
+	}
+
+	@Test
+	public void add_sell_order_matches_with_all_buyer_queue_and_not_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_matches_with_all_buyer_queue_and_not_finished();
+		assertThat(orderBook.getBuyQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_match_check() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.exceptedSellerCredit = 32500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.exceptedSellerPosition = 100;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 15, 100, 10, 10);
+	}
+
+	@Test
+	public void add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_matches_with_all_buyer_queue_and_not_finished();
+		assertThat(orderBook.getBuyQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerCredit = 22500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 5, 10, 500);
+	}
+
+	@Test
+	public void add_sell_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedBuyerPosition = 45;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerCredit = 22500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 5, 10, 500, 10, 5);
+	}
+
+	@Test
+	public void add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertPack.exceptedSellerPosition = 145;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertPack.exceptedSellerPosition = 185;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+	}
+
+	@Test
+	public void add_sell_ice_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+		scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedBuyerPosition = 50;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+		scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedSellerCredit = 24500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+		scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 5, 400);
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+		scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+		scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedBuyerPosition = 50;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+		scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedSellerCredit = 24500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+		scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertThat(orderBook.isThereOrderWithId(Side.SELL, 6)).isFalse();
+	}
+
+	@Test
+	public void add_sell_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_sell_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 5, 400);
+	}
+
+	@Test
+	public void add_buy_order_no_trades_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_no_trades_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_order_no_trades_happens_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_no_trades_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_no_trades_happens_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_no_trades_happens();
+		assertPack.exceptedBuyerPosition = 0;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_no_trades_happens_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_no_trades_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_no_trades_happens_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_no_trades_happens();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_no_trades_happens_and_check_order_in_queue() {
+		scenarioGenerator.add_buy_order_no_trades_happens();
+		assertPack.assertOrderInQueue(Side.BUY, 4, 2, 10, 200);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 6, 22, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+	}
+
+	@Test
+	public void add_buy_ice_order_no_trades_happens_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_ice_order_no_trades_happens_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_no_trades_happens_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_no_trades_happens_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_no_trades_happens_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_no_trades_happens_and_check_order_in_queue() {
+		scenarioGenerator.add_buy_ice_order_no_trades_happens();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 4, 10, 400);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 6, 5, 450, 1, 1);
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void add_buy_order_but_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_but_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void add_buy_order_but_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_but_not_enough_credit();
+		assertPack.exceptedBuyerCredit = 6000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_but_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_but_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_but_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_but_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_but_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_but_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_but_not_enough_credit_and_check_order_in_queue() {
+		scenarioGenerator.add_buy_order_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 3, 2, 10, 200);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+	}
+
+	@Test
+	public void add_buy_ice_order_but_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void add_buy_ice_order_but_not_enough_credit_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		assertPack.exceptedBuyerCredit = 2000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_but_not_enough_credit_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_but_not_enough_credit_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_but_not_enough_credit_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_but_not_enough_credit_and_check_order_in_queue() {
+		scenarioGenerator.add_buy_ice_order_but_not_enough_credit();
+		assertPack.assertOrderInQueue(Side.BUY, 1, 4, 10, 400);
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 13;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_and_completely_traded();
+		assertPack.exceptedSellerCredit = 8100;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_and_completely_traded();
+		assertPack.exceptedSellerPosition = 72;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 7, 700);
+	}
+
+	@Test
+	public void add_buy_order_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertPack.exceptedBuyerPosition = 52;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertPack.exceptedSellerCredit = 42000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertPack.exceptedSellerPosition = 33;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 5, 33, 1000, 10, 8);
+	}
+
+	@Test
+	public void add_buy_ice_order_and_completely_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_and_completely_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 8)).isFalse();
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_match_check() {
+		MatchResult res = scenarioGenerator.add_buy_order_and_partially_traded();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_and_partially_traded();
+		assertPack.assertBuyerCredit();
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_and_partially_traded();
+		assertPack.exceptedBuyerPosition = 10;
+		assertPack.assertBuyerPosition();
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_and_partially_traded();
+		assertPack.exceptedSellerCredit = 6000;
+		assertPack.assertSellerCredit();
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_and_partially_traded();
+		assertPack.exceptedSellerPosition = 75;
+		assertPack.assertSellerPosition();
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+	}
+
+	public void add_buy_order_and_partially_traded_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_and_partially_traded();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600);
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_match_check() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.assertBuyerCredit();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedBuyerPosition = 10;
+		assertPack.assertBuyerPosition();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedSellerCredit = 6000;
+		assertPack.assertSellerCredit();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedSellerPosition = 75;
+		assertPack.assertSellerPosition();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 6, 3, 600, 2, 2);
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_match_check() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.assertBuyerCredit();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.exceptedBuyerPosition = 10;
+		assertPack.assertBuyerPosition();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.exceptedSellerCredit = 6000;
+		assertPack.assertSellerCredit();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.exceptedSellerPosition = 75;
+		assertPack.assertSellerPosition();
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+	}
+
+	public void add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_and_partially_traded_and_remainder_is_less_than_peak_size();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 6, 4, 600, 5, 4);
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_match_check() {
+		MatchResult res = scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertPack.exceptedBuyerCredit = 9000;
+		assertPack.assertBuyerCredit();
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertPack.assertSellerPosition();
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	public void add_buy_order_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_not_enough_credit_causes_rollback();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_match_check() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertPack.exceptedBuyerCredit = 78000;
+		assertPack.assertBuyerCredit();
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertPack.assertSellerPosition();
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
+		assertPack.assertOrderInQueue(Side.SELL, 3, 4, 10, 900);
+		assertPack.assertOrderInQueue(Side.SELL, 4, 5, 45, 1000);
+	}
+
+	public void add_buy_ice_order_not_enough_credit_causes_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_not_enough_credit_causes_rollback();
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertPack.exceptedSellerCredit = 75000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertPack.exceptedSellerPosition = 0;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertThat(orderBook.getSellQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_finished();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertPack.exceptedSellerCredit = 75000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertPack.exceptedSellerPosition = 0;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertThat(orderBook.getSellQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_finished();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedSellerCredit = 75000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedSellerPosition = 0;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertThat(orderBook.getSellQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000);
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedBuyerPosition = 85;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedSellerCredit = 75000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedSellerPosition = 0;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertThat(orderBook.getSellQueue().size()).isZero();
+	}
+
+	@Test
+	public void add_buy_ice_order_matches_with_all_seller_queue_and_not_finished_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 8, 15, 1000, 10, 10);
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedBuyerPosition = 20;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerCredit = 13000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerPosition = 65;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+	}
+
+	@Test
+	public void add_buy_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 6, 2, 17, 700);
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedBuyerPosition = 20;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerCredit = 13000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.exceptedSellerPosition = 65;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 3, 10, 800);
+	}
+
+	@Test
+	public void add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_with_min_execution_quantity_and_next_go_to_queue();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 6, 12, 20, 700, 10, 10);
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertPack.exceptedBuyerCredit = 36000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+	}
+
+	@Test
+	public void add_buy_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertPack.exceptedBuyerCredit = 80000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 1, 10, 600);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 3, 10, 800);
+	}
+
+	@Test
+	public void add_buy_ice_order_not_enough_execution_cause_rollback_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_not_enough_execution_cause_rollback();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedBuyerCredit = 10000;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+		scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedBuyerPosition = 40;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+		scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedSellerCredit = 30000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+		scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedSellerPosition = 45;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 5, 45, 1000, 10, 10);
+	}
+
+	@Test
+	public void add_buy_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.EXECUTED);
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_credit() {
+		scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buyer_position() {
+		scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedBuyerPosition = 22;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_credit() {
+		scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedSellerCredit = 14600;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_seller_position() {
+		scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.exceptedSellerPosition = 63;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_sell_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 3, 8, 800);
+	}
+
+	@Test
+	public void add_buy_ice_order_quantity_is_equal_to_min_execution_quantity_and_check_buy_side_in_queue() {
+		scenarioGenerator.add_buy_ice_order_quantity_is_equal_to_min_execution_quantity();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 45, 500, 10, 10);
+		assertThat(orderBook.isThereOrderWithId(Side.BUY, 6)).isFalse();
+	}
+
+	@Test
+	public void add_two_buy_orders_with_same_price_and_check_orders_in_queue() {
+		scenarioGenerator.add_two_buy_orders_with_same_price();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 7, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 3, 10, 300);
+	}
+
+	@Test
+	public void add_two_buy_ice_orders_with_same_price_and_check_orders_in_queue() {
+		scenarioGenerator.add_two_buy_ice_orders_with_same_price();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 7, 10, 300, 10, 10);
+	}
+
+	@Test
+	public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+	}
+
+	@Test
+	public void add_sell_order_causes_rollback_for_buy_orders_with_same_price_and_check_orders_in_queue() {
+		scenarioGenerator.add_sell_order_causes_rollback_for_buy_orders_with_same_price();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 7, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 3, 10, 300);
+	}
+
+	@Test
+	public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_EXECUTION);
+	}
+
+	@Test
+	public void add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price_and_check_orders_in_queue() {
+		scenarioGenerator.add_sell_order_causes_rollback_for_buy_ice_orders_with_same_price();
+		assertPack.assertOrderInQueue(Side.BUY, 2, 3, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 6, 10, 300, 10, 10);
+		assertPack.assertOrderInQueue(Side.BUY, 4, 7, 10, 300, 10, 10);
+	}
+
+	@Test
+	public void change_buy_order_price_and_equals_it_with_another_order_and_check_buy_queue() {
+		scenarioGenerator.change_buy_order_price_and_equals_it_with_another_order();
+		assertPack.assertOrderInQueue(Side.BUY, 1, 3, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 2, 10, 200);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 4, 10, 200);
+	}
+
+	@Test
+	public void change_sell_order_price_and_equals_it_with_another_order_and_check_sell_queue() {
+		scenarioGenerator.change_sell_order_price_and_equals_it_with_another_order();
+		assertPack.assertOrderInQueue(Side.SELL, 3, 3, 10, 800);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 4, 10, 700);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+	}
+
+	@Test
+	public void change_buy_ice_order_price_and_equals_it_with_another_order_and_check_buy_queue() {
+		scenarioGenerator.change_buy_ice_order_price_and_equals_it_with_another_order();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 3, 10, 300);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 5, 45, 300, 10, 10);
+	}
+
+	@Test
+	public void change_sell_ice_order_price_and_equals_it_with_another_order_and_check_sell_queue() {
+		scenarioGenerator.change_sell_ice_order_price_and_equals_it_with_another_order();
+		assertPack.assertOrderInQueue(Side.SELL, 1, 2, 10, 700);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 5, 45, 700, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 3, 3, 10, 800);
+	}
+
+	@Test
+	public void add_two_sell_orders_with_same_price_and_check_sell_queue() {
+		scenarioGenerator.add_two_sell_orders_with_same_price();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 7, 10, 575);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 6, 10, 575);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 1, 10, 600);
+	}
+
+	@Test
+	public void add_two_sell_ice_orders_with_same_price_and_check_sell_queue() {
+		scenarioGenerator.add_two_sell_ice_orders_with_same_price();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 6, 10, 575, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 7, 10, 575, 10, 10);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 1, 10, 600);
+	}
+
+	@Test
+	public void add_buy_order_matches_with_all_seller_queue_and_not_finished_and_check_last_trade_price() {
+		scenarioGenerator.add_buy_order_matches_with_all_seller_queue_and_not_finished();
+		assertPack.exceptedLastTradePrice = 1000;
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size_and_check_last_trade_price() {
+		scenarioGenerator.add_sell_ice_order_and_partially_traded_and_remainder_is_bigger_than_peak_size();
+		assertPack.exceptedLastTradePrice = 400;
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void decrease_sell_order_price_and_completely_traded_and_check_last_trade_price() {
+		scenarioGenerator.decrease_sell_order_price_and_completely_traded();
+		assertPack.exceptedLastTradePrice = 500;
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void increase_buy_order_price_and_partially_traded_and_check_last_trade_price() {
+		scenarioGenerator.increase_buy_order_price_and_partially_traded();
+		assertPack.exceptedLastTradePrice = 700;
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void new_sell_stop_limit_order_and_active_at_the_first_and_check_match_results() {
+		List<MatchResult> results = scenarioGenerator.new_sell_stop_limit_order_and_active_at_the_first();
+		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
+		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
+	}
+
+	@Test
+	public void new_sell_stop_limit_order_and_active_at_the_first_and_check_last_trade_price() {
+		scenarioGenerator.new_sell_stop_limit_order_and_active_at_the_first();
+		assertPack.exceptedLastTradePrice = 500;
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void new_buy_stop_limit_order_and_active_at_the_first_and_check_match_results() {
+		List<MatchResult> results = scenarioGenerator.new_buy_stop_limit_order_and_active_at_the_first();
+		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
+		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
+	}
+
+	@Test
+	public void new_buy_stop_limit_order_and_active_at_the_first_and_check_last_trade_price() {
+		scenarioGenerator.new_buy_stop_limit_order_and_active_at_the_first();
+		assertPack.exceptedLastTradePrice = 600;
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void add_sell_stop_limit_order_but_not_enough_position_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_sell_stop_limit_order_but_not_enough_position();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+	}
+
+	@Test
+	public void add_buy_stop_limit_order_but_not_enough_credit_and_check_match_result() {
+		MatchResult res = scenarioGenerator.add_buy_stop_limit_order_but_not_enough_credit();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_buyer_credit() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_buyer_position() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_seller_credit() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_seller_position() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.exceptedSellerPosition = 130;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_last_trade_price() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.assertLastTradePrice();
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_stop_limit_sell_queue() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 500);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 7, 15, 300, 400);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 2, 8, 15, 200, 300);
+	}
+
+	@Test
+	public void add_three_stop_limit_order_both_buy_and_sell_and_check_stop_limit_buy_queue() {
+		scenarioGenerator.add_three_stop_limit_order_both_buy_and_sell();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 700, 600);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 7, 15, 800, 700);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 2, 8, 15, 900, 800);
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_match_results() {
+		List<MatchResult> results = scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 9, 5);
+		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
+		assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 1);
+		assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_buyer_credit() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_buyer_position() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.exceptedBuyerPosition = 75;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_seller_credit() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.exceptedSellerCredit = 31500;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_seller_position() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.exceptedSellerPosition = 100;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_sell_queue() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 8, 5, 200);
+		assertPack.assertOrderInQueue(Side.SELL, 1, 7, 5, 300);
+		assertPack.assertOrderInQueue(Side.SELL, 2, 6, 5, 400);
+		assertPack.assertOrderInQueue(Side.SELL, 3, 1, 10, 600);
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_buy_queue() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 1, 10, 100);
+		assertThat(orderBook.getBuyQueue().size()).isEqualTo(1);
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_stop_limit_sell_queue() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertThat(orderBook.getStopLimitOrderSellQueue().isEmpty()).isTrue();
+	}
+
+	@Test
+	public void new_sell_order_activate_all_sell_stop_limit_orders_and_check_stop_limit_buy_queue() {
+		scenarioGenerator.new_sell_order_activate_all_sell_stop_limit_orders();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 700, 600);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 7, 15, 800, 700);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 2, 8, 15, 900, 800);
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_match_results() {
+		List<MatchResult> results = scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 9, 1);
+		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 1);
+		assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 1);
+		assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_buyer_credit() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_buyer_position() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.exceptedBuyerPosition = 40;
+		assertPack.assertBuyerPosition();
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_seller_credit() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.exceptedSellerCredit = 30000;
+		assertPack.assertSellerCredit();
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_seller_position() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.exceptedSellerPosition = 90;
+		assertPack.assertSellerPosition();
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_sell_queue() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 5, 45, 1000, 10, 10);
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_buy_queue() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 8, 5, 900);
+		assertPack.assertOrderInQueue(Side.BUY, 1, 7, 5, 800);
+		assertPack.assertOrderInQueue(Side.BUY, 2, 6, 5, 700);
+		assertPack.assertOrderInQueue(Side.BUY, 3, 5, 45, 500, 10, 10);
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_stop_limit_sell_queue() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 500);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 7, 15, 300, 400);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 2, 8, 15, 200, 300);
+	}
+
+	@Test
+	public void new_buy_order_activate_all_buy_stop_limit_orders_and_check_stop_limit_buy_queue() {
+		scenarioGenerator.new_buy_order_activate_all_buy_stop_limit_orders();
+		assertThat(orderBook.getStopLimitOrderBuyQueue().isEmpty()).isTrue();
+	}
+
+	@Test
+	public void new_sell_order_activate_one_sell_stop_limit_order_and_check_buy_queue() {
+		scenarioGenerator.new_sell_order_activate_one_sell_stop_limit_order();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 4, 10, 400);
+	}
+
+	@Test
+	public void new_sell_order_activate_one_sell_stop_limit_order_and_check_stop_limit_sell_queue() {
+		scenarioGenerator.new_sell_order_activate_one_sell_stop_limit_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 7, 15, 300, 400);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 8, 15, 200, 300);
+	}
+
+	@Test
+	public void new_buy_order_activate_one_buy_stop_limit_order_and_check_sell_queue() {
+		scenarioGenerator.new_buy_order_activate_one_buy_stop_limit_order();
+		assertPack.assertOrderInQueue(Side.SELL, 0, 2, 10, 700);
+	}
+
+	@Test
+	public void new_buy_order_activate_one_buy_stop_limit_order_and_check_stop_limit_buy_queue() {
+		scenarioGenerator.new_buy_order_activate_one_buy_stop_limit_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 7, 15, 800, 700);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 8, 15, 900, 800);
+	}
+
+	@Test
+	public void decrease_price_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
+		scenarioGenerator.decrease_price_stop_limit_sell_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 350, 500);
+	}
+
+	@Test
+	public void increase_price_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
+		scenarioGenerator.increase_price_stop_limit_sell_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 450, 500);
+	}
+
+	@Test
+	public void decrease_quantity_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
+		scenarioGenerator.decrease_quantity_stop_limit_sell_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 10, 400, 500);
+	}
+
+	@Test
+	public void increase_quantity_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
+		scenarioGenerator.increase_quantity_stop_limit_sell_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 20, 400, 500);
+	}
+
+	@Test
+	public void increase_quantity_stop_limit_sell_order_and_not_enough_position_and_check_match_result() {
+		MatchResult res = scenarioGenerator.increase_quantity_stop_limit_sell_order_and_not_enough_position();
+		assertThat(res.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_POSITIONS);
+	}
+
+	@Test
+	public void decrease_stop_price_stop_limit_sell_order_and_check_order_in_stop_limit_sell_queue() {
+		scenarioGenerator.decrease_stop_price_stop_limit_sell_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 7, 15, 300, 400);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 6, 15, 400, 350);
+	}
+
+	@Test
+	public void increase_stop_price_stop_limit_sell_order_and_not_activated_and_check_order_in_stop_limit_sell_queue() {
+		scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_not_activated();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 525);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 7, 15, 300, 400);
+	}
+
+	@Test
+	public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_match_results() {
+		List<MatchResult> results = scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
+		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
+		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 2);
+	}
+
+	@Test
+	public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_stop_limit_sell_queue() {
+		scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 7, 15, 300, 400);
+	}
+
+	@Test
+	public void increase_stop_price_stop_limit_sell_order_and_activated_and_check_buy_queue() {
+		scenarioGenerator.increase_stop_price_stop_limit_sell_order_and_activated();
+		assertPack.assertOrderInQueue(Side.BUY, 0, 5, 30, 500, 10, 5);
+	}
+
+	@Test
+	public void decrease_price_stop_limit_buy_order_and_check_order_in_stop_limit_buy_queue() {
+		scenarioGenerator.decrease_price_stop_limit_buy_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 600, 600);
+	}
+
+	@Test
+	public void decrease_price_stop_limit_buy_order_and_check_buyer_credit() {
+		scenarioGenerator.decrease_price_stop_limit_buy_order();
+		assertPack.exceptedBuyerCredit = 1500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_price_stop_limit_buy_order_and_check_order_in_stop_limit_buy_queue() {
+		scenarioGenerator.increase_price_stop_limit_buy_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 750, 600);
+	}
+
+	@Test
+	public void increase_price_stop_limit_buy_order_and_check_buyer_credit() {
+		scenarioGenerator.increase_price_stop_limit_buy_order();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_price_stop_limit_buy_order_and_not_enough_credit() {
+		MatchResult result = scenarioGenerator.increase_price_stop_limit_buy_order_and_not_enough_credit();
+		assertThat(result.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void decrease_quantity_stop_limit_buy_order_and_check_order_in_stop_limit_buy_queue() {
+		scenarioGenerator.decrease_quantity_stop_limit_buy_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 10, 700, 600);
+	}
+
+	@Test
+	public void decrease_quantity_stop_limit_buy_order_and_check_buyer_credit() {
+		scenarioGenerator.decrease_quantity_stop_limit_buy_order();
+		assertPack.exceptedBuyerCredit = 3500;
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_quantity_stop_limit_buy_order_and_check_in_stop_limit_buy_queue() {
+		scenarioGenerator.increase_quantity_stop_limit_buy_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 20, 700, 600);
+	}
+
+	@Test
+	public void increase_quantity_stop_limit_buy_order_and_check_buyer_credit() {
+		scenarioGenerator.increase_quantity_stop_limit_buy_order();
+		assertPack.assertBuyerCredit();
+	}
+
+	@Test
+	public void increase_quantity_stop_limit_buy_order_and_not_enough_credit_and_check_match_result() {
+		MatchResult result = scenarioGenerator.increase_quantity_stop_limit_buy_order_and_not_enough_credit();
+		assertThat(result.outcome()).isEqualTo(MatchingOutcome.NOT_ENOUGH_CREDIT);
+	}
+
+	@Test
+	public void decrease_stop_price_stop_limit_buy_order_and_not_activated_and_check_in_stop_limit_buy_order() {
+		scenarioGenerator.decrease_stop_price_stop_limit_buy_order_and_not_activated();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 7, 15, 800, 575);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 6, 15, 700, 600);
+	}
+
+	@Test
+	public void decrease_stop_price_stop_limit_buy_order_and_activated_and_check_match_results() {
+		List<MatchResult> results = scenarioGenerator.decrease_stop_price_stop_limit_buy_order_and_activated();
+		assertPack.assertMatchResult(results.get(0), MatchingOutcome.EXECUTED, 6, 0);
+		assertPack.assertMatchResult(results.get(1), MatchingOutcome.EXECUTED, 6, 2);
+		assertPack.assertMatchResult(results.get(2), MatchingOutcome.EXECUTED, 7, 2);
+		assertPack.assertMatchResult(results.get(3), MatchingOutcome.EXECUTED, 8, 1);
+	}
+
+	@Test
+	public void increase_stop_price_stop_limit_buy_order_and_check_order_in_stop_order_buy_queue() {
+		scenarioGenerator.increase_stop_price_stop_limit_buy_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 7, 15, 800, 700);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 6, 15, 700, 750);
+	}
+
+	@Test
+	public void delete_stop_limit_sell_order_and_check_order_in_stop_order_sell_queue() {
+		scenarioGenerator.delete_stop_limit_sell_order();
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 0, 6, 15, 400, 500);
+		assertPack.assertOrderInStopLimitQueue(Side.SELL, 1, 8, 15, 200, 300);
+	}
+
+	@Test
+	public void delete_stop_limit_buy_order_and_check_order_in_stop_order_buy_queue() {
+		scenarioGenerator.delete_stop_limit_buy_order();
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 0, 6, 15, 700, 600);
+		assertPack.assertOrderInStopLimitQueue(Side.BUY, 1, 8, 15, 900, 800);
+	}
+
+	@Test
+	public void delete_stop_limit_buy_order_and_check_order_buyer_credit() {
+		scenarioGenerator.delete_stop_limit_buy_order();
+		assertPack.exceptedBuyerCredit = 12000;
+		assertPack.assertBuyerCredit();
+	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java
index ed03df9..91bc81d 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/EventPublisherTest.java
@@ -1,6 +1,9 @@
 package ir.ramtung.tinyme.messaging;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 import ir.ramtung.tinyme.messaging.event.OrderExecutedEvent;
+import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
@@ -11,42 +14,42 @@ import org.springframework.jms.annotation.EnableJms;
 import org.springframework.jms.core.JmsTemplate;
 import org.springframework.test.annotation.DirtiesContext;
 
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
 @Disabled
 @SpringBootTest
 @EnableJms
 @DirtiesContext
 public class EventPublisherTest {
-    @Autowired
-    JmsTemplate jmsTemplate;
-    @Autowired
-    EventPublisher eventPublisher;
-    @Value("${responseQueue}")
-    private String responseQueue;
-
-    @BeforeEach
-    void emptyResponseQueue() {
-        long receiveTimeout = jmsTemplate.getReceiveTimeout();
-        jmsTemplate.setReceiveTimeout(1000);
-        //noinspection StatementWithEmptyBody
-        while (jmsTemplate.receive(responseQueue) != null) ;
-        jmsTemplate.setReceiveTimeout(receiveTimeout);
-    }
-
-    @Test
-    @Disabled("Needs Artemis running to work.")
-    void response_channel_integration_works() {
-        OrderExecutedEvent orderExecutedEvent = new OrderExecutedEvent(1, 0, List.of());
-        eventPublisher.publish(orderExecutedEvent);
-
-        long receiveTimeout = jmsTemplate.getReceiveTimeout();
-        jmsTemplate.setReceiveTimeout(1000);
-        OrderExecutedEvent responseReceived = (OrderExecutedEvent) jmsTemplate.receiveAndConvert(responseQueue);
-        assertEquals(orderExecutedEvent, responseReceived);
-
-        jmsTemplate.setReceiveTimeout(receiveTimeout);
-    }
+
+	@Autowired
+	JmsTemplate jmsTemplate;
+
+	@Autowired
+	EventPublisher eventPublisher;
+
+	@Value("${responseQueue}")
+	private String responseQueue;
+
+	@BeforeEach
+	void emptyResponseQueue() {
+		long receiveTimeout = jmsTemplate.getReceiveTimeout();
+		jmsTemplate.setReceiveTimeout(1000);
+		//no inspection StatementWithEmptyBody
+		while (jmsTemplate.receive(responseQueue) != null)
+            ;
+		jmsTemplate.setReceiveTimeout(receiveTimeout);
+	}
+
+	@Test
+	@Disabled("Needs Artemis running to work.")
+	void response_channel_integration_works() {
+		OrderExecutedEvent orderExecutedEvent = new OrderExecutedEvent(1, 0, List.of());
+		eventPublisher.publish(orderExecutedEvent);
+
+		long receiveTimeout = jmsTemplate.getReceiveTimeout();
+		jmsTemplate.setReceiveTimeout(1000);
+		OrderExecutedEvent responseReceived = (OrderExecutedEvent) jmsTemplate.receiveAndConvert(responseQueue);
+		assertEquals(orderExecutedEvent, responseReceived);
+
+		jmsTemplate.setReceiveTimeout(receiveTimeout);
+	}
 }
diff --git a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
index eeb7c0b..cbbf480 100644
--- a/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
+++ b/TinyME_v2.0/src/test/java/ir/ramtung/tinyme/messaging/RequestDispatcherTest.java
@@ -1,8 +1,12 @@
 package ir.ramtung.tinyme.messaging;
 
+import static org.mockito.Mockito.timeout;
+import static org.mockito.Mockito.verify;
+
 import ir.ramtung.tinyme.domain.entity.Side;
-import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
 import ir.ramtung.tinyme.domain.service.OrderHandler;
+import ir.ramtung.tinyme.messaging.request.EnterOrderRq;
+import java.time.LocalDateTime;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
@@ -13,36 +17,47 @@ import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.jms.annotation.EnableJms;
 import org.springframework.jms.core.JmsTemplate;
 
-import java.time.LocalDateTime;
-
-import static org.mockito.Mockito.timeout;
-import static org.mockito.Mockito.verify;
-
 @Disabled
 @SpringBootTest
 @EnableJms
 public class RequestDispatcherTest {
-    @Autowired
-    private JmsTemplate jmsTemplate;
-    @MockBean
-    private OrderHandler mockOrderHandler;
-    @Value("${requestQueue}")
-    private String requestQueue;
-
-    @BeforeEach
-    void emptyRequestQueue() {
-        long receiveTimeout = jmsTemplate.getReceiveTimeout();
-        jmsTemplate.setReceiveTimeout(1000);
-        //noinspection StatementWithEmptyBody
-        while (jmsTemplate.receive(requestQueue) != null) ;
-        jmsTemplate.setReceiveTimeout(receiveTimeout);
-    }
-
-    @Test
-    @Disabled("Needs Artemis running to work.")
-    void request_channel_integration_works() {
-        EnterOrderRq rq = EnterOrderRq.createNewOrderRq(1, "ABC", 200, LocalDateTime.now(), Side.SELL, 300, 15450, 0, 0, 0, 0);
-        jmsTemplate.convertAndSend(requestQueue, rq);
-        verify(mockOrderHandler, timeout(1000)).handleEnterOrder(rq);
-    }
+
+	@Autowired
+	private JmsTemplate jmsTemplate;
+
+	@MockBean
+	private OrderHandler mockOrderHandler;
+
+	@Value("${requestQueue}")
+	private String requestQueue;
+
+	@BeforeEach
+	void emptyRequestQueue() {
+		long receiveTimeout = jmsTemplate.getReceiveTimeout();
+		jmsTemplate.setReceiveTimeout(1000);
+		//no inspection StatementWithEmptyBody
+		while (jmsTemplate.receive(requestQueue) != null)
+            ;
+		jmsTemplate.setReceiveTimeout(receiveTimeout);
+	}
+
+	@Test
+	@Disabled("Needs Artemis running to work.")
+	void request_channel_integration_works() {
+		EnterOrderRq rq = EnterOrderRq.createNewOrderRq(
+			1,
+			"ABC",
+			200,
+			LocalDateTime.now(),
+			Side.SELL,
+			300,
+			15450,
+			0,
+			0,
+			0,
+			0
+		);
+		jmsTemplate.convertAndSend(requestQueue, rq);
+		verify(mockOrderHandler, timeout(1000)).handleEnterOrder(rq);
+	}
 }
